//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vJAXB 2.1.10 in JDK 6 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2013.09.05 at 05:01:07 PM CDT 
//


package com.amdocs.dashboard.mobile.kpiReport;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for KpiReportElement complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="KpiReportElement">
 *   &lt;complexContent>
 *     &lt;extension base="{http://www.amdocs.com/dashboard/mobile/report}ReportElement">
 *       &lt;sequence>
 *         &lt;element name="Kpi" type="{http://www.amdocs.com/dashboard/mobile/report}KpiElement" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="KpiFilter" type="{http://www.amdocs.com/dashboard/mobile/report}KpiFilterElement" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="Level" type="{http://www.amdocs.com/dashboard/mobile/report}LevelElement" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="DetailView" type="{http://www.amdocs.com/dashboard/mobile/report}DetailViewElement" maxOccurs="unbounded" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "KpiReportElement", propOrder = {
    "kpis",
    "filters",
    "levels",
    "detailViews"
})
@XmlSeeAlso({
    DetailViewElement.class
})
public class KpiReportElement
    extends ReportElement
{

    @XmlElement(name = "Kpi")
    protected List<KpiElement> kpis;
    @XmlElement(name = "KpiFilter")
    protected List<KpiFilterElement> filters;
    @XmlElement(name = "Level")
    protected List<LevelElement> levels;
    @XmlElement(name = "DetailView")
    protected List<DetailViewElement> detailViews;

    /**
     * Gets the value of the kpis property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the kpis property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getKpis().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link KpiElement }
     * 
     * 
     */
    public List<KpiElement> getKpis() {
        if (kpis == null) {
            kpis = new ArrayList<KpiElement>();
        }
        return this.kpis;
    }

    public boolean isSetKpis() {
        return ((this.kpis!= null)&&(!this.kpis.isEmpty()));
    }

    public void unsetKpis() {
        this.kpis = null;
    }

    /**
     * Gets the value of the filters property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the filters property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getFilters().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link KpiFilterElement }
     * 
     * 
     */
    public List<KpiFilterElement> getFilters() {
        if (filters == null) {
            filters = new ArrayList<KpiFilterElement>();
        }
        return this.filters;
    }

    public boolean isSetFilters() {
        return ((this.filters!= null)&&(!this.filters.isEmpty()));
    }

    public void unsetFilters() {
        this.filters = null;
    }

    /**
     * Gets the value of the levels property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the levels property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getLevels().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link LevelElement }
     * 
     * 
     */
    public List<LevelElement> getLevels() {
        if (levels == null) {
            levels = new ArrayList<LevelElement>();
        }
        return this.levels;
    }

    public boolean isSetLevels() {
        return ((this.levels!= null)&&(!this.levels.isEmpty()));
    }

    public void unsetLevels() {
        this.levels = null;
    }

    /**
     * Gets the value of the detailViews property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the detailViews property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getDetailViews().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link DetailViewElement }
     * 
     * 
     */
    public List<DetailViewElement> getDetailViews() {
        if (detailViews == null) {
            detailViews = new ArrayList<DetailViewElement>();
        }
        return this.detailViews;
    }

    public boolean isSetDetailViews() {
        return ((this.detailViews!= null)&&(!this.detailViews.isEmpty()));
    }

    public void unsetDetailViews() {
        this.detailViews = null;
    }

}
