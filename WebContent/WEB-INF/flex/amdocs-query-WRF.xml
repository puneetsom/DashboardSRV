<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sql SYSTEM "amdocs-query-config.dtd">
<sql type="CdwSQL">
<statement code="WRF_LeadFuncArea_Query">
<![CDATA[
select 'All' label from dual 
union all 
select Leading_Func_Area label from (select distinct Leading_Func_Area from WRF
where req_id not like 'CR%' and upper(release_version) in (select distinct upper(a.release_version) from release_schedule a
, (select distinct release_version from release_schedule where trim(milestone_code) = 'M9'  
and release_date = (select min(release_date) from release_schedule where release_date > sysdate and trim(milestone_code) = 'M9' ) ) b
 where substr(a.release_version,-3,3) between substr(b.release_version,-3,3) - 30 and substr(b.release_version,-3,3) +50) 
 and leading_func_area is not null order by 1)]]>
</statement>

<statement code="WRF_MainApplication_Query">
<![CDATA[
select 'All' label from dual 
union all 
select  main_application label from (select distinct main_application from WRF
where req_id not like 'CR%' and upper(release_version) in (select distinct upper(a.release_version) from release_schedule a
, (select distinct release_version from release_schedule where trim(milestone_code) = 'M9'  
and release_date = (select min(release_date) from release_schedule where release_date > sysdate and trim(milestone_code) = 'M9' ) ) b
 where substr(a.release_version,-3,3) between substr(b.release_version,-3,3) - 30 and substr(b.release_version,-3,3) +50)
 and main_application is not null order by 1)
 ]]>
</statement>

<statement code="WRF_Programs_Query">
<![CDATA[
select 'All' label from dual 
union all 
select  Program label from (select distinct  Program from WRF
where req_id not like 'CR%' and upper(release_version) in (select distinct upper(a.release_version) from release_schedule a
, (select distinct release_version from release_schedule where trim(milestone_code) = 'M9'  
and release_date = (select min(release_date) from release_schedule where release_date > sysdate and trim(milestone_code) = 'M9' ) ) b
 where substr(a.release_version,-3,3) between substr(b.release_version,-3,3) - 30 and substr(b.release_version,-3,3) +50) 
 and program is not null order by 1)
]]>
</statement>

<statement code="WRF_Chart_Query">
<![CDATA[
select   * 
from     (select   'wa' chart_mode
				,	a.release_version
                 , nvl(sum(b.pre_full_wa_numbers),0) pre_full_wa_numbers
                 , nvl(sum(b.pre_part_wa_numbers),0) pre_part_wa_numbers
                 , nvl(sum(b.wa_numbers),0) wa_numbers
                 , nvl(sum(b.na_numbers),0) na_numbers
                 , nvl(sum(b.pre_full_wa_count),0) pre_full_wa_count
                 , nvl(sum(b.pre_part_wa_count),0) pre_part_wa_count
                 , nvl(sum(b.wa_count),0) wa_count
                 , nvl(sum(case when b.release_version is not null then b.na_count else 0 end),0) na_count
                 , 0 green_count
                 , 0 red_count
                 , 0 yellow_count
                 , 0 green_numbers
                 , 0 red_numbers
                 , 0 yellow_numbers
                 , 0 held_numbers
                 , 0 finhold_numbers
                 , 0 active_numbers
                 , 0 held_count
                 , 0 finhold_count
                 , 0 active_count
          from     (select   *
from     wrf_release
order by regexp_replace(release_version, '[^0-9]+', '') 
       , release_version desc) a
                   left outer join
                   (select  release_version
                          , work_authorized
                          , case when work_authorized = 'P' and to_number(Last_ADB) = to_number(work_auth_amt) then to_number(Last_ADB) else 0 end pre_full_wa_numbers
                          , case when work_authorized = 'P' and to_number(Last_ADB) > to_number(work_auth_amt) then to_number(Last_ADB) else 0 end pre_part_wa_numbers
                          , case when work_authorized = 'Y' or work_authorized = 'N/A' then to_number(Last_ADB) else 0 end  wa_numbers
                          , case when nvl(work_authorized,'N') = 'N' then to_number(Last_ADB) else 0 end na_numbers
                          , case when work_authorized = 'P' and to_number(Last_ADB) = to_number(work_auth_amt) then 1 else 0 end pre_full_wa_count
                          , case when work_authorized = 'P' and to_number(Last_ADB) > to_number(work_auth_amt) then 1 else 0 end pre_part_wa_count
                          , case when work_authorized = 'Y' or work_authorized = 'N/A' then 1 else 0 end wa_count
                          , case when nvl(work_authorized,'N') = 'N' then 1 else 0 end na_count
                    from    WRF
                    where   release_version not in ('TBD','No CSS Version')
                    and     req_id not like 'CR%'
                    and     ( Leading_Func_Area = {leadFuncArea} or {leadFuncArea} = 'All' )
                    and     ( main_application  = {mainAppl} or {mainAppl} = 'All' )
                    and     ( Program  = {program} or {program} = 'All' )
                    and     upper(trim(req_id)) like {reqId}
                    and     ( upper(trim(amdocs_owner)) like {employeeName}
                           or upper(trim(att_owner)) like {employeeName}
                           or upper(trim(assigned_to)) like {employeeName}
                           or upper(trim(ba_owner)) like {employeeName} 
						   or upper(trim(amdocs_sme_ba)) like {employeeName} )
                   ) b
                     on a.release_version  = upper(trim(b.release_version))
          --where    (pre_wa_count != 0 and wa_count != 0 and na_count != 0)
          group by a.release_version
          order by substr(a.release_version,-3,3), length(a.release_version)
         )
union all
select   * 
from     (select   'proj_status' chart_mode
			     , a.release_version
                 , 0 pre_full_wa_numbers
                 , 0 pre_part_wa_numbers
                 , 0 wa_numbers
                 , 0 na_numbers
                 , 0 pre_full_wa_count
       			 , 0 pre_part_wa_count
                 , 0 wa_count
                 , 0 na_count
                 , nvl(sum(b.green_count),0) green_count
                 , nvl(sum(b.red_count),0) red_count
                 , nvl(sum(b.yellow_count),0) yellow_count
                 , nvl(sum(b.green_number),0) green_numbers
                 , nvl(sum(b.red_number),0) red_numbers
                 , nvl(sum(b.yellow_number),0) yellow_numbers
                 , 0 held_numbers
                 , 0 finhold_numbers
                 , 0 active_numbers
                 , 0 held_count
                 , 0 finhold_count
                 , 0 active_count
          from     (select   *
from     wrf_release
order by regexp_replace(release_version, '[^0-9]+', '') 
       , release_version desc) a
                   left outer join
                   (select  release_version
                          , work_authorized
                          , (case when project_status = 'Green' then 1 else 0 end) green_count
                          , (case when project_status = 'Red' then 1 else 0 end) red_count
                          , (case when project_status = 'Yellow' then 1 else 0 end) yellow_count
                          , (case when project_status = 'Green' then to_number(Last_ADB) else 0 end) green_number
                          , (case when project_status = 'Red' then to_number(Last_ADB) else 0 end) red_number
                          , (case when project_status = 'Yellow' then to_number(Last_ADB) else 0 end) yellow_number
                    from    WRF
                    where   release_version not in ('TBD','No CSS Version')
                    and     req_id not like 'CR%'
                    and     ( Leading_Func_Area = {leadFuncArea} or {leadFuncArea} = 'All' )
                    and     ( main_application  = {mainAppl} or {mainAppl} = 'All' )
                    and     ( Program  = {program} or {program} = 'All' )
                    and     upper(trim(req_id)) like {reqId}
                    and     ( upper(trim(amdocs_owner)) like {employeeName}
                           or upper(trim(att_owner)) like {employeeName}
                           or upper(trim(assigned_to)) like {employeeName}
                           or upper(trim(ba_owner)) like {employeeName} 
						   or upper(trim(amdocs_sme_ba)) like {employeeName} )
                   ) b
                     on a.release_version  = upper(trim(b.release_version))
          --where    (pre_wa_count != 0 and wa_count != 0 and na_count != 0)
          group by a.release_version
          order by substr(a.release_version,-3,3), length(a.release_version)
         )
union all
select * from
(select  ' ' chart_mode
	   , general_status
       , 0 pre_full_wa_numbers
       , 0 pre_part_wa_numbers
       , 0 wa_numbers
       , 0 na_numbers
       , 0 pre_full_wa_count
       , 0 pre_part_wa_count
       , 0 wa_count
       , 0 na_count
       , 0 green_count
       , 0 red_count
       , 0 yellow_count
       , 0 green_numbers
       , 0 red_numbers
       , 0 yellow_numbers
       , sum(held_numbers)
       , sum(finhold_numbers)
       , sum(active_numbers)
       , sum(held_count)
       , sum(finhold_count)
       , sum(active_count)
from     (select (case when g.general_status = 'Active' then 'TBD'
                       when g.general_status = 'Financial Hold' then 'Fin Hold'
                       else g.general_status
                  end) general_status 
               , (case when w.general_status = 'Held'  then to_number(Last_ADB) else 0 end) held_numbers
               , (case when w.general_status = 'Financial Hold'  then to_number(Last_ADB) else 0 end) finhold_numbers
               , (case when w.general_status = 'Active'  then to_number(Last_ADB) else 0 end) active_numbers
               , (case when w.general_status = 'Held' then 1 else 0 end) held_count
               , (case when w.general_status = 'Financial Hold' then 1 else 0 end) finhold_count
               , (case when w.general_status = 'Active' then 1 else 0 end) active_count
          from   (select 'Held' general_status from dual
                  union all
                  select 'Financial Hold' general_status from dual
                  union all
                  select 'Active' general_status from dual) g
                 left outer join WRF w
                   on g.general_status = w.general_status
          where  release_version in ('TBD','No CSS Version')
          and    req_id not like 'CR%'
          and    w.general_status in ('Active','Held','Financial Hold')
          and    ( Leading_Func_Area = {leadFuncArea} or {leadFuncArea} = 'All' )
          and    ( main_application  = {mainAppl} or {mainAppl} = 'All' ) 
          and    ( Program  = {program} or {program} = 'All' )
          and    upper(trim(req_id)) like {reqId}
          and    ( upper(trim(amdocs_owner)) like {employeeName}
                or upper(trim(att_owner)) like {employeeName}
                or upper(trim(assigned_to)) like {employeeName}
                or upper(trim(ba_owner)) like {employeeName} 
						   or upper(trim(amdocs_sme_ba)) like {employeeName} )
         ) t
group by general_status
order by general_status)
]]>
</statement>

<statement code="WRF_Chart_Query_ByProgram">
<![CDATA[
select   * 
from     (select    trim(substr(a.program,0,16)) program , 'wa' chart_mode
                 , nvl(sum(b.pre_full_wa_numbers),0) pre_full_wa_numbers
                 , nvl(sum(b.pre_part_wa_numbers),0) pre_part_wa_numbers
                 , nvl(sum(b.wa_numbers),0) wa_numbers
                 , nvl(sum(b.na_numbers),0) na_numbers
                 , nvl(sum(b.pre_full_wa_count),0) pre_full_wa_count
                 , nvl(sum(b.pre_part_wa_count),0) pre_part_wa_count
                 , nvl(sum(b.wa_count),0) wa_count
                 , nvl(sum(b.na_count),0) na_count
                 , 0 green_count
                 , 0 red_count
                 , 0 yellow_count
                 , 0 green_numbers
                 , 0 red_numbers
                 , 0 yellow_numbers
                 --, nvl(sum(case when b.release_version is not null then b.na_count else 0 end),0) na_count
                 , 0 held_numbers
                 , 0 finhold_numbers
                 , 0 active_numbers
                 , 0 held_count
                 , 0 finhold_count
                 , 0 active_count
          from   (select distinct program from wrf where program is not null) a
                   left outer join 
                   (select  program                          
                          , work_authorized
                          , case when work_authorized = 'P' and to_number(Last_ADB) = to_number(work_auth_amt) then to_number(Last_ADB) else 0 end pre_full_wa_numbers
                          , case when work_authorized = 'P' and to_number(Last_ADB) > to_number(work_auth_amt) then to_number(Last_ADB) else 0 end pre_part_wa_numbers
                          , case when work_authorized = 'Y' or work_authorized = 'N/A' then to_number(Last_ADB) else 0 end  wa_numbers
                          , case when nvl(work_authorized,'N') = 'N' then to_number(Last_ADB) else 0 end na_numbers
                          , case when work_authorized = 'P' and to_number(Last_ADB) = to_number(work_auth_amt) then 1 else 0 end pre_full_wa_count
                          , case when work_authorized = 'P' and to_number(Last_ADB) > to_number(work_auth_amt) then 1 else 0 end pre_part_wa_count
                          , case when work_authorized = 'Y' or work_authorized = 'N/A' then 1 else 0 end wa_count
                          , case when nvl(work_authorized,'N') = 'N' then 1 else 0 end na_count
                          , (case when project_status = 'Green' then 1 else 0 end) green_count
                          , (case when project_status = 'Red' then 1 else 0 end) red_count
                          , (case when project_status = 'Yellow' then 1 else 0 end) yellow_count
                          , (case when project_status = 'Green' then to_number(Last_ADB) else 0 end) green_number
                          , (case when project_status = 'Red' then to_number(Last_ADB) else 0 end) red_number
                          , (case when project_status = 'Yellow' then to_number(Last_ADB) else 0 end) yellow_number
                    from    WRF
                    where   /*release_version not in ('TBD','No CSS Version')
                    and     upper(release_version) in (select   *
from     wrf_release
order by regexp_replace(release_version, '[^0-9]+', '') 
       , release_version desc)
                    and*/     req_id not like 'CR%'
                    and     planned_imp_date between (select add_months(max(planned_imp_date),-13) from wrf) 
							   and (select max(planned_imp_date) from wrf)
                    and     program is not null
                    and     ( Leading_Func_Area = {leadFuncArea} or {leadFuncArea} = 'All' )
                    and     ( main_application  = {mainAppl} or {mainAppl} = 'All' )
                    and     ( Program  = {program} or {program} = 'All' )
                    and     upper(trim(req_id)) like {reqId}
                    and     ( upper(trim(amdocs_owner)) like {employeeName}
                           or upper(trim(att_owner)) like {employeeName}
                           or upper(trim(assigned_to)) like {employeeName}
                           or upper(trim(ba_owner)) like {employeeName} 
						   or upper(trim(amdocs_sme_ba)) like {employeeName} )
                   ) b                     
          		on a.program  = b.program                   
          group by a.program  
          order by a.program 
         ) 
union all
select   * 
from     (select    trim(substr(a.program,0,16)) program , 'proj_status' chart_mode
                 , 0 pre_full_wa_numbers
                 , 0 pre_part_wa_numbers
                 , 0 wa_numbers
                 , 0 na_numbers
                 , 0 pre_full_wa_count
                 , 0 pre_part_wa_count
                 , 0 wa_count
                 , 0 na_count
                 , nvl(sum(b.green_count),0) green_count
                 , nvl(sum(b.red_count),0) red_count
                 , nvl(sum(b.yellow_count),0) yellow_count
                 , nvl(sum(b.green_number),0) green_numbers
                 , nvl(sum(b.red_number),0) red_numbers
                 , nvl(sum(b.yellow_number),0) yellow_numbers
                 --, nvl(sum(case when b.release_version is not null then b.na_count else 0 end),0) na_count
                 , 0 held_numbers
                 , 0 finhold_numbers
                 , 0 active_numbers
                 , 0 held_count
                 , 0 finhold_count
                 , 0 active_count
          from   (select distinct program from wrf where program is not null) a
                   left outer join 
                   (select  program                          
                          , work_authorized
                          , case when work_authorized = 'P' then to_number(Last_ADB) else 0 end pre_wa_numbers
                          , case when work_authorized = 'Y' or work_authorized = 'N/A' then to_number(Last_ADB) else 0 end  wa_numbers
                          , case when nvl(work_authorized,'N') = 'N' then to_number(Last_ADB) else 0 end na_numbers
                          , case when work_authorized = 'P' then 1 else 0 end pre_wa_count
                          , case when work_authorized = 'Y' or work_authorized = 'N/A' then 1 else 0 end wa_count
                          , case when nvl(work_authorized,'N') = 'N' then 1 else 0 end na_count
                          , (case when project_status = 'Green' then 1 else 0 end) green_count
                          , (case when project_status = 'Red' then 1 else 0 end) red_count
                          , (case when project_status = 'Yellow' then 1 else 0 end) yellow_count
                          , (case when project_status = 'Green' then to_number(Last_ADB) else 0 end) green_number
                          , (case when project_status = 'Red' then to_number(Last_ADB) else 0 end) red_number
                          , (case when project_status = 'Yellow' then to_number(Last_ADB) else 0 end) yellow_number
                    from    WRF
                    where   /*release_version not in ('TBD','No CSS Version')
                    and     upper(release_version) in (select distinct upper(a.release_version) from release_schedule a
							, (select distinct release_version from release_schedule where trim(milestone_code) = 'M9'  
							and release_date = (select min(release_date) from release_schedule where release_date > sysdate and trim(milestone_code) = 'M9' ) ) b
							 where substr(a.release_version,-3,3) between substr(b.release_version,-3,3) - 30 and substr(b.release_version,-3,3) +50)
                    and*/     req_id not like 'CR%'
                    and     planned_imp_date between (select add_months(max(planned_imp_date),-13) from wrf) 
							   and (select max(planned_imp_date) from wrf)
                    and     program is not null
                    and     ( Leading_Func_Area = {leadFuncArea} or {leadFuncArea} = 'All' )
                    and     ( main_application  = {mainAppl} or {mainAppl} = 'All' )
                    and     ( Program  = {program} or {program} = 'All' )
                    and     upper(trim(req_id)) like {reqId}
                    and     ( upper(trim(amdocs_owner)) like {employeeName}
                           or upper(trim(att_owner)) like {employeeName}
                           or upper(trim(assigned_to)) like {employeeName}
                           or upper(trim(ba_owner)) like {employeeName} 
						   or upper(trim(amdocs_sme_ba)) like {employeeName} )
                   ) b                     
          		on a.program  = b.program                   
          group by a.program  
          order by a.program 
         )                  
]]>
</statement>

<statement code="WRF_Chart_Query_ByMonth">
<![CDATA[
select   * 
from     (select   a.planned_imp_date month, 'wa' chart_mode
                 , nvl(sum(b.pre_full_wa_numbers),0) pre_full_wa_numbers
                 , nvl(sum(b.pre_part_wa_numbers),0) pre_part_wa_numbers
                 , nvl(sum(b.wa_numbers),0) wa_numbers
                 , nvl(sum(b.na_numbers),0) na_numbers
                 , nvl(sum(b.pre_full_wa_count),0) pre_full_wa_count
                 , nvl(sum(b.pre_part_wa_count),0) pre_part_wa_count
                 , nvl(sum(b.wa_count),0) wa_count
                 , nvl(sum(b.na_count),0) na_count
                 , 0 green_count
                 , 0 red_count
                 , 0 yellow_count
                 , 0 green_numbers
                 , 0 red_numbers
                 , 0 yellow_numbers
                 , 0 held_numbers
                 , 0 finhold_numbers
                 , 0 active_numbers
                 , 0 held_count
                 , 0 finhold_count
                 , 0 active_count
          from    (
					SELECT     TO_CHAR (ADD_MONTHS (min_planned_imp_date, LEVEL - 1),
					                    'MM/YYYY'
					                   ) planned_imp_date
					      FROM (SELECT MAX (planned_imp_date) max_planned_imp_date,
					                   ADD_MONTHS (MAX (planned_imp_date),
					                               -12
					                              ) min_planned_imp_date
					              FROM wrf)
					CONNECT BY LEVEL <=
					              (MONTHS_BETWEEN (max_planned_imp_date, min_planned_imp_date) + 1
					              )                              
                    )  a
                    left outer join
                   (select  work_authorized
                          , to_char(planned_imp_date,'MM/YYYY')  planned_imp_date
                          , case when work_authorized = 'P' and to_number(Last_ADB) = to_number(work_auth_amt) then to_number(Last_ADB) else 0 end pre_full_wa_numbers
                          , case when work_authorized = 'P' and to_number(Last_ADB) > to_number(work_auth_amt) then to_number(Last_ADB) else 0 end pre_part_wa_numbers
                          , case when work_authorized = 'Y' or work_authorized = 'N/A' then to_number(Last_ADB) else 0 end  wa_numbers
                          , case when nvl(work_authorized,'N') = 'N' then to_number(Last_ADB) else 0 end na_numbers
                          , case when work_authorized = 'P' and to_number(Last_ADB) = to_number(work_auth_amt) then 1 else 0 end pre_full_wa_count
                          , case when work_authorized = 'P' and to_number(Last_ADB) > to_number(work_auth_amt) then 1 else 0 end pre_part_wa_count
                          , case when work_authorized = 'Y' or work_authorized = 'N/A' then 1 else 0 end wa_count
                          , case when nvl(work_authorized,'N') = 'N' then 1 else 0 end na_count
                    from    WRF
                    where   /*release_version not in ('TBD','No CSS Version')
                    and     upper(release_version) in (select distinct upper(a.release_version) from release_schedule a
							, (select distinct release_version from release_schedule where trim(milestone_code) = 'M9'  
							and release_date = (select min(release_date) from release_schedule where release_date > sysdate and trim(milestone_code) = 'M9' ) ) b
							 where substr(a.release_version,-3,3) between substr(b.release_version,-3,3) - 30 and substr(b.release_version,-3,3) +50)
                    and     */ req_id not like 'CR%'
                    and     planned_imp_date is not null
                    and     ( Leading_Func_Area = {leadFuncArea} or {leadFuncArea} = 'All' )
                    and     ( main_application  = {mainAppl} or {mainAppl} = 'All' )
                    and     ( Program  = {program} or {program} = 'All' )
                    and     upper(trim(req_id)) like {reqId}
                    and     ( upper(trim(amdocs_owner)) like {employeeName}
                           or upper(trim(att_owner)) like {employeeName}
                           or upper(trim(assigned_to)) like {employeeName}
                           or upper(trim(ba_owner)) like {employeeName} 
						   or upper(trim(amdocs_sme_ba)) like {employeeName} )
                   ) b 
                   on a.planned_imp_date = b.planned_imp_date                    
          group by a.planned_imp_date  
          order by substr(a.planned_imp_date ,4,4) ,substr(a.planned_imp_date ,1,2) 
         )
union all
select   * 
from     (select   a.planned_imp_date month , 'proj_status' chart_mode
                 , 0 pre_full_wa_numbers
                 , 0 pre_part_wa_numbers
                 , 0 wa_numbers
                 , 0 na_numbers
                 , 0 pre_full_wa_count
                 , 0 pre_part_wa_count
                 , 0 wa_count
                 , 0 na_count
                 , nvl(sum(b.green_count),0) green_count
                 , nvl(sum(b.red_count),0) red_count
                 , nvl(sum(b.yellow_count),0) yellow_count
                 , nvl(sum(b.green_number),0) green_numbers
                 , nvl(sum(b.red_number),0) red_numbers
                 , nvl(sum(b.yellow_number),0) yellow_numbers
                 --, nvl(sum(case when b.release_version is not null then b.na_count else 0 end),0) na_count
                 , 0 held_numbers
                 , 0 finhold_numbers
                 , 0 active_numbers
                 , 0 held_count
                 , 0 finhold_count
                 , 0 active_count
          from    (
					SELECT     TO_CHAR (ADD_MONTHS (min_planned_imp_date, LEVEL - 1),
					                    'MM/YYYY'
					                   ) planned_imp_date
					      FROM (SELECT MAX (planned_imp_date) max_planned_imp_date,
					                   ADD_MONTHS (MAX (planned_imp_date),
					                               -12
					                              ) min_planned_imp_date
					              FROM wrf)
					CONNECT BY LEVEL <=
					              (MONTHS_BETWEEN (max_planned_imp_date, min_planned_imp_date) + 1
					              )                              
                    )  a
                    left outer join
                   (select  work_authorized
                          , to_char(planned_imp_date,'MM/YYYY')  planned_imp_date
                          , case when work_authorized = 'P' then to_number(Last_ADB) else 0 end pre_wa_numbers
                          , case when work_authorized = 'Y' or work_authorized = 'N/A' then to_number(Last_ADB) else 0 end  wa_numbers
                          , case when nvl(work_authorized,'N') = 'N' then to_number(Last_ADB) else 0 end na_numbers
                          , case when work_authorized = 'P' then 1 else 0 end pre_wa_count
                          , case when work_authorized = 'Y' or work_authorized = 'N/A' then 1 else 0 end wa_count
                          , case when nvl(work_authorized,'N') = 'N' then 1 else 0 end na_count
                          , (case when project_status = 'Green' then 1 else 0 end) green_count
                          , (case when project_status = 'Red' then 1 else 0 end) red_count
                          , (case when project_status = 'Yellow' then 1 else 0 end) yellow_count
                          , (case when project_status = 'Green' then to_number(Last_ADB) else 0 end) green_number
                          , (case when project_status = 'Red' then to_number(Last_ADB) else 0 end) red_number
                          , (case when project_status = 'Yellow' then to_number(Last_ADB) else 0 end) yellow_number
                    from    WRF
                    where   /*release_version not in ('TBD','No CSS Version')
                    and     upper(release_version) in (select distinct upper(a.release_version) from release_schedule a
							, (select distinct release_version from release_schedule where trim(milestone_code) = 'M9'  
							and release_date = (select min(release_date) from release_schedule where release_date > sysdate and trim(milestone_code) = 'M9' ) ) b
							 where substr(a.release_version,-3,3) between substr(b.release_version,-3,3) - 30 and substr(b.release_version,-3,3) +50)
                    and     */req_id not like 'CR%'
                    and     planned_imp_date is not null
                    and     ( Leading_Func_Area = {leadFuncArea} or {leadFuncArea} = 'All' )
                    and     ( main_application  = {mainAppl} or {mainAppl} = 'All' )
                    and     ( Program  = {program} or {program} = 'All' )
                    and     upper(trim(req_id)) like {reqId}
                    and     ( upper(trim(amdocs_owner)) like {employeeName}
                           or upper(trim(att_owner)) like {employeeName}
                           or upper(trim(assigned_to)) like {employeeName}
                           or upper(trim(ba_owner)) like {employeeName} 
						   or upper(trim(amdocs_sme_ba)) like {employeeName} )
                   ) b 
                   on a.planned_imp_date = b.planned_imp_date                    
          group by a.planned_imp_date  
          order by substr(a.planned_imp_date ,4,4) ,substr(a.planned_imp_date ,1,2) 
         )                  
]]>
</statement>



<statement code="WRF_Chart_Combined_Query">
<![CDATA[
select   * 
from     (select 'wa' chart_mode,'V'||version release_version
				 , pre_part_wa_numbers
                 , pre_full_wa_numbers
                 , wa_numbers
                 , na_numbers
                 , pre_part_wa_count
                 , pre_full_wa_count
                 , wa_count
                 , na_count
                 , 0 green_count
                 , 0 red_count
                 , 0 yellow_count
                 , 0 green_numbers
                 , 0 red_numbers
                 , 0 yellow_numbers
                 , 0 held_numbers
                 , 0 finhold_numbers
                 , 0 active_numbers
                 , 0 held_count
                 , 0 finhold_count
                 , 0 active_count
                 from
									(select   a.version
									       , nvl(sum(pre_part_wa_numbers),0) pre_part_wa_numbers
									       , nvl(sum(pre_full_wa_numbers),0) pre_full_wa_numbers
									       , nvl(sum(wa_numbers),0) wa_numbers
									       , nvl(sum(na_numbers),0) na_numbers
									       , nvl(sum(pre_part_wa_count),0) pre_part_wa_count
									       , nvl(sum(pre_full_wa_count),0) pre_full_wa_count
									       , nvl(sum(wa_count),0) wa_count
									       , nvl(sum(na_count),0) na_count
									from     (select  release_version,  substr(release_version,-3,3) version
from     wrf_release
order by regexp_replace(release_version, '[^0-9]+', '') 
       , release_version desc) a
									         left outer join
									         (select  release_version
									                         , substr(release_version,-3,3) version
									                , work_authorized
									                , case when work_authorized = 'P' and to_number(work_auth_amt) < to_number(Last_ADB) then to_number(Last_ADB) else 0 end pre_part_wa_numbers
                          							, case when work_authorized = 'P' and to_number(work_auth_amt)= to_number(Last_ADB) then to_number(Last_ADB) else 0 end pre_full_wa_numbers
									                , case when work_authorized = 'Y' or work_authorized = 'N/A' then to_number(Last_ADB) else 0 end  wa_numbers
									                , case when nvl(work_authorized,'N') = 'N' then to_number(Last_ADB) else 0 end na_numbers
									                , case when work_authorized = 'P' and to_number(work_auth_amt)< to_number(Last_ADB) then 1 else 0 end pre_part_wa_count
                          							, case when work_authorized = 'P' and to_number(work_auth_amt)= to_number(Last_ADB) then 1 else 0 end pre_full_wa_count
									                , case when work_authorized = 'Y' or work_authorized = 'N/A' then 1 else 0 end wa_count
									                , case when nvl(work_authorized,'N') = 'N' then 1 else 0 end na_count									                
									          from    WRF
									          where   release_version not in ('TBD','No CSS Version')
									          and     req_id not like 'CR%'
											  and    ( Leading_Func_Area = {leadFuncArea} or {leadFuncArea} = 'All' )
									          and    ( main_application  = {mainAppl} or {mainAppl} = 'All' ) 
									          and    ( Program  = {program} or {program} = 'All' )
									          and    ( upper(trim(req_id)) like {reqId} or upper(trim(description)) like {reqId})
									          and    ( upper(trim(amdocs_owner)) like {employeeName}
									                or upper(trim(att_owner)) like {employeeName}
									                or upper(trim(assigned_to)) like {employeeName}
									                or upper(trim(ba_owner)) like {employeeName} 
						   							or upper(trim(amdocs_sme_ba)) like {employeeName} )
									         ) b
									           on upper(trim(a.release_version))  = upper(trim(b.release_version))
									--where    (pre_wa_numbers!=0 or wa_numbers!=0 or na_numbers!=0)
									group by a.version
									order by a.version
))
union all
select   * 
from     (select 'proj_status' chart_mode,'V'||version release_version
				 , 0 pre_part_wa_numbers
                 , 0 pre_full_wa_numbers
                 , 0 wa_numbers
                 , 0 na_numbers
                 , 0 pre_part_wa_count
                 , 0 pre_full_wa_count
                 , 0 wa_count
                 , 0 na_count
                 , green_count
                 , red_count
                 , yellow_count
                 , green_numbers
                 , red_numbers
                 , yellow_numbers
                 , 0 held_numbers
                 , 0 finhold_numbers
                 , 0 active_numbers
                 , 0 held_count
                 , 0 finhold_count
                 , 0 active_count
                 from
									(select   a.version
									       , nvl(sum(pre_part_wa_numbers),0) pre_part_wa_numbers
									       , nvl(sum(pre_full_wa_numbers),0) pre_full_wa_numbers
									       , nvl(sum(wa_numbers),0) wa_numbers
									       , nvl(sum(na_numbers),0) na_numbers
									       , nvl(sum(pre_part_wa_count),0) pre_part_wa_count
									       , nvl(sum(pre_full_wa_count),0) pre_full_wa_count
									       , nvl(sum(wa_count),0) wa_count
									       , nvl(sum(na_count),0) na_count
									       , nvl(sum(b.green_count),0) green_count
                                           , nvl(sum(b.red_count),0) red_count
                                           , nvl(sum(b.yellow_count),0) yellow_count
                                           , nvl(sum(b.green_number),0) green_numbers
                                           , nvl(sum(b.red_number),0) red_numbers
                                           , nvl(sum(b.yellow_number),0) yellow_numbers
									from     (select  release_version,  substr(release_version,-3,3) version
from     wrf_release
order by regexp_replace(release_version, '[^0-9]+', '') 
       , release_version desc) a
									         left outer join
									         (select  release_version
									                         , substr(release_version,-3,3) version
									                , work_authorized
									                , case when work_authorized = 'P' and to_number(work_auth_amt)!= to_number(Last_ADB) then to_number(Last_ADB) else 0 end pre_part_wa_numbers
                          							, case when work_authorized = 'P' and to_number(work_auth_amt)= to_number(Last_ADB) then to_number(Last_ADB) else 0 end pre_full_wa_numbers
									                , case when work_authorized = 'Y' or work_authorized = 'N/A' then to_number(Last_ADB) else 0 end  wa_numbers
									                , case when nvl(work_authorized,'N') = 'N' then to_number(Last_ADB) else 0 end na_numbers
									                , case when work_authorized = 'P' and to_number(work_auth_amt)!= to_number(Last_ADB) then 1 else 0 end pre_part_wa_count
                          							, case when work_authorized = 'P' and to_number(work_auth_amt)= to_number(Last_ADB) then 1 else 0 end pre_full_wa_count
									                , case when work_authorized = 'Y' or work_authorized = 'N/A' then 1 else 0 end wa_count
									                , case when nvl(work_authorized,'N') = 'N' then 1 else 0 end na_count
									                , (case when project_status = 'Green' then 1 else 0 end) green_count
                                                    , (case when project_status = 'Red' then 1 else 0 end) red_count
                                                    , (case when project_status = 'Yellow' then 1 else 0 end) yellow_count
                                                    , (case when project_status = 'Green' then to_number(Last_ADB) else 0 end) green_number
                                                    , (case when project_status = 'Red' then to_number(Last_ADB) else 0 end) red_number
                                                    , (case when project_status = 'Yellow' then to_number(Last_ADB) else 0 end) yellow_number
									          from    WRF
									          where   release_version not in ('TBD','No CSS Version')
									          and     req_id not like 'CR%'
											  and    ( Leading_Func_Area = {leadFuncArea} or {leadFuncArea} = 'All' )
									          and    ( main_application  = {mainAppl} or {mainAppl} = 'All' ) 
									          and    ( Program  = {program} or {program} = 'All' )
									          and    ( upper(trim(req_id)) like {reqId} or upper(trim(description)) like {reqId})
									          and    ( upper(trim(amdocs_owner)) like {employeeName}
									                or upper(trim(att_owner)) like {employeeName}
									                or upper(trim(assigned_to)) like {employeeName}
									                or upper(trim(ba_owner)) like {employeeName} 
						   							or upper(trim(amdocs_sme_ba)) like {employeeName} )
									         ) b
									           on upper(trim(a.release_version))  = upper(trim(b.release_version))
									--where    (pre_wa_numbers!=0 or wa_numbers!=0 or na_numbers!=0)
									group by a.version
									order by a.version
))
union all
select * from
(select   ' ' chart_mode,general_status
       , 0 pre_part_wa_numbers
       , 0 pre_full_wa_numbers
       , 0 wa_numbers
       , 0 na_numbers
       , 0 pre_part_wa_count
       , 0 pre_full_wa_count
       , 0 wa_count
       , 0 na_count
       , 0 green_count
       , 0 red_count
       , 0 yellow_count
       , 0 green_numbers
       , 0 red_numbers
       , 0 yellow_numbers
       , sum(held_numbers)
       , sum(finhold_numbers)
       , sum(active_numbers)
       , sum(held_count)
       , sum(finhold_count)
       , sum(active_count)
from     (select (case when g.general_status = 'Active' then 'TBD'
                       when g.general_status = 'Financial Hold' then 'Fin Hold'
                       else g.general_status
                  end) general_status
			         , (case when w.general_status = 'Held'  then to_number(Last_ADB) else 0 end) held_numbers
               , (case when w.general_status = 'Financial Hold'  then to_number(Last_ADB) else 0 end) finhold_numbers
               , (case when w.general_status = 'Active'  then to_number(Last_ADB) else 0 end) active_numbers
               , (case when w.general_status = 'Held' then 1 else 0 end) held_count
               , (case when w.general_status = 'Financial Hold' then 1 else 0 end) finhold_count
               , (case when w.general_status = 'Active' then 1 else 0 end) active_count
          from   (select 'Held' general_status from dual
                  union all
                  select 'Financial Hold' general_status from dual
                  union all
                  select 'Active' general_status from dual) g
                 left outer join WRF w
                   on g.general_status = w.general_status
          where  release_version in ('TBD','No CSS Version')
          and    req_id not like 'CR%'
          and    w.general_status in ('Active','Held','Financial Hold')
          and    ( Leading_Func_Area = {leadFuncArea} or {leadFuncArea} = 'All' )
          and    ( main_application  = {mainAppl} or {mainAppl} = 'All' ) 
          and    ( Program  = {program} or {program} = 'All' )
          and    ( upper(trim(req_id)) like {reqId} or upper(trim(description)) like {reqId})
          and    ( upper(trim(amdocs_owner)) like {employeeName}
                or upper(trim(att_owner)) like {employeeName}
                or upper(trim(assigned_to)) like {employeeName}
                or upper(trim(ba_owner)) like {employeeName} 
				or upper(trim(amdocs_sme_ba)) like {employeeName} )
         ) t
group by general_status
order by general_status)
]]>
</statement>

<statement code="WRF_Grid_Query">
<![CDATA[
select * from (select 
   grid.release_version ,                            
   grid.req_id,
   c.description,
   grid.amdocs_owner,
   grid.assigned_to,
  to_number(grid.Last_ADB_Est) Last_ADB_Est,
  to_number(grid.work_auth_amt) work_auth_amt,
  grid.General_Status,
  grid.Status,
  grid.Project_Status,
  to_date(grid.Approved_Date_To_UAT,'YYYY-MM-DD') m8,
  grid.main_application,
  grid.Leading_Func_Area,
  grid.att_Owner,
  grid.Affected_Func_Areas,
  grid.BA_Owner,
  to_date(grid.Date_Scheduled,'YYYY-MM-DD') m5,
  grid.Detected_on_Date m1,
  grid.Amdocs_Pending_Item,
  to_date(grid.DE_Submit_Date,'YYYY-MM-DD') m4,
  grid.Lifecycle_Phase,
  to_date(grid.USR_Deploy_Date,'YYYY-MM-DD') m9, 
  to_date(grid.Work_Auth_Date,'YYYY-MM-DD') Work_Auth_Date,
  grid.Work_Authorized,
  grid.Program,
  to_date(grid.DRD_Approval_Date,'YYYY-MM-DD') m3,
  grid.atti ,
  grid.amdocs_sme_ba,
  to_date(to_char(grid.planned_imp_date,'mm/dd/yyyy'),'mm/dd/yyyy') planned_imp_date,
  grid.cc_impact,
  to_date(to_char(to_date(grid.proj_track_date, 'yyyy-mm-dd'),'mm/dd/yyyy'),'mm/dd/yyyy') proj_track_date,
  grid.m1milestone,
  grid.m2milestone,
  grid.m3milestone,
  grid.m4milestone,
  grid.m5milestone,
  grid.m6milestone,
  grid.m7milestone,
  grid.m8milestone,
  grid.m9milestone,
  grid.m10milestone,
  grid.m11milestone,
  grid.dg1milestone,
  grid.dg2milestone,
  grid.dg3milestone,
  grid.dg4milestone
  from 
(select 
    release_version,                            
   req_id,
    main_application,
    Leading_Func_Area,
   max(amdocs_owner) amdocs_owner,
   max(assigned_to) assigned_to,
  max(Last_ADB_Est) Last_ADB_Est,
  max(work_auth_amt) work_auth_amt,
  max(General_Status) General_Status,
  max(Status) Status,
  max(Project_Status) Project_Status,
  max(Approved_Date_To_UAT) Approved_Date_To_UAT,
  max(att_Owner) att_Owner,
  max(Affected_Func_Areas) Affected_Func_Areas,
  max(BA_Owner) BA_Owner,
  max(Date_Scheduled) Date_Scheduled,
  max(Detected_on_Date) Detected_on_Date,
  max(Amdocs_Pending_Item) Amdocs_Pending_Item,
  max(DE_Submit_Date) DE_Submit_Date,
  max(Lifecycle_Phase) Lifecycle_Phase,
  max(USR_Deploy_Date) USR_Deploy_Date, 
  max(Work_Auth_Date) Work_Auth_Date,
  max(Work_Authorized) Work_Authorized,
  max(Program) Program,
  max(DRD_Approval_Date) DRD_Approval_Date,
  max(atti ) atti,
  max(amdocs_sme_ba) amdocs_sme_ba,
  max(planned_imp_date) planned_imp_date,
  max(cc_impact) cc_impact,
  max(proj_track_date)  proj_track_date,
max(m1milestone) m1milestone,
max(m2milestone) m2milestone,
max(m3milestone) m3milestone,
max(m4milestone) m4milestone,
max(m5milestone) m5milestone,
max(m6milestone) m6milestone,
max(m7milestone) m7milestone,
max(m8milestone) m8milestone,
max(m9milestone) m9milestone,
max(m10milestone) m10milestone,
max(m11milestone) m11milestone,
max(dg1milestone) dg1milestone,
max(dg2milestone) dg2milestone,
max(dg3milestone) dg3milestone,
max(dg4milestone) dg4milestone
from
(
select 
         release_version,                            
   req_id,
   description,
   amdocs_owner,
   assigned_to,
  Last_ADB_Est,
  work_auth_amt,
   General_Status,
  Status,
  Project_Status,
  Approved_Date_To_UAT ,
main_application,
  Leading_Func_Area,
  att_Owner,
  Affected_Func_Areas,
  BA_Owner,
  Date_Scheduled,
  Detected_on_Date,
  Amdocs_Pending_Item,
  DE_Submit_Date,
  Lifecycle_Phase,
  USR_Deploy_Date, 
  Work_Auth_Date,
  Work_Authorized,
  Program,
  DRD_Approval_Date,
  atti ,
  amdocs_sme_ba,
  planned_imp_date,
  cc_impact,
  proj_track_date,
case when trim(milestone_code) = 'M1' then release_date else null end  m1milestone,
case when trim(milestone_code) = 'M2' then release_date else null end  m2milestone,
case when trim(milestone_code) = 'M3' then release_date else null end  m3milestone,
case when trim(milestone_code) = 'M4' then release_date else null end  m4milestone,
case when trim(milestone_code) = 'M5' then release_date else null end  m5milestone,
case when trim(milestone_code) = 'M6' then release_date else null end  m6milestone,
case when trim(milestone_code) = 'M7' then release_date else null end  m7milestone,
case when trim(milestone_code) = 'M8' then release_date else null end  m8milestone,
case when trim(milestone_code) = 'M9' then release_date else null end  m9milestone,
case when trim(milestone_code) = 'M10' then release_date else null  end m10milestone,
case when trim(milestone_code) = 'M11' then release_date else null end m11milestone,
case when trim(milestone_code) = 'DG1' then release_date else null end dg1milestone,
case when trim(milestone_code) = 'DG2' then release_date else null end dg2milestone,
case when trim(milestone_code) = 'DG3' then release_date else null end dg3milestone,
case when trim(milestone_code) = 'DG4' then release_date else null end dg4milestone
from
(
select  a.release_version,                            
   req_id,
   description,
   amdocs_owner,
   assigned_to,
  Last_ADB Last_ADB_Est,
  work_auth_amt work_auth_amt,
   General_Status,
  Status,
  Project_Status,
  Approved_Date_To_UAT ,
  main_application main_application,
  Leading_Func_Area,
  att_Owner,
  Affected_Func_Areas,
  BA_Owner,
  Date_Scheduled,
  Detected_on_Date,
  Amdocs_Pending_Item,
  DE_Submit_Date,
  Lifecycle_Phase,
  USR_Deploy_Date, 
  Work_Auth_Date,
  Work_Authorized,
  Program,
  DRD_Approval_Date,
  atti
, milestone_code
, release_date
, amdocs_sme_ba
, planned_imp_date
, cc_impact
, proj_track_date
from WRF a , release_schedule b
where upper(trim(a.release_version)) = upper(trim(b.release_version))
and (Leading_Func_Area = {leadFuncArea} or {leadFuncArea} = 'All')
and (  main_application  = {mainAppl} or {mainAppl} = 'All') 
and  ( Program  = {program} or {program} = 'All')
and a.release_version not in ('TBD','No CSS Version')
and upper(trim(a.release_version)) in (select  release_version 
from     wrf_release)
)
)
group by release_version,
req_id,
leading_func_area,
main_application
) grid , WRF c
where                        
grid.req_id = c.req_id(+) and
grid.req_id not like 'CR%'
and (upper(trim(grid.req_id)) like {reqId} or upper(trim(description)) like {reqId})
and ( upper(trim(grid.amdocs_owner)) like {employeeName}
or upper(trim(grid.att_owner)) like {employeeName}
or upper(trim(grid.assigned_to)) like {employeeName}
or upper(trim(grid.ba_owner)) like {employeeName}
or upper(trim(grid.amdocs_sme_ba)) like {employeeName} )
order by
substr(grid.release_version,-3,3), length(grid.release_version),                            
grid.req_id,
grid.Last_ADB_Est,
grid.m1milestone,
grid.m3milestone,
grid.m4milestone,
grid.m5milestone,
grid.m8milestone,
grid.m9milestone)
union all
select 
   (case when  general_status = 'Active' then 'TBD'
               when  general_status = 'Financial Hold' then 'Fin Hold'
               else general_status
               end) release_version ,                            
   req_id,
   description,
   amdocs_owner,
   assigned_to,
  to_number( Last_ADB) Last_ADB_Est,
   to_number(work_auth_amt) work_auth_amt,
  General_Status,
  Status,
  Project_Status,
  to_date(Approved_Date_To_UAT,'YYYY-MM-DD') m8,
  main_application main_application,
  Leading_Func_Area,
  att_Owner,
  Affected_Func_Areas,
  BA_Owner,
  to_date(Date_Scheduled,'YYYY-MM-DD') m5,
  Detected_on_Date m1,
  Amdocs_Pending_Item,
  to_date(DE_Submit_Date,'YYYY-MM-DD') m4,
  Lifecycle_Phase,
  to_date(USR_Deploy_Date,'YYYY-MM-DD') m9, 
  to_date(Work_Auth_Date,'YYYY-MM-DD') Work_Auth_Date,
  Work_Authorized,
  Program,
  to_date(DRD_Approval_Date,'YYYY-MM-DD') m3,
  atti,
  amdocs_sme_ba,
  to_date(to_char(planned_imp_date,'mm/dd/yyyy'),'mm/dd/yyyy') planned_imp_date,
  cc_impact,
  to_date(to_char(to_date(proj_track_date, 'yyyy-mm-dd'),'mm/dd/yyyy'),'mm/dd/yyyy') proj_track_date,
 null m1milestone,
 null m2milestone,
 null m3milestone,
 null m4milestone,
 null m5milestone,
 null m6milestone,
 null m7milestone,
 null m8milestone,
 null m9milestone,
 null m10milestone,
 null m11milestone,
 null dg1milestone,
 null dg2milestone,
 null dg3milestone,
 null dg4milestone
  from 
  WRF where   release_version in ('TBD','No CSS Version')
          and    req_id not like 'CR%'
          and    general_status in ('Active','Held','Financial Hold')
          and    ( Leading_Func_Area = {leadFuncArea} or {leadFuncArea} = 'All' )
          and    ( main_application  = {mainAppl} or {mainAppl} = 'All' ) 
          and    ( Program  = {program} or {program} = 'All' )
          and    (upper(trim(req_id)) like {reqId} or upper(trim(description)) like {reqId})
          and    ( upper(trim(amdocs_owner)) like {employeeName}
                or upper(trim(att_owner)) like {employeeName}
                or upper(trim(assigned_to)) like {employeeName}
                or upper(trim(ba_owner)) like {employeeName}
				or upper(trim(amdocs_sme_ba)) like {employeeName} )
]]>
</statement>

<statement code="WRF_Grid_Program_Query">
<![CDATA[
select * from (select 
   grid.release_version ,                            
   grid.req_id,
   c.description,
   grid.amdocs_owner,
   grid.assigned_to,
  to_number(grid.Last_ADB_Est) Last_ADB_Est,
  to_number(grid.work_auth_amt) work_auth_amt,
  grid.General_Status,
  grid.Status,
  grid.Project_Status,
  to_date(grid.Approved_Date_To_UAT,'YYYY-MM-DD') m8,
  grid.main_application,
  grid.Leading_Func_Area,
  grid.att_Owner,
  grid.Affected_Func_Areas,
  grid.BA_Owner,
  to_date(grid.Date_Scheduled,'YYYY-MM-DD') m5,
  grid.Detected_on_Date m1,
  grid.Amdocs_Pending_Item,
  to_date(grid.DE_Submit_Date,'YYYY-MM-DD') m4,
  grid.Lifecycle_Phase,
  to_date(grid.USR_Deploy_Date,'YYYY-MM-DD') m9, 
  to_date(grid.Work_Auth_Date,'YYYY-MM-DD') Work_Auth_Date,
  grid.Work_Authorized,
  grid.Program,
  to_date(grid.DRD_Approval_Date,'YYYY-MM-DD') m3,
  grid.atti ,
  grid.amdocs_sme_ba,
  to_date(to_char(grid.planned_imp_date,'mm/dd/yyyy'),'mm/dd/yyyy') planned_imp_date,
  grid.cc_impact,
  to_date(to_char(to_date(grid.proj_track_date, 'yyyy-mm-dd'),'mm/dd/yyyy'),'mm/dd/yyyy') proj_track_date,
  grid.m1milestone,
  grid.m2milestone,
  grid.m3milestone,
  grid.m4milestone,
  grid.m5milestone,
  grid.m6milestone,
  grid.m7milestone,
  grid.m8milestone,
  grid.m9milestone,
  grid.m10milestone,
  grid.m11milestone,
  grid.dg1milestone,
  grid.dg2milestone,
  grid.dg3milestone,
  grid.dg4milestone
  from 
(select 
    release_version,                            
   req_id,
    main_application,
    Leading_Func_Area,
   max(amdocs_owner) amdocs_owner,
   max(assigned_to) assigned_to,
  max(Last_ADB_Est) Last_ADB_Est,
  max(work_auth_amt) work_auth_amt,
  max(General_Status) General_Status,
  max(Status) Status,
  max(Project_Status) Project_Status,
  max(Approved_Date_To_UAT) Approved_Date_To_UAT,
  max(att_Owner) att_Owner,
  max(Affected_Func_Areas) Affected_Func_Areas,
  max(BA_Owner) BA_Owner,
  max(Date_Scheduled) Date_Scheduled,
  max(Detected_on_Date) Detected_on_Date,
  max(Amdocs_Pending_Item) Amdocs_Pending_Item,
  max(DE_Submit_Date) DE_Submit_Date,
  max(Lifecycle_Phase) Lifecycle_Phase,
  max(USR_Deploy_Date) USR_Deploy_Date, 
  max(Work_Auth_Date) Work_Auth_Date,
  max(Work_Authorized) Work_Authorized,
  max(Program) Program,
  max(DRD_Approval_Date) DRD_Approval_Date,
  max(atti ) atti,
  max(amdocs_sme_ba) amdocs_sme_ba,
  max(planned_imp_date) planned_imp_date,
  max(cc_impact) cc_impact,
  max(proj_track_date)  proj_track_date,
max(m1milestone) m1milestone,
max(m2milestone) m2milestone,
max(m3milestone) m3milestone,
max(m4milestone) m4milestone,
max(m5milestone) m5milestone,
max(m6milestone) m6milestone,
max(m7milestone) m7milestone,
max(m8milestone) m8milestone,
max(m9milestone) m9milestone,
max(m10milestone) m10milestone,
max(m11milestone) m11milestone,
max(dg1milestone) dg1milestone,
max(dg2milestone) dg2milestone,
max(dg3milestone) dg3milestone,
max(dg4milestone) dg4milestone
from
(
select 
         release_version,                            
   req_id,
   description,
   amdocs_owner,
   assigned_to,
  Last_ADB_Est,
  work_auth_amt,
   General_Status,
  Status,
  Project_Status,
  Approved_Date_To_UAT ,
main_application,
  Leading_Func_Area,
  att_Owner,
  Affected_Func_Areas,
  BA_Owner,
  Date_Scheduled,
  Detected_on_Date,
  Amdocs_Pending_Item,
  DE_Submit_Date,
  Lifecycle_Phase,
  USR_Deploy_Date, 
  Work_Auth_Date,
  Work_Authorized,
  Program,
  DRD_Approval_Date,
  atti ,
  amdocs_sme_ba,
  planned_imp_date,
  cc_impact,
  proj_track_date,
case when trim(milestone_code) = 'M1' then release_date else null end  m1milestone,
case when trim(milestone_code) = 'M2' then release_date else null end  m2milestone,
case when trim(milestone_code) = 'M3' then release_date else null end  m3milestone,
case when trim(milestone_code) = 'M4' then release_date else null end  m4milestone,
case when trim(milestone_code) = 'M5' then release_date else null end  m5milestone,
case when trim(milestone_code) = 'M6' then release_date else null end  m6milestone,
case when trim(milestone_code) = 'M7' then release_date else null end  m7milestone,
case when trim(milestone_code) = 'M8' then release_date else null end  m8milestone,
case when trim(milestone_code) = 'M9' then release_date else null end  m9milestone,
case when trim(milestone_code) = 'M10' then release_date else null  end m10milestone,
case when trim(milestone_code) = 'M11' then release_date else null end m11milestone,
case when trim(milestone_code) = 'DG1' then release_date else null end dg1milestone,
case when trim(milestone_code) = 'DG2' then release_date else null end dg2milestone,
case when trim(milestone_code) = 'DG3' then release_date else null end dg3milestone,
case when trim(milestone_code) = 'DG4' then release_date else null end dg4milestone
from
(
select  a.release_version,                            
   req_id,
   description,
   amdocs_owner,
   assigned_to,
  Last_ADB Last_ADB_Est,
  work_auth_amt work_auth_amt,
   General_Status,
  Status,
  Project_Status,
  Approved_Date_To_UAT ,
  main_application main_application,
  Leading_Func_Area,
  att_Owner,
  Affected_Func_Areas,
  BA_Owner,
  Date_Scheduled,
  Detected_on_Date,
  Amdocs_Pending_Item,
  DE_Submit_Date,
  Lifecycle_Phase,
  USR_Deploy_Date, 
  Work_Auth_Date,
  Work_Authorized,
  Program,
  DRD_Approval_Date,
  atti
, milestone_code
, release_date
, amdocs_sme_ba
, planned_imp_date
, cc_impact
, proj_track_date
from WRF a , release_schedule b
where upper(trim(a.release_version)) = upper(trim(b.release_version(+)))
and (Leading_Func_Area = {leadFuncArea} or {leadFuncArea} = 'All')
and (  main_application  = {mainAppl} or {mainAppl} = 'All') 
and  ( Program  = {program} or {program} = 'All')
and     a.req_id not like 'CR%'
and     a.program is not null
and     a.planned_imp_date between (select add_months(max(planned_imp_date),-13) from wrf) 
							   and (select max(planned_imp_date) from wrf)
/*and upper(trim(a.release_version)) in (select distinct a.release_version from release_schedule a
, (select distinct release_version from release_schedule where trim(milestone_code) = 'M9'  
and release_date = (select min(release_date) from release_schedule where release_date > sysdate and trim(milestone_code) = 'M9' ) ) b
 where substr(a.release_version,-3,3) between substr(b.release_version,-3,3) - 30 and substr(b.release_version,-3,3) +50)*/
)
)
group by release_version,
req_id,
leading_func_area,
main_application
) grid , WRF c
where                        
grid.req_id = c.req_id(+) and
grid.req_id not like 'CR%'
and (upper(trim(grid.req_id)) like {reqId} or upper(trim(description)) like {reqId})
and ( upper(trim(grid.amdocs_owner)) like {employeeName}
or upper(trim(grid.att_owner)) like {employeeName}
or upper(trim(grid.assigned_to)) like {employeeName}
or upper(trim(grid.ba_owner)) like {employeeName}
or upper(trim(grid.amdocs_sme_ba)) like {employeeName} )
order by
substr(grid.release_version,-3,3), length(grid.release_version),                            
grid.req_id,
grid.Last_ADB_Est,
grid.m1milestone,
grid.m3milestone,
grid.m4milestone,
grid.m5milestone,
grid.m8milestone,
grid.m9milestone)

]]>
</statement>

<statement code="WRF_Grid_Month_Query">
<![CDATA[
select * from (select 
   grid.release_version ,                            
   grid.req_id,
   c.description,
   grid.amdocs_owner,
   grid.assigned_to,
  to_number(grid.Last_ADB_Est) Last_ADB_Est,
  to_number(grid.work_auth_amt) work_auth_amt,
  grid.General_Status,
  grid.Status,
  grid.Project_Status,
  to_date(grid.Approved_Date_To_UAT,'YYYY-MM-DD') m8,
  grid.main_application,
  grid.Leading_Func_Area,
  grid.att_Owner,
  grid.Affected_Func_Areas,
  grid.BA_Owner,
  to_date(grid.Date_Scheduled,'YYYY-MM-DD') m5,
  grid.Detected_on_Date m1,
  grid.Amdocs_Pending_Item,
  to_date(grid.DE_Submit_Date,'YYYY-MM-DD') m4,
  grid.Lifecycle_Phase,
  to_date(grid.USR_Deploy_Date,'YYYY-MM-DD') m9, 
  to_date(grid.Work_Auth_Date,'YYYY-MM-DD') Work_Auth_Date,
  grid.Work_Authorized,
  grid.Program,
  to_date(grid.DRD_Approval_Date,'YYYY-MM-DD') m3,
  grid.atti ,
  grid.amdocs_sme_ba,
  to_date(to_char(grid.planned_imp_date,'mm/dd/yyyy'),'mm/dd/yyyy') planned_imp_date,
  grid.cc_impact,
  to_date(to_char(to_date(grid.proj_track_date, 'yyyy-mm-dd'),'mm/dd/yyyy'),'mm/dd/yyyy') proj_track_date,
  grid.m1milestone,
  grid.m2milestone,
  grid.m3milestone,
  grid.m4milestone,
  grid.m5milestone,
  grid.m6milestone,
  grid.m7milestone,
  grid.m8milestone,
  grid.m9milestone,
  grid.m10milestone,
  grid.m11milestone,
  grid.dg1milestone,
  grid.dg2milestone,
  grid.dg3milestone,
  grid.dg4milestone
  from 
(select 
    release_version,                            
   req_id,
    main_application,
    Leading_Func_Area,
   max(amdocs_owner) amdocs_owner,
   max(assigned_to) assigned_to,
  max(Last_ADB_Est) Last_ADB_Est,
  max(work_auth_amt) work_auth_amt,
  max(General_Status) General_Status,
  max(Status) Status,
  max(Project_Status) Project_Status,
  max(Approved_Date_To_UAT) Approved_Date_To_UAT,
  max(att_Owner) att_Owner,
  max(Affected_Func_Areas) Affected_Func_Areas,
  max(BA_Owner) BA_Owner,
  max(Date_Scheduled) Date_Scheduled,
  max(Detected_on_Date) Detected_on_Date,
  max(Amdocs_Pending_Item) Amdocs_Pending_Item,
  max(DE_Submit_Date) DE_Submit_Date,
  max(Lifecycle_Phase) Lifecycle_Phase,
  max(USR_Deploy_Date) USR_Deploy_Date, 
  max(Work_Auth_Date) Work_Auth_Date,
  max(Work_Authorized) Work_Authorized,
  max(Program) Program,
  max(DRD_Approval_Date) DRD_Approval_Date,
  max(atti ) atti,
  max(amdocs_sme_ba) amdocs_sme_ba,
  max(planned_imp_date) planned_imp_date,
  max(cc_impact) cc_impact,
  max(proj_track_date)  proj_track_date,
max(m1milestone) m1milestone,
max(m2milestone) m2milestone,
max(m3milestone) m3milestone,
max(m4milestone) m4milestone,
max(m5milestone) m5milestone,
max(m6milestone) m6milestone,
max(m7milestone) m7milestone,
max(m8milestone) m8milestone,
max(m9milestone) m9milestone,
max(m10milestone) m10milestone,
max(m11milestone) m11milestone,
max(dg1milestone) dg1milestone,
max(dg2milestone) dg2milestone,
max(dg3milestone) dg3milestone,
max(dg4milestone) dg4milestone
from
(
select 
         release_version,                            
   req_id,
   description,
   amdocs_owner,
   assigned_to,
  Last_ADB_Est,
  work_auth_amt,
   General_Status,
  Status,
  Project_Status,
  Approved_Date_To_UAT ,
main_application,
  Leading_Func_Area,
  att_Owner,
  Affected_Func_Areas,
  BA_Owner,
  Date_Scheduled,
  Detected_on_Date,
  Amdocs_Pending_Item,
  DE_Submit_Date,
  Lifecycle_Phase,
  USR_Deploy_Date, 
  Work_Auth_Date,
  Work_Authorized,
  Program,
  DRD_Approval_Date,
  atti ,
  amdocs_sme_ba,
  planned_imp_date,
  cc_impact,
  proj_track_date,
case when trim(milestone_code) = 'M1' then release_date else null end  m1milestone,
case when trim(milestone_code) = 'M2' then release_date else null end  m2milestone,
case when trim(milestone_code) = 'M3' then release_date else null end  m3milestone,
case when trim(milestone_code) = 'M4' then release_date else null end  m4milestone,
case when trim(milestone_code) = 'M5' then release_date else null end  m5milestone,
case when trim(milestone_code) = 'M6' then release_date else null end  m6milestone,
case when trim(milestone_code) = 'M7' then release_date else null end  m7milestone,
case when trim(milestone_code) = 'M8' then release_date else null end  m8milestone,
case when trim(milestone_code) = 'M9' then release_date else null end  m9milestone,
case when trim(milestone_code) = 'M10' then release_date else null  end m10milestone,
case when trim(milestone_code) = 'M11' then release_date else null end m11milestone,
case when trim(milestone_code) = 'DG1' then release_date else null end dg1milestone,
case when trim(milestone_code) = 'DG2' then release_date else null end dg2milestone,
case when trim(milestone_code) = 'DG3' then release_date else null end dg3milestone,
case when trim(milestone_code) = 'DG4' then release_date else null end dg4milestone
from
(
select  a.release_version,                            
   req_id,
   description,
   amdocs_owner,
   assigned_to,
  Last_ADB Last_ADB_Est,
  work_auth_amt work_auth_amt,
   General_Status,
  Status,
  Project_Status,
  Approved_Date_To_UAT ,
  main_application main_application,
  Leading_Func_Area,
  att_Owner,
  Affected_Func_Areas,
  BA_Owner,
  Date_Scheduled,
  Detected_on_Date,
  Amdocs_Pending_Item,
  DE_Submit_Date,
  Lifecycle_Phase,
  USR_Deploy_Date, 
  Work_Auth_Date,
  Work_Authorized,
  Program,
  DRD_Approval_Date,
  atti
, milestone_code
, release_date
, amdocs_sme_ba
, planned_imp_date
, cc_impact
, proj_track_date
from WRF a , release_schedule b
where upper(trim(a.release_version)) = upper(trim(b.release_version(+)))
and (Leading_Func_Area = {leadFuncArea} or {leadFuncArea} = 'All')
and (  main_application  = {mainAppl} or {mainAppl} = 'All') 
and  ( Program  = {program} or {program} = 'All')
and     a.req_id not like 'CR%'
and     a.planned_imp_date is not null
and     a.planned_imp_date between (select add_months(max(planned_imp_date),-13) from wrf) 
							   and (select max(planned_imp_date) from wrf)
/*and upper(trim(a.release_version)) in (select distinct a.release_version from release_schedule a
, (select distinct release_version from release_schedule where trim(milestone_code) = 'M9'  
and release_date = (select min(release_date) from release_schedule where release_date > sysdate and trim(milestone_code) = 'M9' ) ) b
 where substr(a.release_version,-3,3) between substr(b.release_version,-3,3) - 30 and substr(b.release_version,-3,3) +50)*/
)
)
group by release_version,
req_id,
leading_func_area,
main_application
) grid , WRF c
where                        
grid.req_id = c.req_id(+) and
grid.req_id not like 'CR%'
and (upper(trim(grid.req_id)) like {reqId} or upper(trim(description)) like {reqId})
and ( upper(trim(grid.amdocs_owner)) like {employeeName}
or upper(trim(grid.att_owner)) like {employeeName}
or upper(trim(grid.assigned_to)) like {employeeName}
or upper(trim(grid.ba_owner)) like {employeeName}
or upper(trim(grid.amdocs_sme_ba)) like {employeeName} )
order by
substr(grid.release_version,-3,3), length(grid.release_version),                            
grid.req_id,
grid.Last_ADB_Est,
grid.m1milestone,
grid.m3milestone,
grid.m4milestone,
grid.m5milestone,
grid.m8milestone,
grid.m9milestone)

]]>
</statement>

<statement code="WRF_Grid_Prog_ProjStatus_Query">
<![CDATA[
select * from (select 
   grid.release_version ,                            
   grid.req_id,
   c.description,
   grid.amdocs_owner,
   grid.assigned_to,
  to_number(grid.Last_ADB_Est) Last_ADB_Est,
  to_number(grid.work_auth_amt) work_auth_amt,
  grid.General_Status,
  grid.Status,
  grid.Project_Status,
  to_date(grid.Approved_Date_To_UAT,'YYYY-MM-DD') m8,
  grid.main_application,
  grid.Leading_Func_Area,
  grid.att_Owner,
  grid.Affected_Func_Areas,
  grid.BA_Owner,
  to_date(grid.Date_Scheduled,'YYYY-MM-DD') m5,
  grid.Detected_on_Date m1,
  grid.Amdocs_Pending_Item,
  to_date(grid.DE_Submit_Date,'YYYY-MM-DD') m4,
  grid.Lifecycle_Phase,
  to_date(grid.USR_Deploy_Date,'YYYY-MM-DD') m9, 
  to_date(grid.Work_Auth_Date,'YYYY-MM-DD') Work_Auth_Date,
  grid.Work_Authorized,
  grid.Program,
  to_date(grid.DRD_Approval_Date,'YYYY-MM-DD') m3,
  grid.atti ,
  grid.amdocs_sme_ba,
  to_date(to_char(grid.planned_imp_date,'mm/dd/yyyy'),'mm/dd/yyyy') planned_imp_date,
  grid.cc_impact,
  to_date(to_char(to_date(grid.proj_track_date, 'yyyy-mm-dd'),'mm/dd/yyyy'),'mm/dd/yyyy') proj_track_date,
  grid.m1milestone,
  grid.m2milestone,
  grid.m3milestone,
  grid.m4milestone,
  grid.m5milestone,
  grid.m6milestone,
  grid.m7milestone,
  grid.m8milestone,
  grid.m9milestone,
  grid.m10milestone,
  grid.m11milestone,
  grid.dg1milestone,
  grid.dg2milestone,
  grid.dg3milestone,
  grid.dg4milestone
  from 
(select 
    release_version,                            
   req_id,
    main_application,
    Leading_Func_Area,
   max(amdocs_owner) amdocs_owner,
   max(assigned_to) assigned_to,
  max(Last_ADB_Est) Last_ADB_Est,
  max(work_auth_amt) work_auth_amt,
  max(General_Status) General_Status,
  max(Status) Status,
  max(Project_Status) Project_Status,
  max(Approved_Date_To_UAT) Approved_Date_To_UAT,
  max(att_Owner) att_Owner,
  max(Affected_Func_Areas) Affected_Func_Areas,
  max(BA_Owner) BA_Owner,
  max(Date_Scheduled) Date_Scheduled,
  max(Detected_on_Date) Detected_on_Date,
  max(Amdocs_Pending_Item) Amdocs_Pending_Item,
  max(DE_Submit_Date) DE_Submit_Date,
  max(Lifecycle_Phase) Lifecycle_Phase,
  max(USR_Deploy_Date) USR_Deploy_Date, 
  max(Work_Auth_Date) Work_Auth_Date,
  max(Work_Authorized) Work_Authorized,
  max(Program) Program,
  max(DRD_Approval_Date) DRD_Approval_Date,
  max(atti ) atti,
  max(amdocs_sme_ba) amdocs_sme_ba,
  max(planned_imp_date) planned_imp_date,
  max(cc_impact) cc_impact,
  max(proj_track_date)  proj_track_date,
max(m1milestone) m1milestone,
max(m2milestone) m2milestone,
max(m3milestone) m3milestone,
max(m4milestone) m4milestone,
max(m5milestone) m5milestone,
max(m6milestone) m6milestone,
max(m7milestone) m7milestone,
max(m8milestone) m8milestone,
max(m9milestone) m9milestone,
max(m10milestone) m10milestone,
max(m11milestone) m11milestone,
max(dg1milestone) dg1milestone,
max(dg2milestone) dg2milestone,
max(dg3milestone) dg3milestone,
max(dg4milestone) dg4milestone
from
(
select 
         release_version,                            
   req_id,
   description,
   amdocs_owner,
   assigned_to,
  Last_ADB_Est,
  work_auth_amt,
   General_Status,
  Status,
  Project_Status,
  Approved_Date_To_UAT ,
main_application,
  Leading_Func_Area,
  att_Owner,
  Affected_Func_Areas,
  BA_Owner,
  Date_Scheduled,
  Detected_on_Date,
  Amdocs_Pending_Item,
  DE_Submit_Date,
  Lifecycle_Phase,
  USR_Deploy_Date, 
  Work_Auth_Date,
  Work_Authorized,
  Program,
  DRD_Approval_Date,
  atti ,
  amdocs_sme_ba,
  planned_imp_date,
  cc_impact,
  proj_track_date,
case when trim(milestone_code) = 'M1' then release_date else null end  m1milestone,
case when trim(milestone_code) = 'M2' then release_date else null end  m2milestone,
case when trim(milestone_code) = 'M3' then release_date else null end  m3milestone,
case when trim(milestone_code) = 'M4' then release_date else null end  m4milestone,
case when trim(milestone_code) = 'M5' then release_date else null end  m5milestone,
case when trim(milestone_code) = 'M6' then release_date else null end  m6milestone,
case when trim(milestone_code) = 'M7' then release_date else null end  m7milestone,
case when trim(milestone_code) = 'M8' then release_date else null end  m8milestone,
case when trim(milestone_code) = 'M9' then release_date else null end  m9milestone,
case when trim(milestone_code) = 'M10' then release_date else null  end m10milestone,
case when trim(milestone_code) = 'M11' then release_date else null end m11milestone,
case when trim(milestone_code) = 'DG1' then release_date else null end dg1milestone,
case when trim(milestone_code) = 'DG2' then release_date else null end dg2milestone,
case when trim(milestone_code) = 'DG3' then release_date else null end dg3milestone,
case when trim(milestone_code) = 'DG4' then release_date else null end dg4milestone
from
(
select  a.release_version,                            
   req_id,
   description,
   amdocs_owner,
   assigned_to,
  Last_ADB Last_ADB_Est,
  work_auth_amt work_auth_amt,
   General_Status,
  Status,
  Project_Status,
  Approved_Date_To_UAT ,
  main_application main_application,
  Leading_Func_Area,
  att_Owner,
  Affected_Func_Areas,
  BA_Owner,
  Date_Scheduled,
  Detected_on_Date,
  Amdocs_Pending_Item,
  DE_Submit_Date,
  Lifecycle_Phase,
  USR_Deploy_Date, 
  Work_Auth_Date,
  Work_Authorized,
  Program,
  DRD_Approval_Date,
  atti
, milestone_code
, release_date
, amdocs_sme_ba
, planned_imp_date
, cc_impact
, proj_track_date
from WRF a , release_schedule b
where upper(trim(a.release_version)) = upper(trim(b.release_version(+)))
and (Leading_Func_Area = {leadFuncArea} or {leadFuncArea} = 'All')
and (  main_application  = {mainAppl} or {mainAppl} = 'All') 
and  ( Program  = {program} or {program} = 'All')
and     a.req_id not like 'CR%'
and     a.program is not null
and 	a.project_status is not null
and     a.planned_imp_date between (select add_months(max(planned_imp_date),-13) from wrf) 
							   and (select max(planned_imp_date) from wrf)
/*and upper(trim(a.release_version)) in (select distinct a.release_version from release_schedule a
, (select distinct release_version from release_schedule where trim(milestone_code) = 'M9'  
and release_date = (select min(release_date) from release_schedule where release_date > sysdate and trim(milestone_code) = 'M9' ) ) b
 where substr(a.release_version,-3,3) between substr(b.release_version,-3,3) - 30 and substr(b.release_version,-3,3) +50)*/
)
)
group by release_version,
req_id,
leading_func_area,
main_application
) grid , WRF c
where                        
grid.req_id = c.req_id(+) and
grid.req_id not like 'CR%'
and (upper(trim(grid.req_id)) like {reqId} or upper(trim(description)) like {reqId})
and ( upper(trim(grid.amdocs_owner)) like {employeeName}
or upper(trim(grid.att_owner)) like {employeeName}
or upper(trim(grid.assigned_to)) like {employeeName}
or upper(trim(grid.ba_owner)) like {employeeName}
or upper(trim(grid.amdocs_sme_ba)) like {employeeName} )
order by
substr(grid.release_version,-3,3), length(grid.release_version),                            
grid.req_id,
grid.Last_ADB_Est,
grid.m1milestone,
grid.m3milestone,
grid.m4milestone,
grid.m5milestone,
grid.m8milestone,
grid.m9milestone)

]]>
</statement>

<statement code="WRF_Grid_Mon_ProjStatus_Query">
<![CDATA[
select * from (select 
   grid.release_version ,                            
   grid.req_id,
   c.description,
   grid.amdocs_owner,
   grid.assigned_to,
  to_number(grid.Last_ADB_Est) Last_ADB_Est,
  to_number(grid.work_auth_amt) work_auth_amt,
  grid.General_Status,
  grid.Status,
  grid.Project_Status,
  to_date(grid.Approved_Date_To_UAT,'YYYY-MM-DD') m8,
  grid.main_application,
  grid.Leading_Func_Area,
  grid.att_Owner,
  grid.Affected_Func_Areas,
  grid.BA_Owner,
  to_date(grid.Date_Scheduled,'YYYY-MM-DD') m5,
  grid.Detected_on_Date m1,
  grid.Amdocs_Pending_Item,
  to_date(grid.DE_Submit_Date,'YYYY-MM-DD') m4,
  grid.Lifecycle_Phase,
  to_date(grid.USR_Deploy_Date,'YYYY-MM-DD') m9, 
  to_date(grid.Work_Auth_Date,'YYYY-MM-DD') Work_Auth_Date,
  grid.Work_Authorized,
  grid.Program,
  to_date(grid.DRD_Approval_Date,'YYYY-MM-DD') m3,
  grid.atti ,
  grid.amdocs_sme_ba,
  to_date(to_char(grid.planned_imp_date,'mm/dd/yyyy'),'mm/dd/yyyy') planned_imp_date,
  grid.cc_impact,
  to_date(to_char(to_date(grid.proj_track_date, 'yyyy-mm-dd'),'mm/dd/yyyy'),'mm/dd/yyyy') proj_track_date,
  grid.m1milestone,
  grid.m2milestone,
  grid.m3milestone,
  grid.m4milestone,
  grid.m5milestone,
  grid.m6milestone,
  grid.m7milestone,
  grid.m8milestone,
  grid.m9milestone,
  grid.m10milestone,
  grid.m11milestone,
  grid.dg1milestone,
  grid.dg2milestone,
  grid.dg3milestone,
  grid.dg4milestone
  from 
(select 
    release_version,                            
   req_id,
    main_application,
    Leading_Func_Area,
   max(amdocs_owner) amdocs_owner,
   max(assigned_to) assigned_to,
  max(Last_ADB_Est) Last_ADB_Est,
  max(work_auth_amt) work_auth_amt,
  max(General_Status) General_Status,
  max(Status) Status,
  max(Project_Status) Project_Status,
  max(Approved_Date_To_UAT) Approved_Date_To_UAT,
  max(att_Owner) att_Owner,
  max(Affected_Func_Areas) Affected_Func_Areas,
  max(BA_Owner) BA_Owner,
  max(Date_Scheduled) Date_Scheduled,
  max(Detected_on_Date) Detected_on_Date,
  max(Amdocs_Pending_Item) Amdocs_Pending_Item,
  max(DE_Submit_Date) DE_Submit_Date,
  max(Lifecycle_Phase) Lifecycle_Phase,
  max(USR_Deploy_Date) USR_Deploy_Date, 
  max(Work_Auth_Date) Work_Auth_Date,
  max(Work_Authorized) Work_Authorized,
  max(Program) Program,
  max(DRD_Approval_Date) DRD_Approval_Date,
  max(atti ) atti,
  max(amdocs_sme_ba) amdocs_sme_ba,
  max(planned_imp_date) planned_imp_date,
  max(cc_impact) cc_impact,
  max(proj_track_date)  proj_track_date,
max(m1milestone) m1milestone,
max(m2milestone) m2milestone,
max(m3milestone) m3milestone,
max(m4milestone) m4milestone,
max(m5milestone) m5milestone,
max(m6milestone) m6milestone,
max(m7milestone) m7milestone,
max(m8milestone) m8milestone,
max(m9milestone) m9milestone,
max(m10milestone) m10milestone,
max(m11milestone) m11milestone,
max(dg1milestone) dg1milestone,
max(dg2milestone) dg2milestone,
max(dg3milestone) dg3milestone,
max(dg4milestone) dg4milestone
from
(
select 
         release_version,                            
   req_id,
   description,
   amdocs_owner,
   assigned_to,
  Last_ADB_Est,
  work_auth_amt,
   General_Status,
  Status,
  Project_Status,
  Approved_Date_To_UAT ,
main_application,
  Leading_Func_Area,
  att_Owner,
  Affected_Func_Areas,
  BA_Owner,
  Date_Scheduled,
  Detected_on_Date,
  Amdocs_Pending_Item,
  DE_Submit_Date,
  Lifecycle_Phase,
  USR_Deploy_Date, 
  Work_Auth_Date,
  Work_Authorized,
  Program,
  DRD_Approval_Date,
  atti ,
  amdocs_sme_ba,
  planned_imp_date,
  cc_impact,
  proj_track_date,
case when trim(milestone_code) = 'M1' then release_date else null end  m1milestone,
case when trim(milestone_code) = 'M2' then release_date else null end  m2milestone,
case when trim(milestone_code) = 'M3' then release_date else null end  m3milestone,
case when trim(milestone_code) = 'M4' then release_date else null end  m4milestone,
case when trim(milestone_code) = 'M5' then release_date else null end  m5milestone,
case when trim(milestone_code) = 'M6' then release_date else null end  m6milestone,
case when trim(milestone_code) = 'M7' then release_date else null end  m7milestone,
case when trim(milestone_code) = 'M8' then release_date else null end  m8milestone,
case when trim(milestone_code) = 'M9' then release_date else null end  m9milestone,
case when trim(milestone_code) = 'M10' then release_date else null  end m10milestone,
case when trim(milestone_code) = 'M11' then release_date else null end m11milestone,
case when trim(milestone_code) = 'DG1' then release_date else null end dg1milestone,
case when trim(milestone_code) = 'DG2' then release_date else null end dg2milestone,
case when trim(milestone_code) = 'DG3' then release_date else null end dg3milestone,
case when trim(milestone_code) = 'DG4' then release_date else null end dg4milestone
from
(
select  a.release_version,                            
   req_id,
   description,
   amdocs_owner,
   assigned_to,
  Last_ADB Last_ADB_Est,
  work_auth_amt work_auth_amt,
   General_Status,
  Status,
  Project_Status,
  Approved_Date_To_UAT ,
  main_application main_application,
  Leading_Func_Area,
  att_Owner,
  Affected_Func_Areas,
  BA_Owner,
  Date_Scheduled,
  Detected_on_Date,
  Amdocs_Pending_Item,
  DE_Submit_Date,
  Lifecycle_Phase,
  USR_Deploy_Date, 
  Work_Auth_Date,
  Work_Authorized,
  Program,
  DRD_Approval_Date,
  atti
, milestone_code
, release_date
, amdocs_sme_ba
, planned_imp_date
, cc_impact
, proj_track_date
from WRF a , release_schedule b
where upper(trim(a.release_version)) = upper(trim(b.release_version(+)))
and (Leading_Func_Area = {leadFuncArea} or {leadFuncArea} = 'All')
and (  main_application  = {mainAppl} or {mainAppl} = 'All') 
and  ( Program  = {program} or {program} = 'All')
and     a.req_id not like 'CR%'
and     a.planned_imp_date is not null
and 	a.project_status is not null
and     a.planned_imp_date between (select add_months(max(planned_imp_date),-13) from wrf) 
							   and (select max(planned_imp_date) from wrf)
/*and upper(trim(a.release_version)) in (select distinct a.release_version from release_schedule a
, (select distinct release_version from release_schedule where trim(milestone_code) = 'M9'  
and release_date = (select min(release_date) from release_schedule where release_date > sysdate and trim(milestone_code) = 'M9' ) ) b
 where substr(a.release_version,-3,3) between substr(b.release_version,-3,3) - 30 and substr(b.release_version,-3,3) +50)*/
)
)
group by release_version,
req_id,
leading_func_area,
main_application
) grid , WRF c
where                        
grid.req_id = c.req_id(+) and
grid.req_id not like 'CR%'
and (upper(trim(grid.req_id)) like {reqId} or upper(trim(description)) like {reqId})
and ( upper(trim(grid.amdocs_owner)) like {employeeName}
or upper(trim(grid.att_owner)) like {employeeName}
or upper(trim(grid.assigned_to)) like {employeeName}
or upper(trim(grid.ba_owner)) like {employeeName}
or upper(trim(grid.amdocs_sme_ba)) like {employeeName} )
order by
substr(grid.release_version,-3,3), length(grid.release_version),                            
grid.req_id,
grid.Last_ADB_Est,
grid.m1milestone,
grid.m3milestone,
grid.m4milestone,
grid.m5milestone,
grid.m8milestone,
grid.m9milestone)

]]>
</statement>

<statement code="WRF_Grid_Drilldown_Query">
<![CDATA[
select 
   grid.release_version ,                            
   grid.req_id,
   c.description,
   grid.amdocs_owner,
   grid.assigned_to,
  to_number(grid.Last_ADB_Est) Last_ADB_Est,
  grid.General_Status,
  grid.Status,
  grid.Project_Status,
  to_date(grid.Approved_Date_To_UAT,'YYYY-MM-DD') m8,
  grid.main_application,
  grid.Leading_Func_Area,
  grid.att_Owner,
  grid.Affected_Func_Areas,
  grid.BA_Owner,
  to_date(grid.Date_Scheduled,'YYYY-MM-DD') m5,
  grid.Detected_on_Date m1,
  grid.Amdocs_Pending_Item,
  to_date(grid.DE_Submit_Date,'YYYY-MM-DD') m4,
  grid.Lifecycle_Phase,
  to_date(grid.USR_Deploy_Date,'YYYY-MM-DD') m9, 
  to_date(grid.Work_Auth_Date,'YYYY-MM-DD') Work_Auth_Date,
  grid.Work_Authorized,
  grid.Program,
  to_date(grid.DRD_Approval_Date,'YYYY-MM-DD') m3,
  grid.atti ,
  grid.amdocs_sme_ba,
  to_number(grid.work_auth_amt) work_auth_amt,
  to_date(to_char(grid.planned_imp_date,'mm/dd/yyyy'),'mm/dd/yyyy') planned_imp_date,
  grid.cc_impact,
  to_date(to_char(to_date(grid.proj_track_date, 'yyyy-mm-dd'),'mm/dd/yyyy'),'mm/dd/yyyy') proj_track_date,
  grid.m1milestone,
  grid.m2milestone,
  grid.m3milestone,
  grid.m4milestone,
  grid.m5milestone,
  grid.m6milestone,
  grid.m7milestone,
  grid.m8milestone,
  grid.m9milestone,
  grid.m10milestone,
  grid.m11milestone,
  grid.dg1milestone,
  grid.dg2milestone,
  grid.dg3milestone,
  grid.dg4milestone
  from 
(select 
    release_version,                            
   req_id,
    main_application,
    Leading_Func_Area,
   max(amdocs_owner) amdocs_owner,
   max(assigned_to) assigned_to,
  max(Last_ADB_Est) Last_ADB_Est,
  max(General_Status) General_Status,
  max(Status) Status,
  max(Project_Status) Project_Status,
  max(Approved_Date_To_UAT) Approved_Date_To_UAT,
  max(att_Owner) att_Owner,
  max(Affected_Func_Areas) Affected_Func_Areas,
  max(BA_Owner) BA_Owner,
  max(Date_Scheduled) Date_Scheduled,
  max(Detected_on_Date) Detected_on_Date,
  max(Amdocs_Pending_Item) Amdocs_Pending_Item,
  max(DE_Submit_Date) DE_Submit_Date,
  max(Lifecycle_Phase) Lifecycle_Phase,
  max(USR_Deploy_Date) USR_Deploy_Date, 
  max(Work_Auth_Date) Work_Auth_Date,
  max(Work_Authorized) Work_Authorized,
  max(Program) Program,
  max(DRD_Approval_Date) DRD_Approval_Date,
  max(atti ) atti,
  max(amdocs_sme_ba) amdocs_sme_ba,
  max(work_auth_amt) work_auth_amt,
  max(planned_imp_date) planned_imp_date,
  max(cc_impact) cc_impact,
  max(proj_track_date)  proj_track_date,
max(m1milestone) m1milestone,
max(m2milestone) m2milestone,
max(m3milestone) m3milestone,
max(m4milestone) m4milestone,
max(m5milestone) m5milestone,
max(m6milestone) m6milestone,
max(m7milestone) m7milestone,
max(m8milestone) m8milestone,
max(m9milestone) m9milestone,
max(m10milestone) m10milestone,
max(m11milestone) m11milestone,
max(dg1milestone) dg1milestone,
max(dg2milestone) dg2milestone,
max(dg3milestone) dg3milestone,
max(dg4milestone) dg4milestone
from
(
select 
         release_version,                            
   req_id,
   description,
   amdocs_owner,
   assigned_to,
  Last_ADB_Est,
   General_Status,
  Status,
  project_status,
  Approved_Date_To_UAT ,
main_application,
  Leading_Func_Area,
  att_Owner,
  Affected_Func_Areas,
  BA_Owner,
  Date_Scheduled,
  Detected_on_Date,
  Amdocs_Pending_Item,
  DE_Submit_Date,
  Lifecycle_Phase,
  USR_Deploy_Date, 
  Work_Auth_Date,
  Work_Authorized,
  Program,
  DRD_Approval_Date,
  atti ,
  amdocs_sme_ba,
  work_auth_amt,
  planned_imp_date,
  cc_impact,
  proj_track_date,
case when trim(milestone_code) = 'M1' then release_date else null end  m1milestone,
case when trim(milestone_code) = 'M2' then release_date else null end  m2milestone,
case when trim(milestone_code) = 'M3' then release_date else null end  m3milestone,
case when trim(milestone_code) = 'M4' then release_date else null end  m4milestone,
case when trim(milestone_code) = 'M5' then release_date else null end  m5milestone,
case when trim(milestone_code) = 'M6' then release_date else null end  m6milestone,
case when trim(milestone_code) = 'M7' then release_date else null end  m7milestone,
case when trim(milestone_code) = 'M8' then release_date else null end  m8milestone,
case when trim(milestone_code) = 'M9' then release_date else null end  m9milestone,
case when trim(milestone_code) = 'M10' then release_date else null  end m10milestone,
case when trim(milestone_code) = 'M11' then release_date else null end m11milestone,
case when trim(milestone_code) = 'DG1' then release_date else null end dg1milestone,
case when trim(milestone_code) = 'DG2' then release_date else null end dg2milestone,
case when trim(milestone_code) = 'DG3' then release_date else null end dg3milestone,
case when trim(milestone_code) = 'DG4' then release_date else null end dg4milestone
from
(
select  a.release_version,                            
   req_id,
   description,
   amdocs_owner,
   assigned_to,
  Last_ADB Last_ADB_Est,
   General_Status,
  Status,
  project_status,
  Approved_Date_To_UAT ,
  main_application main_application,
  Leading_Func_Area,
  att_Owner,
  Affected_Func_Areas,
  BA_Owner,
  Date_Scheduled,
  Detected_on_Date,
  Amdocs_Pending_Item,
  DE_Submit_Date,
  Lifecycle_Phase,
  USR_Deploy_Date, 
  Work_Auth_Date,
  Work_Authorized,
  Program,
  DRD_Approval_Date,
  atti
, milestone_code
, release_date
, amdocs_sme_ba
, work_auth_amt
, planned_imp_date
, cc_impact
, proj_track_date
from WRF a , release_schedule b
where upper(trim(a.release_version)) = upper(trim(b.release_version))
and (Leading_Func_Area = {leadFuncArea} or {leadFuncArea} = 'All')
and (  main_application  = {mainAppl} or {mainAppl} = 'All') 
and  ( Program  = {program} or {program} = 'All')
and a.release_version not in ('TBD','No CSS Version')
and  upper(trim(a.release_version)) = upper(trim({version}))
and  (nvl(work_authorized,'N') in ({{workAuth}}) or ( 'All' in ({{workAuth}}) ))
and ((project_status in {{projectStatus}}) or ( 'All' in ({{projectStatus}})))
and upper(trim(a.release_version)) in (select  release_version 
from     wrf_release)
)
)
group by release_version,
req_id,
leading_func_area,
main_application
) grid , WRF c
where                         
grid.req_id = c.req_id(+) and
grid.req_id not like 'CR%'
and (upper(trim(grid.req_id)) like {reqId} or upper(trim(description)) like {reqId})
and ( upper(trim(grid.amdocs_owner)) like {employeeName}
or upper(trim(grid.att_owner)) like {employeeName}
or upper(trim(grid.assigned_to)) like {employeeName}
or upper(trim(grid.ba_owner)) like {employeeName}
or upper(trim(grid.amdocs_sme_ba)) like {employeeName} )
order by
substr(grid.release_version,-3,3), length(grid.release_version),                            
grid.req_id,
grid.Last_ADB_Est,
grid.m1milestone,
grid.m3milestone,
grid.m4milestone,
grid.m5milestone,
grid.m8milestone,
grid.m9milestone
]]>
</statement>

<statement code="WRF_Grid_Combined_Drilldown_Query">
<![CDATA[
select 
   grid.release_version ,                            
   grid.req_id,
   c.description,
   grid.amdocs_owner,
   grid.assigned_to,
  to_number(grid.Last_ADB_Est) Last_ADB_Est,
  to_number(grid.work_auth_amt) work_auth_amt,
  grid.General_Status,
  grid.Status,
  grid.project_status,
  to_date(grid.Approved_Date_To_UAT,'YYYY-MM-DD') m8,
  grid.main_application,
  grid.Leading_Func_Area,
  grid.att_Owner,
  grid.Affected_Func_Areas,
  grid.BA_Owner,
  to_date(grid.Date_Scheduled,'YYYY-MM-DD') m5,
  grid.Detected_on_Date m1,
  grid.Amdocs_Pending_Item,
  to_date(grid.DE_Submit_Date,'YYYY-MM-DD') m4,
  grid.Lifecycle_Phase,
  to_date(grid.USR_Deploy_Date,'YYYY-MM-DD') m9, 
  to_date(grid.Work_Auth_Date,'YYYY-MM-DD') Work_Auth_Date,
  grid.Work_Authorized,
  grid.Program,
  to_date(grid.DRD_Approval_Date,'YYYY-MM-DD') m3,
  grid.atti ,
  grid.amdocs_sme_ba,
  to_date(to_char(grid.planned_imp_date,'mm/dd/yyyy'),'mm/dd/yyyy') planned_imp_date,
  grid.cc_impact,
  to_date(to_char(to_date(grid.proj_track_date, 'yyyy-mm-dd'),'mm/dd/yyyy'),'mm/dd/yyyy') proj_track_date,
  grid.m1milestone,
  grid.m2milestone,
  grid.m3milestone,
  grid.m4milestone,
  grid.m5milestone,
  grid.m6milestone,
  grid.m7milestone,
  grid.m8milestone,
  grid.m9milestone,
  grid.m10milestone,
  grid.m11milestone,
  grid.dg1milestone,
  grid.dg2milestone,
  grid.dg3milestone,
  grid.dg4milestone
  from 
(select 
    release_version,                            
   req_id,
    main_application,
    Leading_Func_Area,
   max(amdocs_owner) amdocs_owner,
   max(assigned_to) assigned_to,
  max(Last_ADB_Est) Last_ADB_Est,
  max(work_auth_amt) work_auth_amt,
  max(General_Status) General_Status,
  max(Status) Status,
  max(project_status) project_status,
  max(Approved_Date_To_UAT) Approved_Date_To_UAT,
  max(att_Owner) att_Owner,
  max(Affected_Func_Areas) Affected_Func_Areas,
  max(BA_Owner) BA_Owner,
  max(Date_Scheduled) Date_Scheduled,
  max(Detected_on_Date) Detected_on_Date,
  max(Amdocs_Pending_Item) Amdocs_Pending_Item,
  max(DE_Submit_Date) DE_Submit_Date,
  max(Lifecycle_Phase) Lifecycle_Phase,
  max(USR_Deploy_Date) USR_Deploy_Date, 
  max(Work_Auth_Date) Work_Auth_Date,
  max(Work_Authorized) Work_Authorized,
  max(Program) Program,
  max(DRD_Approval_Date) DRD_Approval_Date,
  max(atti ) atti,
  max(amdocs_sme_ba) amdocs_sme_ba,
  max(planned_imp_date) planned_imp_date,
  max(cc_impact) cc_impact,
  max(proj_track_date)  proj_track_date,
max(m1milestone) m1milestone,
max(m2milestone) m2milestone,
max(m3milestone) m3milestone,
max(m4milestone) m4milestone,
max(m5milestone) m5milestone,
max(m6milestone) m6milestone,
max(m7milestone) m7milestone,
max(m8milestone) m8milestone,
max(m9milestone) m9milestone,
max(m10milestone) m10milestone,
max(m11milestone) m11milestone,
max(dg1milestone) dg1milestone,
max(dg2milestone) dg2milestone,
max(dg3milestone) dg3milestone,
max(dg4milestone) dg4milestone
from
(
select 
         release_version,                            
   req_id,
   description,
   amdocs_owner,
   assigned_to,
  Last_ADB_Est,
  work_auth_amt,
   General_Status,
  Status,
  project_status,
  Approved_Date_To_UAT ,
main_application,
  Leading_Func_Area,
  att_Owner,
  Affected_Func_Areas,
  BA_Owner,
  Date_Scheduled,
  Detected_on_Date,
  Amdocs_Pending_Item,
  DE_Submit_Date,
  Lifecycle_Phase,
  USR_Deploy_Date, 
  Work_Auth_Date,
  Work_Authorized,
  Program,
  DRD_Approval_Date,
  atti ,
  amdocs_sme_ba,
  planned_imp_date,
  cc_impact,
  proj_track_date,
case when trim(milestone_code) = 'M1' then release_date else null end  m1milestone,
case when trim(milestone_code) = 'M2' then release_date else null end  m2milestone,
case when trim(milestone_code) = 'M3' then release_date else null end  m3milestone,
case when trim(milestone_code) = 'M4' then release_date else null end  m4milestone,
case when trim(milestone_code) = 'M5' then release_date else null end  m5milestone,
case when trim(milestone_code) = 'M6' then release_date else null end  m6milestone,
case when trim(milestone_code) = 'M7' then release_date else null end  m7milestone,
case when trim(milestone_code) = 'M8' then release_date else null end  m8milestone,
case when trim(milestone_code) = 'M9' then release_date else null end  m9milestone,
case when trim(milestone_code) = 'M10' then release_date else null  end m10milestone,
case when trim(milestone_code) = 'M11' then release_date else null end m11milestone,
case when trim(milestone_code) = 'DG1' then release_date else null end dg1milestone,
case when trim(milestone_code) = 'DG2' then release_date else null end dg2milestone,
case when trim(milestone_code) = 'DG3' then release_date else null end dg3milestone,
case when trim(milestone_code) = 'DG4' then release_date else null end dg4milestone
from
(
select  a.release_version,                            
   req_id,
   description,
   amdocs_owner,
   assigned_to,
  Last_ADB Last_ADB_Est,
  a.work_auth_amt work_auth_amt,
   General_Status,
  Status,
  project_status,
  Approved_Date_To_UAT ,
  main_application main_application,
  Leading_Func_Area,
  att_Owner,
  Affected_Func_Areas,
  BA_Owner,
  Date_Scheduled,
  Detected_on_Date,
  Amdocs_Pending_Item,
  DE_Submit_Date,
  Lifecycle_Phase,
  USR_Deploy_Date, 
  Work_Auth_Date,
  Work_Authorized,
  Program,
  DRD_Approval_Date,
  atti
, milestone_code
, release_date
, amdocs_sme_ba
, planned_imp_date
, cc_impact
, proj_track_date
from WRF a , release_schedule b
where upper(trim(a.release_version)) = upper(trim(b.release_version))
and (Leading_Func_Area = {leadFuncArea} or {leadFuncArea} = 'All')
and (  main_application  = {mainAppl} or {mainAppl} = 'All') 
and  ( Program  = {program} or {program} = 'All')
and a.release_version not in ('TBD','No CSS Version')
and  a.release_version like {version}
and  (nvl(work_authorized,'N') in ({{workAuth}}) or ('All' in ({{workAuth}})))
and ((project_status in {{projectStatus}}) or ({projectStatus} = 'All'))
and upper(trim(a.release_version)) in (select  release_version 
from     wrf_release)
)
)
group by release_version,
req_id,
leading_func_area,
main_application
) grid , WRF c
where                         
grid.req_id = c.req_id(+) and
grid.req_id not like 'CR%'
and (upper(trim(grid.req_id)) like {reqId} or upper(trim(description)) like {reqId})
and ( upper(trim(grid.amdocs_owner)) like {employeeName}
or upper(trim(grid.att_owner)) like {employeeName}
or upper(trim(grid.assigned_to)) like {employeeName}
or upper(trim(grid.ba_owner)) like {employeeName}
or upper(trim(grid.amdocs_sme_ba)) like {employeeName} )
order by
substr(grid.release_version,-3,3), length(grid.release_version),                            
grid.req_id,
grid.Last_ADB_Est,
grid.m1milestone,
grid.m3milestone,
grid.m4milestone,
grid.m5milestone,
grid.m8milestone,
grid.m9milestone
]]>
</statement>

<statement code="WRFNamesSLV">
<![CDATA[
select distinct req_id from WRF
]]>
</statement>

<statement code="WRFEmployeeNamesSLV">
<![CDATA[
select employee_name from (
select distinct upper(trim(att_owner)) employee_name from WRF
union
select distinct upper(trim(ba_owner)) employee_name from WRF
union
select distinct upper(trim(amdocs_owner)) employee_name from WRF
union
select distinct upper(trim(assigned_to)) employee_name from WRF
)
order by employee_name
]]>
</statement>


<statement code="WRF_Grid_Drilldown_Status_Query">
<![CDATA[
select 
   (case when  general_status = 'Active' then 'TBD'
               when  general_status = 'Financial Hold' then 'Fin Hold'
               else general_status
               end) release_version ,                            
   req_id,
   description,
   amdocs_owner,
   assigned_to,
  to_number( Last_ADB) Last_ADB_Est,
  to_number(work_auth_amt) work_auth_amt,
  General_Status,
  Status,
  project_status,
  to_date(Approved_Date_To_UAT,'YYYY-MM-DD') m8,
  main_application main_application,
  Leading_Func_Area,
  att_Owner,
  Affected_Func_Areas,
  BA_Owner,
  to_date(Date_Scheduled,'YYYY-MM-DD') m5,
  Detected_on_Date m1,
  Amdocs_Pending_Item,
  to_date(DE_Submit_Date,'YYYY-MM-DD') m4,
  Lifecycle_Phase,
  to_date(USR_Deploy_Date,'YYYY-MM-DD') m9, 
  to_date(Work_Auth_Date,'YYYY-MM-DD') Work_Auth_Date,
  Work_Authorized,
  Program,
  to_date(DRD_Approval_Date,'YYYY-MM-DD') m3,
  atti,
  amdocs_sme_ba,
  planned_imp_date,
  cc_impact,
  proj_track_date,
 null m1milestone,
 null m2milestone,
 null m3milestone,
 null m4milestone,
 null m5milestone,
 null m6milestone,
 null m7milestone,
 null m8milestone,
 null m9milestone,
 null m10milestone,
 null m11milestone,
 null dg1milestone,
 null dg2milestone,
 null dg3milestone,
 null dg4milestone
  from 
  WRF where   release_version in ('TBD','No CSS Version')
          and    req_id not like 'CR%'
          and    general_status = {status}
          and    ( Leading_Func_Area = {leadFuncArea} or {leadFuncArea} = 'All' )
          and    ( main_application  = {mainAppl} or {mainAppl} = 'All' ) 
          and    ( Program  = {program} or {program} = 'All' )
          and    (upper(trim(req_id)) like {reqId} or upper(trim(description)) like {reqId})
          and    ( upper(trim(amdocs_owner)) like {employeeName}
                or upper(trim(att_owner)) like {employeeName}
                or upper(trim(assigned_to)) like {employeeName}
                or upper(trim(ba_owner)) like {employeeName}
				or upper(trim(amdocs_sme_ba)) like {employeeName} )
]]>
</statement>

<statement code="WRF_Grid_WithoutStatus_Query">
<![CDATA[
select * from (select 
   grid.release_version ,                            
   grid.req_id,
   c.description,
   grid.amdocs_owner,
   grid.assigned_to,
  to_number(grid.Last_ADB_Est) Last_ADB_Est,
  to_number(grid.work_auth_amt) work_auth_amt,
  grid.General_Status,
  grid.Status,
  grid.project_status,
  to_date(grid.Approved_Date_To_UAT,'YYYY-MM-DD') m8,
  grid.main_application,
  grid.Leading_Func_Area,
  grid.att_Owner,
  grid.Affected_Func_Areas,
  grid.BA_Owner,
  to_date(grid.Date_Scheduled,'YYYY-MM-DD') m5,
  grid.Detected_on_Date m1,
  grid.Amdocs_Pending_Item,
  to_date(grid.DE_Submit_Date,'YYYY-MM-DD') m4,
  grid.Lifecycle_Phase,
  to_date(grid.USR_Deploy_Date,'YYYY-MM-DD') m9, 
  to_date(grid.Work_Auth_Date,'YYYY-MM-DD') Work_Auth_Date,
  grid.Work_Authorized,
  grid.Program,
  to_date(grid.DRD_Approval_Date,'YYYY-MM-DD') m3,
  grid.atti ,
  grid.amdocs_sme_ba,
  to_date(to_char(grid.planned_imp_date,'mm/dd/yyyy'),'mm/dd/yyyy') planned_imp_date,
  grid.cc_impact,
  to_date(to_char(to_date(grid.proj_track_date, 'yyyy-mm-dd'),'mm/dd/yyyy'),'mm/dd/yyyy') proj_track_date,
  grid.m1milestone,
  grid.m2milestone,
  grid.m3milestone,
  grid.m4milestone,
  grid.m5milestone,
  grid.m6milestone,
  grid.m7milestone,
  grid.m8milestone,
  grid.m9milestone,
  grid.m10milestone,
  grid.m11milestone,
  grid.dg1milestone,
  grid.dg2milestone,
  grid.dg3milestone,
  grid.dg4milestone
  from 
(select 
    release_version,                            
   req_id,
    main_application,
    Leading_Func_Area,
   max(amdocs_owner) amdocs_owner,
   max(assigned_to) assigned_to,
  max(Last_ADB_Est) Last_ADB_Est,
  max(work_auth_amt) work_auth_amt,
  max(General_Status) General_Status,
  max(Status) Status,
  max(project_status) project_status,
  max(Approved_Date_To_UAT) Approved_Date_To_UAT,
  max(att_Owner) att_Owner,
  max(Affected_Func_Areas) Affected_Func_Areas,
  max(BA_Owner) BA_Owner,
  max(Date_Scheduled) Date_Scheduled,
  max(Detected_on_Date) Detected_on_Date,
  max(Amdocs_Pending_Item) Amdocs_Pending_Item,
  max(DE_Submit_Date) DE_Submit_Date,
  max(Lifecycle_Phase) Lifecycle_Phase,
  max(USR_Deploy_Date) USR_Deploy_Date, 
  max(Work_Auth_Date) Work_Auth_Date,
  max(Work_Authorized) Work_Authorized,
  max(Program) Program,
  max(DRD_Approval_Date) DRD_Approval_Date,
  max(atti ) atti,
  max(amdocs_sme_ba) amdocs_sme_ba,
  max(planned_imp_date) planned_imp_date,
  max(cc_impact) cc_impact,
  max(proj_track_date) proj_track_date,
max(m1milestone) m1milestone,
max(m2milestone) m2milestone,
max(m3milestone) m3milestone,
max(m4milestone) m4milestone,
max(m5milestone) m5milestone,
max(m6milestone) m6milestone,
max(m7milestone) m7milestone,
max(m8milestone) m8milestone,
max(m9milestone) m9milestone,
max(m10milestone) m10milestone,
max(m11milestone) m11milestone,
max(dg1milestone) dg1milestone,
max(dg2milestone) dg2milestone,
max(dg3milestone) dg3milestone,
max(dg4milestone) dg4milestone
from
(
select 
         release_version,                            
   req_id,
   description,
   amdocs_owner,
   assigned_to,
  Last_ADB_Est,
  work_auth_amt,
   General_Status,
  Status,
  project_status,
  Approved_Date_To_UAT ,
main_application,
  Leading_Func_Area,
  att_Owner,
  Affected_Func_Areas,
  BA_Owner,
  Date_Scheduled,
  Detected_on_Date,
  Amdocs_Pending_Item,
  DE_Submit_Date,
  Lifecycle_Phase,
  USR_Deploy_Date, 
  Work_Auth_Date,
  Work_Authorized,
  Program,
  DRD_Approval_Date,
  atti ,
  amdocs_sme_ba,
  planned_imp_date,
  cc_impact,
  proj_track_date,
case when trim(milestone_code) = 'M1' then release_date else null end  m1milestone,
case when trim(milestone_code) = 'M2' then release_date else null end  m2milestone,
case when trim(milestone_code) = 'M3' then release_date else null end  m3milestone,
case when trim(milestone_code) = 'M4' then release_date else null end  m4milestone,
case when trim(milestone_code) = 'M5' then release_date else null end  m5milestone,
case when trim(milestone_code) = 'M6' then release_date else null end  m6milestone,
case when trim(milestone_code) = 'M7' then release_date else null end  m7milestone,
case when trim(milestone_code) = 'M8' then release_date else null end  m8milestone,
case when trim(milestone_code) = 'M9' then release_date else null end  m9milestone,
case when trim(milestone_code) = 'M10' then release_date else null  end m10milestone,
case when trim(milestone_code) = 'M11' then release_date else null end m11milestone,
case when trim(milestone_code) = 'DG1' then release_date else null end dg1milestone,
case when trim(milestone_code) = 'DG2' then release_date else null end dg2milestone,
case when trim(milestone_code) = 'DG3' then release_date else null end dg3milestone,
case when trim(milestone_code) = 'DG4' then release_date else null end dg4milestone
from
(
select  a.release_version,                            
   req_id,
   description,
   amdocs_owner,
   assigned_to,
  Last_ADB Last_ADB_Est,
  a.work_auth_amt work_auth_amt,
   General_Status,
  Status,
  project_status,
  Approved_Date_To_UAT ,
  main_application main_application,
  Leading_Func_Area,
  att_Owner,
  Affected_Func_Areas,
  BA_Owner,
  Date_Scheduled,
  Detected_on_Date,
  Amdocs_Pending_Item,
  DE_Submit_Date,
  Lifecycle_Phase,
  USR_Deploy_Date, 
  Work_Auth_Date,
  Work_Authorized,
  Program,
  DRD_Approval_Date,
  atti
, milestone_code
, release_date
, amdocs_sme_ba
, work_auth_amt
, planned_imp_date
, cc_impact,
, proj_track_date
from WRF a , release_schedule b
where upper(trim(a.release_version)) = upper(trim(b.release_version))
and (Leading_Func_Area = {leadFuncArea} or {leadFuncArea} = 'All')
and (  main_application  = {mainAppl} or {mainAppl} = 'All') 
and  ( Program  = {program} or {program} = 'All')
and a.release_version not in ('TBD','No CSS Version')
and upper(trim(a.release_version)) in (select  release_version 
from     wrf_release)
)
)
group by release_version,
req_id,
leading_func_area,
main_application
) grid , WRF c
where                        
grid.req_id = c.req_id(+) and
grid.req_id not like 'CR%'
and (upper(trim(grid.req_id)) like {reqId} or upper(trim(description)) like {reqId})
and ( upper(trim(grid.amdocs_owner)) like {employeeName}
or upper(trim(grid.att_owner)) like {employeeName}
or upper(trim(grid.assigned_to)) like {employeeName}
or upper(trim(grid.ba_owner)) like {employeeName} 
or upper(trim(grid.amdocs_sme_ba)) like {employeeName} )
order by
substr(grid.release_version,-3,3), length(grid.release_version),                            
grid.req_id,
grid.Last_ADB_Est,
grid.m1milestone,
grid.m3milestone,
grid.m4milestone,
grid.m5milestone,
grid.m8milestone,
grid.m9milestone)
]]>
</statement>

<statement code="WRF_Grid_Part_Drilldown_Query">
<![CDATA[
select 
   grid.release_version ,                            
   grid.req_id,
   c.description,
   grid.amdocs_owner,
   grid.assigned_to,
  to_number(grid.Last_ADB_Est) Last_ADB_Est,
  to_number(grid.work_auth_amt) work_auth_amt,
  grid.General_Status,
  grid.Status,
  grid.project_status,
  to_date(grid.Approved_Date_To_UAT,'YYYY-MM-DD') m8,
  grid.main_application,
  grid.Leading_Func_Area,
  grid.att_Owner,
  grid.Affected_Func_Areas,
  grid.BA_Owner,
  to_date(grid.Date_Scheduled,'YYYY-MM-DD') m5,
  grid.Detected_on_Date m1,
  grid.Amdocs_Pending_Item,
  to_date(grid.DE_Submit_Date,'YYYY-MM-DD') m4,
  grid.Lifecycle_Phase,
  to_date(grid.USR_Deploy_Date,'YYYY-MM-DD') m9, 
  to_date(grid.Work_Auth_Date,'YYYY-MM-DD') Work_Auth_Date,
  grid.Work_Authorized,
  grid.Program,
  to_date(grid.DRD_Approval_Date,'YYYY-MM-DD') m3,
  grid.atti ,
  grid.amdocs_sme_ba,
  to_date(to_char(grid.planned_imp_date,'mm/dd/yyyy'),'mm/dd/yyyy') planned_imp_date,
  grid.cc_impact,
  to_date(to_char(to_date(grid.proj_track_date, 'yyyy-mm-dd'),'mm/dd/yyyy'),'mm/dd/yyyy') proj_track_date,
  grid.m1milestone,
  grid.m2milestone,
  grid.m3milestone,
  grid.m4milestone,
  grid.m5milestone,
  grid.m6milestone,
  grid.m7milestone,
  grid.m8milestone,
  grid.m9milestone,
  grid.m10milestone,
  grid.m11milestone,
  grid.dg1milestone,
  grid.dg2milestone,
  grid.dg3milestone,
  grid.dg4milestone
  from 
(select 
    release_version,                            
   req_id,
    main_application,
    Leading_Func_Area,
   max(amdocs_owner) amdocs_owner,
   max(assigned_to) assigned_to,
  max(Last_ADB_Est) Last_ADB_Est,
  max(work_auth_amt) work_auth_amt,
  max(General_Status) General_Status,
  max(Status) Status,
  max(project_status) project_status,
  max(Approved_Date_To_UAT) Approved_Date_To_UAT,
  max(att_Owner) att_Owner,
  max(Affected_Func_Areas) Affected_Func_Areas,
  max(BA_Owner) BA_Owner,
  max(Date_Scheduled) Date_Scheduled,
  max(Detected_on_Date) Detected_on_Date,
  max(Amdocs_Pending_Item) Amdocs_Pending_Item,
  max(DE_Submit_Date) DE_Submit_Date,
  max(Lifecycle_Phase) Lifecycle_Phase,
  max(USR_Deploy_Date) USR_Deploy_Date, 
  max(Work_Auth_Date) Work_Auth_Date,
  max(Work_Authorized) Work_Authorized,
  max(Program) Program,
  max(DRD_Approval_Date) DRD_Approval_Date,
  max(atti ) atti,
  max(amdocs_sme_ba) amdocs_sme_ba,
  max(planned_imp_date) planned_imp_date,
  max(cc_impact) cc_impact,
  max(proj_track_date) proj_track_date,
max(m1milestone) m1milestone,
max(m2milestone) m2milestone,
max(m3milestone) m3milestone,
max(m4milestone) m4milestone,
max(m5milestone) m5milestone,
max(m6milestone) m6milestone,
max(m7milestone) m7milestone,
max(m8milestone) m8milestone,
max(m9milestone) m9milestone,
max(m10milestone) m10milestone,
max(m11milestone) m11milestone,
max(dg1milestone) dg1milestone,
max(dg2milestone) dg2milestone,
max(dg3milestone) dg3milestone,
max(dg4milestone) dg4milestone
from
(
select 
         release_version,                            
   req_id,
   description,
   amdocs_owner,
   assigned_to,
  Last_ADB_Est,
  work_auth_amt,
   General_Status,
  Status,
  project_status,
  Approved_Date_To_UAT ,
main_application,
  Leading_Func_Area,
  att_Owner,
  Affected_Func_Areas,
  BA_Owner,
  Date_Scheduled,
  Detected_on_Date,
  Amdocs_Pending_Item,
  DE_Submit_Date,
  Lifecycle_Phase,
  USR_Deploy_Date, 
  Work_Auth_Date,
  Work_Authorized,
  Program,
  DRD_Approval_Date,
  atti ,
  amdocs_sme_ba,
  planned_imp_date,
  cc_impact,
  proj_track_date,
case when trim(milestone_code) = 'M1' then release_date else null end  m1milestone,
case when trim(milestone_code) = 'M2' then release_date else null end  m2milestone,
case when trim(milestone_code) = 'M3' then release_date else null end  m3milestone,
case when trim(milestone_code) = 'M4' then release_date else null end  m4milestone,
case when trim(milestone_code) = 'M5' then release_date else null end  m5milestone,
case when trim(milestone_code) = 'M6' then release_date else null end  m6milestone,
case when trim(milestone_code) = 'M7' then release_date else null end  m7milestone,
case when trim(milestone_code) = 'M8' then release_date else null end  m8milestone,
case when trim(milestone_code) = 'M9' then release_date else null end  m9milestone,
case when trim(milestone_code) = 'M10' then release_date else null  end m10milestone,
case when trim(milestone_code) = 'M11' then release_date else null end m11milestone,
case when trim(milestone_code) = 'DG1' then release_date else null end dg1milestone,
case when trim(milestone_code) = 'DG2' then release_date else null end dg2milestone,
case when trim(milestone_code) = 'DG3' then release_date else null end dg3milestone,
case when trim(milestone_code) = 'DG4' then release_date else null end dg4milestone
from
(
select  a.release_version,                            
   req_id,
   description,
   amdocs_owner,
   assigned_to,
  Last_ADB Last_ADB_Est,
  a.work_auth_amt work_auth_amt,
   General_Status,
  Status,
  project_status,
  Approved_Date_To_UAT ,
  main_application main_application,
  Leading_Func_Area,
  att_Owner,
  Affected_Func_Areas,
  BA_Owner,
  Date_Scheduled,
  Detected_on_Date,
  Amdocs_Pending_Item,
  DE_Submit_Date,
  Lifecycle_Phase,
  USR_Deploy_Date, 
  Work_Auth_Date,
  Work_Authorized,
  Program,
  DRD_Approval_Date,
  atti
, milestone_code
, release_date
, amdocs_sme_ba
, planned_imp_date
, cc_impact
, proj_track_date
from WRF a , release_schedule b
where upper(trim(a.release_version)) = upper(trim(b.release_version))
and (Leading_Func_Area = {leadFuncArea} or {leadFuncArea} = 'All')
and (  main_application  = {mainAppl} or {mainAppl} = 'All') 
and  ( Program  = {program} or {program} = 'All')
and a.release_version not in ('TBD','No CSS Version')
and  upper(trim(a.release_version)) = upper(trim({version}))
and  nvl(work_authorized,'N') = 'P'
and  to_number(a.work_auth_amt) < to_number(a.Last_ADB)
and upper(trim(a.release_version)) in (select  release_version 
from     wrf_release)
)
)
group by release_version,
req_id,
leading_func_area,
main_application
) grid , WRF c
where                         
grid.req_id = c.req_id(+) and
grid.req_id not like 'CR%'
and (upper(trim(grid.req_id)) like {reqId} or upper(trim(description)) like {reqId})
and ( upper(trim(grid.amdocs_owner)) like {employeeName}
or upper(trim(grid.att_owner)) like {employeeName}
or upper(trim(grid.assigned_to)) like {employeeName}
or upper(trim(grid.ba_owner)) like {employeeName} 
or upper(trim(grid.amdocs_sme_ba)) like {employeeName} )
order by
substr(grid.release_version,-3,3), length(grid.release_version),                            
grid.req_id,
grid.Last_ADB_Est,
grid.m1milestone,
grid.m3milestone,
grid.m4milestone,
grid.m5milestone,
grid.m8milestone,
grid.m9milestone
]]>
</statement>

<statement code="WRF_Grid_Part_Combined_Drilldown_Query">
<![CDATA[
select 
   grid.release_version ,                            
   grid.req_id,
   c.description,
   grid.amdocs_owner,
   grid.assigned_to,
  to_number(grid.Last_ADB_Est) Last_ADB_Est,
  to_number(grid.work_auth_amt) work_auth_amt,
  grid.General_Status,
  grid.Status,
  grid.project_status,
  to_date(grid.Approved_Date_To_UAT,'YYYY-MM-DD') m8,
  grid.main_application,
  grid.Leading_Func_Area,
  grid.att_Owner,
  grid.Affected_Func_Areas,
  grid.BA_Owner,
  to_date(grid.Date_Scheduled,'YYYY-MM-DD') m5,
  grid.Detected_on_Date m1,
  grid.Amdocs_Pending_Item,
  to_date(grid.DE_Submit_Date,'YYYY-MM-DD') m4,
  grid.Lifecycle_Phase,
  to_date(grid.USR_Deploy_Date,'YYYY-MM-DD') m9, 
  to_date(grid.Work_Auth_Date,'YYYY-MM-DD') Work_Auth_Date,
  grid.Work_Authorized,
  grid.Program,
  to_date(grid.DRD_Approval_Date,'YYYY-MM-DD') m3,
  grid.atti ,
  grid.amdocs_sme_ba,
  to_date(to_char(grid.planned_imp_date,'mm/dd/yyyy'),'mm/dd/yyyy') planned_imp_date,
  grid.cc_impact,
  to_date(to_char(to_date(grid.proj_track_date, 'yyyy-mm-dd'),'mm/dd/yyyy'),'mm/dd/yyyy') proj_track_date,
  grid.m1milestone,
  grid.m2milestone,
  grid.m3milestone,
  grid.m4milestone,
  grid.m5milestone,
  grid.m6milestone,
  grid.m7milestone,
  grid.m8milestone,
  grid.m9milestone,
  grid.m10milestone,
  grid.m11milestone,
  grid.dg1milestone,
  grid.dg2milestone,
  grid.dg3milestone,
  grid.dg4milestone
  from 
(select 
    release_version,                            
   req_id,
    main_application,
    Leading_Func_Area,
   max(amdocs_owner) amdocs_owner,
   max(assigned_to) assigned_to,
  max(Last_ADB_Est) Last_ADB_Est,
  max(work_auth_amt) work_auth_amt,
  max(General_Status) General_Status,
  max(Status) Status,
  max(project_status) project_status,
  max(Approved_Date_To_UAT) Approved_Date_To_UAT,
  max(att_Owner) att_Owner,
  max(Affected_Func_Areas) Affected_Func_Areas,
  max(BA_Owner) BA_Owner,
  max(Date_Scheduled) Date_Scheduled,
  max(Detected_on_Date) Detected_on_Date,
  max(Amdocs_Pending_Item) Amdocs_Pending_Item,
  max(DE_Submit_Date) DE_Submit_Date,
  max(Lifecycle_Phase) Lifecycle_Phase,
  max(USR_Deploy_Date) USR_Deploy_Date, 
  max(Work_Auth_Date) Work_Auth_Date,
  max(Work_Authorized) Work_Authorized,
  max(Program) Program,
  max(DRD_Approval_Date) DRD_Approval_Date,
  max(atti ) atti,
  max(amdocs_sme_ba) amdocs_sme_ba,
  max(planned_imp_date) planned_imp_date,
  max(cc_impact) cc_impact,
  max(proj_track_date) proj_track_date,
max(m1milestone) m1milestone,
max(m2milestone) m2milestone,
max(m3milestone) m3milestone,
max(m4milestone) m4milestone,
max(m5milestone) m5milestone,
max(m6milestone) m6milestone,
max(m7milestone) m7milestone,
max(m8milestone) m8milestone,
max(m9milestone) m9milestone,
max(m10milestone) m10milestone,
max(m11milestone) m11milestone,
max(dg1milestone) dg1milestone,
max(dg2milestone) dg2milestone,
max(dg3milestone) dg3milestone,
max(dg4milestone) dg4milestone
from
(
select 
         release_version,                            
   req_id,
   description,
   amdocs_owner,
   assigned_to,
  Last_ADB_Est,
  work_auth_amt,
   General_Status,
  Status,
  project_status,
  Approved_Date_To_UAT ,
main_application,
  Leading_Func_Area,
  att_Owner,
  Affected_Func_Areas,
  BA_Owner,
  Date_Scheduled,
  Detected_on_Date,
  Amdocs_Pending_Item,
  DE_Submit_Date,
  Lifecycle_Phase,
  USR_Deploy_Date, 
  Work_Auth_Date,
  Work_Authorized,
  Program,
  DRD_Approval_Date,
  atti ,
  amdocs_sme_ba,
  planned_imp_date,
  cc_impact,
  proj_track_date,
case when trim(milestone_code) = 'M1' then release_date else null end  m1milestone,
case when trim(milestone_code) = 'M2' then release_date else null end  m2milestone,
case when trim(milestone_code) = 'M3' then release_date else null end  m3milestone,
case when trim(milestone_code) = 'M4' then release_date else null end  m4milestone,
case when trim(milestone_code) = 'M5' then release_date else null end  m5milestone,
case when trim(milestone_code) = 'M6' then release_date else null end  m6milestone,
case when trim(milestone_code) = 'M7' then release_date else null end  m7milestone,
case when trim(milestone_code) = 'M8' then release_date else null end  m8milestone,
case when trim(milestone_code) = 'M9' then release_date else null end  m9milestone,
case when trim(milestone_code) = 'M10' then release_date else null  end m10milestone,
case when trim(milestone_code) = 'M11' then release_date else null end m11milestone,
case when trim(milestone_code) = 'DG1' then release_date else null end dg1milestone,
case when trim(milestone_code) = 'DG2' then release_date else null end dg2milestone,
case when trim(milestone_code) = 'DG3' then release_date else null end dg3milestone,
case when trim(milestone_code) = 'DG4' then release_date else null end dg4milestone
from
(
select  a.release_version,                            
   req_id,
   description,
   amdocs_owner,
   assigned_to,
  Last_ADB Last_ADB_Est,
  a.work_auth_amt work_auth_amt,
   General_Status,
  Status,
  project_status,
  Approved_Date_To_UAT ,
  main_application main_application,
  Leading_Func_Area,
  att_Owner,
  Affected_Func_Areas,
  BA_Owner,
  Date_Scheduled,
  Detected_on_Date,
  Amdocs_Pending_Item,
  DE_Submit_Date,
  Lifecycle_Phase,
  USR_Deploy_Date, 
  Work_Auth_Date,
  Work_Authorized,
  Program,
  DRD_Approval_Date,
  atti
, milestone_code
, release_date
, amdocs_sme_ba
, planned_imp_date
, cc_impact
, proj_track_date
from WRF a , release_schedule b
where upper(trim(a.release_version)) = upper(trim(b.release_version))
and (Leading_Func_Area = {leadFuncArea} or {leadFuncArea} = 'All')
and (  main_application  = {mainAppl} or {mainAppl} = 'All') 
and  ( Program  = {program} or {program} = 'All')
and a.release_version not in ('TBD','No CSS Version')
and  a.release_version like {version}
and  nvl(work_authorized,'N') = 'P'
and  to_number(a.work_auth_amt) < to_number(a.Last_ADB)
and upper(trim(a.release_version)) in (select  release_version 
from     wrf_release)
)
)
group by release_version,
req_id,
leading_func_area,
main_application
) grid , WRF c
where                         
grid.req_id = c.req_id(+) and
grid.req_id not like 'CR%'
and (upper(trim(grid.req_id)) like {reqId} or upper(trim(description)) like {reqId})
and ( upper(trim(grid.amdocs_owner)) like {employeeName}
or upper(trim(grid.att_owner)) like {employeeName}
or upper(trim(grid.assigned_to)) like {employeeName}
or upper(trim(grid.ba_owner)) like {employeeName} 
or upper(trim(grid.amdocs_sme_ba)) like {employeeName} )
order by
substr(grid.release_version,-3,3), length(grid.release_version),                            
grid.req_id,
grid.Last_ADB_Est,
grid.m1milestone,
grid.m3milestone,
grid.m4milestone,
grid.m5milestone,
grid.m8milestone,
grid.m9milestone
]]>
</statement>

<statement code="WRF_Grid_Full_Drilldown_Query">
<![CDATA[
select 
   grid.release_version ,                            
   grid.req_id,
   c.description,
   grid.amdocs_owner,
   grid.assigned_to,
  to_number(grid.Last_ADB_Est) Last_ADB_Est,
  to_number(grid.work_auth_amt) work_auth_amt,
  grid.General_Status,
  grid.Status,
  grid.project_status,
  to_date(grid.Approved_Date_To_UAT,'YYYY-MM-DD') m8,
  grid.main_application,
  grid.Leading_Func_Area,
  grid.att_Owner,
  grid.Affected_Func_Areas,
  grid.BA_Owner,
  to_date(grid.Date_Scheduled,'YYYY-MM-DD') m5,
  grid.Detected_on_Date m1,
  grid.Amdocs_Pending_Item,
  to_date(grid.DE_Submit_Date,'YYYY-MM-DD') m4,
  grid.Lifecycle_Phase,
  to_date(grid.USR_Deploy_Date,'YYYY-MM-DD') m9, 
  to_date(grid.Work_Auth_Date,'YYYY-MM-DD') Work_Auth_Date,
  grid.Work_Authorized,
  grid.Program,
  to_date(grid.DRD_Approval_Date,'YYYY-MM-DD') m3,
  grid.atti ,
  grid.amdocs_sme_ba,
  to_date(to_char(grid.planned_imp_date,'mm/dd/yyyy'),'mm/dd/yyyy') planned_imp_date,
  grid.cc_impact,
  to_date(to_char(to_date(grid.proj_track_date, 'yyyy-mm-dd'),'mm/dd/yyyy'),'mm/dd/yyyy') proj_track_date,
  grid.m1milestone,
  grid.m2milestone,
  grid.m3milestone,
  grid.m4milestone,
  grid.m5milestone,
  grid.m6milestone,
  grid.m7milestone,
  grid.m8milestone,
  grid.m9milestone,
  grid.m10milestone,
  grid.m11milestone,
  grid.dg1milestone,
  grid.dg2milestone,
  grid.dg3milestone,
  grid.dg4milestone
  from 
(select 
    release_version,                            
   req_id,
    main_application,
    Leading_Func_Area,
   max(amdocs_owner) amdocs_owner,
   max(assigned_to) assigned_to,
  max(Last_ADB_Est) Last_ADB_Est,
  max(work_auth_amt) work_auth_amt,
  max(General_Status) General_Status,
  max(Status) Status,
  max(Project_Status) Project_Status,
  max(Approved_Date_To_UAT) Approved_Date_To_UAT,
  max(att_Owner) att_Owner,
  max(Affected_Func_Areas) Affected_Func_Areas,
  max(BA_Owner) BA_Owner,
  max(Date_Scheduled) Date_Scheduled,
  max(Detected_on_Date) Detected_on_Date,
  max(Amdocs_Pending_Item) Amdocs_Pending_Item,
  max(DE_Submit_Date) DE_Submit_Date,
  max(Lifecycle_Phase) Lifecycle_Phase,
  max(USR_Deploy_Date) USR_Deploy_Date, 
  max(Work_Auth_Date) Work_Auth_Date,
  max(Work_Authorized) Work_Authorized,
  max(Program) Program,
  max(DRD_Approval_Date) DRD_Approval_Date,
  max(atti ) atti,
  max(amdocs_sme_ba) amdocs_sme_ba,
  max(planned_imp_date) planned_imp_date,
  max(cc_impact) cc_impact,
  max(proj_track_date) proj_track_date,
max(m1milestone) m1milestone,
max(m2milestone) m2milestone,
max(m3milestone) m3milestone,
max(m4milestone) m4milestone,
max(m5milestone) m5milestone,
max(m6milestone) m6milestone,
max(m7milestone) m7milestone,
max(m8milestone) m8milestone,
max(m9milestone) m9milestone,
max(m10milestone) m10milestone,
max(m11milestone) m11milestone,
max(dg1milestone) dg1milestone,
max(dg2milestone) dg2milestone,
max(dg3milestone) dg3milestone,
max(dg4milestone) dg4milestone
from
(
select 
         release_version,                            
   req_id,
   description,
   amdocs_owner,
   assigned_to,
  Last_ADB_Est,
  work_auth_amt,
   General_Status,
  Status,
  Project_Status,
  Approved_Date_To_UAT ,
main_application,
  Leading_Func_Area,
  att_Owner,
  Affected_Func_Areas,
  BA_Owner,
  Date_Scheduled,
  Detected_on_Date,
  Amdocs_Pending_Item,
  DE_Submit_Date,
  Lifecycle_Phase,
  USR_Deploy_Date, 
  Work_Auth_Date,
  Work_Authorized,
  Program,
  DRD_Approval_Date,
  atti ,
  amdocs_sme_ba,
  planned_imp_date,
  cc_impact,
  proj_track_date,
case when trim(milestone_code) = 'M1' then release_date else null end  m1milestone,
case when trim(milestone_code) = 'M2' then release_date else null end  m2milestone,
case when trim(milestone_code) = 'M3' then release_date else null end  m3milestone,
case when trim(milestone_code) = 'M4' then release_date else null end  m4milestone,
case when trim(milestone_code) = 'M5' then release_date else null end  m5milestone,
case when trim(milestone_code) = 'M6' then release_date else null end  m6milestone,
case when trim(milestone_code) = 'M7' then release_date else null end  m7milestone,
case when trim(milestone_code) = 'M8' then release_date else null end  m8milestone,
case when trim(milestone_code) = 'M9' then release_date else null end  m9milestone,
case when trim(milestone_code) = 'M10' then release_date else null  end m10milestone,
case when trim(milestone_code) = 'M11' then release_date else null end m11milestone,
case when trim(milestone_code) = 'DG1' then release_date else null end dg1milestone,
case when trim(milestone_code) = 'DG2' then release_date else null end dg2milestone,
case when trim(milestone_code) = 'DG3' then release_date else null end dg3milestone,
case when trim(milestone_code) = 'DG4' then release_date else null end dg4milestone
from
(
select  a.release_version,                            
   req_id,
   description,
   amdocs_owner,
   assigned_to,
  Last_ADB Last_ADB_Est,
  a.work_auth_amt work_auth_amt,
   General_Status,
  Status,
  Project_Status,
  Approved_Date_To_UAT ,
  main_application main_application,
  Leading_Func_Area,
  att_Owner,
  Affected_Func_Areas,
  BA_Owner,
  Date_Scheduled,
  Detected_on_Date,
  Amdocs_Pending_Item,
  DE_Submit_Date,
  Lifecycle_Phase,
  USR_Deploy_Date, 
  Work_Auth_Date,
  Work_Authorized,
  Program,
  DRD_Approval_Date,
  atti
, milestone_code
, release_date
, amdocs_sme_ba
, planned_imp_date
, cc_impact
, proj_track_date
from WRF a , release_schedule b
where upper(trim(a.release_version)) = upper(trim(b.release_version))
and (Leading_Func_Area = {leadFuncArea} or {leadFuncArea} = 'All')
and (  main_application  = {mainAppl} or {mainAppl} = 'All') 
and  ( Program  = {program} or {program} = 'All')
and a.release_version not in ('TBD','No CSS Version')
and  upper(trim(a.release_version)) = upper(trim({version}))
and  nvl(work_authorized,'N') = 'P'
and  to_number(a.work_auth_amt) = to_number(a.Last_ADB)
and upper(trim(a.release_version)) in (select  release_version 
from     wrf_release)
)
)
group by release_version,
req_id,
leading_func_area,
main_application
) grid , WRF c
where                         
grid.req_id = c.req_id(+) and
grid.req_id not like 'CR%'
and (upper(trim(grid.req_id)) like {reqId} or upper(trim(description)) like {reqId})
and ( upper(trim(grid.amdocs_owner)) like {employeeName}
or upper(trim(grid.att_owner)) like {employeeName}
or upper(trim(grid.assigned_to)) like {employeeName}
or upper(trim(grid.ba_owner)) like {employeeName} 
or upper(trim(grid.amdocs_sme_ba)) like {employeeName} )
order by
substr(grid.release_version,-3,3), length(grid.release_version),                            
grid.req_id,
grid.Last_ADB_Est,
grid.m1milestone,
grid.m3milestone,
grid.m4milestone,
grid.m5milestone,
grid.m8milestone,
grid.m9milestone
]]>
</statement>

<statement code="WRF_Grid_Full_Combined_Drilldown_Query">
<![CDATA[
select 
   grid.release_version ,                            
   grid.req_id,
   c.description,
   grid.amdocs_owner,
   grid.assigned_to,
  to_number(grid.Last_ADB_Est) Last_ADB_Est,
  to_number(grid.work_auth_amt) work_auth_amt,
  grid.General_Status,
  grid.Status,
  grid.Project_Status,
  to_date(grid.Approved_Date_To_UAT,'YYYY-MM-DD') m8,
  grid.main_application,
  grid.Leading_Func_Area,
  grid.att_Owner,
  grid.Affected_Func_Areas,
  grid.BA_Owner,
  to_date(grid.Date_Scheduled,'YYYY-MM-DD') m5,
  grid.Detected_on_Date m1,
  grid.Amdocs_Pending_Item,
  to_date(grid.DE_Submit_Date,'YYYY-MM-DD') m4,
  grid.Lifecycle_Phase,
  to_date(grid.USR_Deploy_Date,'YYYY-MM-DD') m9, 
  to_date(grid.Work_Auth_Date,'YYYY-MM-DD') Work_Auth_Date,
  grid.Work_Authorized,
  grid.Program,
  to_date(grid.DRD_Approval_Date,'YYYY-MM-DD') m3,
  grid.atti ,
  grid.amdocs_sme_ba,
  to_date(to_char(grid.planned_imp_date,'mm/dd/yyyy'),'mm/dd/yyyy') planned_imp_date,
  grid.cc_impact,
  to_date(to_char(to_date(grid.proj_track_date, 'yyyy-mm-dd'),'mm/dd/yyyy'),'mm/dd/yyyy') proj_track_date,
  grid.m1milestone,
  grid.m2milestone,
  grid.m3milestone,
  grid.m4milestone,
  grid.m5milestone,
  grid.m6milestone,
  grid.m7milestone,
  grid.m8milestone,
  grid.m9milestone,
  grid.m10milestone,
  grid.m11milestone,
  grid.dg1milestone,
  grid.dg2milestone,
  grid.dg3milestone,
  grid.dg4milestone
  from 
(select 
    release_version,                            
   req_id,
    main_application,
    Leading_Func_Area,
   max(amdocs_owner) amdocs_owner,
   max(assigned_to) assigned_to,
  max(Last_ADB_Est) Last_ADB_Est,
  max(work_auth_amt) work_auth_amt,
  max(General_Status) General_Status,
  max(Status) Status,
  max(Project_Status) Project_Status,
  max(Approved_Date_To_UAT) Approved_Date_To_UAT,
  max(att_Owner) att_Owner,
  max(Affected_Func_Areas) Affected_Func_Areas,
  max(BA_Owner) BA_Owner,
  max(Date_Scheduled) Date_Scheduled,
  max(Detected_on_Date) Detected_on_Date,
  max(Amdocs_Pending_Item) Amdocs_Pending_Item,
  max(DE_Submit_Date) DE_Submit_Date,
  max(Lifecycle_Phase) Lifecycle_Phase,
  max(USR_Deploy_Date) USR_Deploy_Date, 
  max(Work_Auth_Date) Work_Auth_Date,
  max(Work_Authorized) Work_Authorized,
  max(Program) Program,
  max(DRD_Approval_Date) DRD_Approval_Date,
  max(atti ) atti,
  max(amdocs_sme_ba) amdocs_sme_ba,
  max(planned_imp_date) planned_imp_date,
  max(cc_impact) cc_impact,
  max(proj_track_date) proj_track_date,
max(m1milestone) m1milestone,
max(m2milestone) m2milestone,
max(m3milestone) m3milestone,
max(m4milestone) m4milestone,
max(m5milestone) m5milestone,
max(m6milestone) m6milestone,
max(m7milestone) m7milestone,
max(m8milestone) m8milestone,
max(m9milestone) m9milestone,
max(m10milestone) m10milestone,
max(m11milestone) m11milestone,
max(dg1milestone) dg1milestone,
max(dg2milestone) dg2milestone,
max(dg3milestone) dg3milestone,
max(dg4milestone) dg4milestone
from
(
select 
         release_version,                            
   req_id,
   description,
   amdocs_owner,
   assigned_to,
  Last_ADB_Est,
  work_auth_amt,
   General_Status,
  Status,
  Project_Status,
  Approved_Date_To_UAT ,
main_application,
  Leading_Func_Area,
  att_Owner,
  Affected_Func_Areas,
  BA_Owner,
  Date_Scheduled,
  Detected_on_Date,
  Amdocs_Pending_Item,
  DE_Submit_Date,
  Lifecycle_Phase,
  USR_Deploy_Date, 
  Work_Auth_Date,
  Work_Authorized,
  Program,
  DRD_Approval_Date,
  atti ,
  amdocs_sme_ba ,
  planned_imp_date,
  cc_impact,
  proj_track_date,  
case when trim(milestone_code) = 'M1' then release_date else null end  m1milestone,
case when trim(milestone_code) = 'M2' then release_date else null end  m2milestone,
case when trim(milestone_code) = 'M3' then release_date else null end  m3milestone,
case when trim(milestone_code) = 'M4' then release_date else null end  m4milestone,
case when trim(milestone_code) = 'M5' then release_date else null end  m5milestone,
case when trim(milestone_code) = 'M6' then release_date else null end  m6milestone,
case when trim(milestone_code) = 'M7' then release_date else null end  m7milestone,
case when trim(milestone_code) = 'M8' then release_date else null end  m8milestone,
case when trim(milestone_code) = 'M9' then release_date else null end  m9milestone,
case when trim(milestone_code) = 'M10' then release_date else null  end m10milestone,
case when trim(milestone_code) = 'M11' then release_date else null end m11milestone,
case when trim(milestone_code) = 'DG1' then release_date else null end dg1milestone,
case when trim(milestone_code) = 'DG2' then release_date else null end dg2milestone,
case when trim(milestone_code) = 'DG3' then release_date else null end dg3milestone,
case when trim(milestone_code) = 'DG4' then release_date else null end dg4milestone
from
(
select  a.release_version,                            
   req_id,
   description,
   amdocs_owner,
   assigned_to,
  Last_ADB Last_ADB_Est,
  a.work_auth_amt work_auth_amt,
   General_Status,
  Status,
  Project_Status,
  Approved_Date_To_UAT ,
  main_application main_application,
  Leading_Func_Area,
  att_Owner,
  Affected_Func_Areas,
  BA_Owner,
  Date_Scheduled,
  Detected_on_Date,
  Amdocs_Pending_Item,
  DE_Submit_Date,
  Lifecycle_Phase,
  USR_Deploy_Date, 
  Work_Auth_Date,
  Work_Authorized,
  Program,
  DRD_Approval_Date,
  atti
, milestone_code
, release_date
, amdocs_sme_ba
, planned_imp_date
, cc_impact
, proj_track_date
from WRF a , release_schedule b
where upper(trim(a.release_version)) = upper(trim(b.release_version))
and (Leading_Func_Area = {leadFuncArea} or {leadFuncArea} = 'All')
and (  main_application  = {mainAppl} or {mainAppl} = 'All') 
and  ( Program  = {program} or {program} = 'All')
and a.release_version not in ('TBD','No CSS Version')
and  a.release_version like {version}
and  nvl(work_authorized,'N') = 'P'
and  to_number(a.work_auth_amt) = to_number(a.Last_ADB)
and upper(trim(a.release_version)) in (select  release_version 
from     wrf_release)
)
)
group by release_version,
req_id,
leading_func_area,
main_application
) grid , WRF c
where                         
grid.req_id = c.req_id(+) and
grid.req_id not like 'CR%'
and (upper(trim(grid.req_id)) like {reqId} or upper(trim(description)) like {reqId})
and ( upper(trim(grid.amdocs_owner)) like {employeeName}
or upper(trim(grid.att_owner)) like {employeeName}
or upper(trim(grid.assigned_to)) like {employeeName}
or upper(trim(grid.ba_owner)) like {employeeName} 
or upper(trim(grid.amdocs_sme_ba)) like {employeeName} )
order by
substr(grid.release_version,-3,3), length(grid.release_version),                            
grid.req_id,
grid.Last_ADB_Est,
grid.m1milestone,
grid.m3milestone,
grid.m4milestone,
grid.m5milestone,
grid.m8milestone,
grid.m9milestone
]]>
</statement>

<statement code="WRF_Grid_Prog_Drilldown_Query">
<![CDATA[
select 
   grid.release_version ,                            
   grid.req_id,
   c.description,
   grid.amdocs_owner,
   grid.assigned_to,
  to_number(grid.Last_ADB_Est) Last_ADB_Est,
  grid.General_Status,
  grid.Status,
  grid.Project_Status,
  to_date(grid.Approved_Date_To_UAT,'YYYY-MM-DD') m8,
  grid.main_application,
  grid.Leading_Func_Area,
  grid.att_Owner,
  grid.Affected_Func_Areas,
  grid.BA_Owner,
  to_date(grid.Date_Scheduled,'YYYY-MM-DD') m5,
  grid.Detected_on_Date m1,
  grid.Amdocs_Pending_Item,
  to_date(grid.DE_Submit_Date,'YYYY-MM-DD') m4,
  grid.Lifecycle_Phase,
  to_date(grid.USR_Deploy_Date,'YYYY-MM-DD') m9, 
  to_date(grid.Work_Auth_Date,'YYYY-MM-DD') Work_Auth_Date,
  grid.Work_Authorized,
  grid.Program,
  to_date(grid.DRD_Approval_Date,'YYYY-MM-DD') m3,
  grid.atti ,
  grid.amdocs_sme_ba,
  to_number(grid.work_auth_amt) work_auth_amt,
  to_date(to_char(grid.planned_imp_date,'mm/dd/yyyy'),'mm/dd/yyyy') planned_imp_date,
  grid.cc_impact,
  to_date(to_char(to_date(grid.proj_track_date, 'yyyy-mm-dd'),'mm/dd/yyyy'),'mm/dd/yyyy') proj_track_date,
  grid.m1milestone,
  grid.m2milestone,
  grid.m3milestone,
  grid.m4milestone,
  grid.m5milestone,
  grid.m6milestone,
  grid.m7milestone,
  grid.m8milestone,
  grid.m9milestone,
  grid.m10milestone,
  grid.m11milestone,
  grid.dg1milestone,
  grid.dg2milestone,
  grid.dg3milestone,
  grid.dg4milestone
  from 
(select 
    release_version,                            
   req_id,
    main_application,
    Leading_Func_Area,
   max(amdocs_owner) amdocs_owner,
   max(assigned_to) assigned_to,
  max(Last_ADB_Est) Last_ADB_Est,
  max(General_Status) General_Status,
  max(Status) Status,
  max(Project_Status) Project_Status,
  max(Approved_Date_To_UAT) Approved_Date_To_UAT,
  max(att_Owner) att_Owner,
  max(Affected_Func_Areas) Affected_Func_Areas,
  max(BA_Owner) BA_Owner,
  max(Date_Scheduled) Date_Scheduled,
  max(Detected_on_Date) Detected_on_Date,
  max(Amdocs_Pending_Item) Amdocs_Pending_Item,
  max(DE_Submit_Date) DE_Submit_Date,
  max(Lifecycle_Phase) Lifecycle_Phase,
  max(USR_Deploy_Date) USR_Deploy_Date, 
  max(Work_Auth_Date) Work_Auth_Date,
  max(Work_Authorized) Work_Authorized,
  max(Program) Program,
  max(DRD_Approval_Date) DRD_Approval_Date,
  max(atti ) atti,
  max(amdocs_sme_ba) amdocs_sme_ba,
  max(work_auth_amt) work_auth_amt,
  max(planned_imp_date) planned_imp_date,
  max(cc_impact) cc_impact,
  max(proj_track_date) proj_track_date,
max(m1milestone) m1milestone,
max(m2milestone) m2milestone,
max(m3milestone) m3milestone,
max(m4milestone) m4milestone,
max(m5milestone) m5milestone,
max(m6milestone) m6milestone,
max(m7milestone) m7milestone,
max(m8milestone) m8milestone,
max(m9milestone) m9milestone,
max(m10milestone) m10milestone,
max(m11milestone) m11milestone,
max(dg1milestone) dg1milestone,
max(dg2milestone) dg2milestone,
max(dg3milestone) dg3milestone,
max(dg4milestone) dg4milestone
from
(
select 
         release_version,                            
   req_id,
   description,
   amdocs_owner,
   assigned_to,
  Last_ADB_Est,
   General_Status,
  Status,
  project_status,
  Approved_Date_To_UAT ,
main_application,
  Leading_Func_Area,
  att_Owner,
  Affected_Func_Areas,
  BA_Owner,
  Date_Scheduled,
  Detected_on_Date,
  Amdocs_Pending_Item,
  DE_Submit_Date,
  Lifecycle_Phase,
  USR_Deploy_Date, 
  Work_Auth_Date,
  Work_Authorized,
  Program,
  DRD_Approval_Date,
  atti ,
  amdocs_sme_ba,
  work_auth_amt,
  planned_imp_date,
  cc_impact,
  proj_track_date,
case when trim(milestone_code) = 'M1' then release_date else null end  m1milestone,
case when trim(milestone_code) = 'M2' then release_date else null end  m2milestone,
case when trim(milestone_code) = 'M3' then release_date else null end  m3milestone,
case when trim(milestone_code) = 'M4' then release_date else null end  m4milestone,
case when trim(milestone_code) = 'M5' then release_date else null end  m5milestone,
case when trim(milestone_code) = 'M6' then release_date else null end  m6milestone,
case when trim(milestone_code) = 'M7' then release_date else null end  m7milestone,
case when trim(milestone_code) = 'M8' then release_date else null end  m8milestone,
case when trim(milestone_code) = 'M9' then release_date else null end  m9milestone,
case when trim(milestone_code) = 'M10' then release_date else null  end m10milestone,
case when trim(milestone_code) = 'M11' then release_date else null end m11milestone,
case when trim(milestone_code) = 'DG1' then release_date else null end dg1milestone,
case when trim(milestone_code) = 'DG2' then release_date else null end dg2milestone,
case when trim(milestone_code) = 'DG3' then release_date else null end dg3milestone,
case when trim(milestone_code) = 'DG4' then release_date else null end dg4milestone
from
(
select  a.release_version,                            
   req_id,
   description,
   amdocs_owner,
   assigned_to,
  Last_ADB Last_ADB_Est,
   General_Status,
  Status,
  project_status,
  Approved_Date_To_UAT ,
  main_application main_application,
  Leading_Func_Area,
  att_Owner,
  Affected_Func_Areas,
  BA_Owner,
  Date_Scheduled,
  Detected_on_Date,
  Amdocs_Pending_Item,
  DE_Submit_Date,
  Lifecycle_Phase,
  USR_Deploy_Date, 
  Work_Auth_Date,
  Work_Authorized,
  Program,
  DRD_Approval_Date,
  atti
, milestone_code
, release_date
, amdocs_sme_ba
, work_auth_amt
, planned_imp_date
, cc_impact
, proj_track_date
from WRF a , release_schedule b
where upper(trim(a.release_version)) = upper(trim(b.release_version(+)))
and (Leading_Func_Area = {leadFuncArea} or {leadFuncArea} = 'All')
and (  main_application  = {mainAppl} or {mainAppl} = 'All') 
and  ( trim(substr(program,0,16))  = {program} or {program} = 'All')
and program is not null
and  (nvl(work_authorized,'N') in ({{workAuth}}) or ('All' in ({{workAuth}})))
and ((project_status in {{projectStatus}}) or ('All' in ({{projectStatus}})))
and     a.planned_imp_date between (select add_months(max(planned_imp_date),-13) from wrf) 
							   and (select max(planned_imp_date) from wrf)
/*and upper(trim(a.release_version)) in (select distinct a.release_version from release_schedule a
, (select distinct release_version from release_schedule where trim(milestone_code) = 'M9'  
and release_date = (select min(release_date) from release_schedule where release_date > sysdate and trim(milestone_code) = 'M9' ) ) b
 where substr(a.release_version,-3,3) between substr(b.release_version,-3,3) - 30 and substr(b.release_version,-3,3) +50)*/
)
)
group by release_version,
req_id,
leading_func_area,
main_application
) grid , WRF c
where                         
grid.req_id = c.req_id(+) and
grid.req_id not like 'CR%'
and (upper(trim(grid.req_id)) like {reqId} or upper(trim(description)) like {reqId})
and ( upper(trim(grid.amdocs_owner)) like {employeeName}
or upper(trim(grid.att_owner)) like {employeeName}
or upper(trim(grid.assigned_to)) like {employeeName}
or upper(trim(grid.ba_owner)) like {employeeName} 
or upper(trim(grid.amdocs_sme_ba)) like {employeeName} )
order by
substr(grid.release_version,-3,3), length(grid.release_version),                            
grid.req_id,
grid.Last_ADB_Est,
grid.m1milestone,
grid.m3milestone,
grid.m4milestone,
grid.m5milestone,
grid.m8milestone,
grid.m9milestone
]]>
</statement>

<statement code="WRF_Grid_Prog_Full_Drilldown_Query">
<![CDATA[
select 
   grid.release_version ,                            
   grid.req_id,
   c.description,
   grid.amdocs_owner,
   grid.assigned_to,
  to_number(grid.Last_ADB_Est) Last_ADB_Est,
  to_number(grid.work_auth_amt) work_auth_amt,
  grid.General_Status,
  grid.Status,
  grid.project_status,
  to_date(grid.Approved_Date_To_UAT,'YYYY-MM-DD') m8,
  grid.main_application,
  grid.Leading_Func_Area,
  grid.att_Owner,
  grid.Affected_Func_Areas,
  grid.BA_Owner,
  to_date(grid.Date_Scheduled,'YYYY-MM-DD') m5,
  grid.Detected_on_Date m1,
  grid.Amdocs_Pending_Item,
  to_date(grid.DE_Submit_Date,'YYYY-MM-DD') m4,
  grid.Lifecycle_Phase,
  to_date(grid.USR_Deploy_Date,'YYYY-MM-DD') m9, 
  to_date(grid.Work_Auth_Date,'YYYY-MM-DD') Work_Auth_Date,
  grid.Work_Authorized,
  grid.Program,
  to_date(grid.DRD_Approval_Date,'YYYY-MM-DD') m3,
  grid.atti ,
  grid.amdocs_sme_ba,
  to_date(to_char(grid.planned_imp_date,'mm/dd/yyyy'),'mm/dd/yyyy') planned_imp_date,
  grid.cc_impact,
  to_date(to_char(to_date(grid.proj_track_date, 'yyyy-mm-dd'),'mm/dd/yyyy'),'mm/dd/yyyy') proj_track_date,
  grid.m1milestone,
  grid.m2milestone,
  grid.m3milestone,
  grid.m4milestone,
  grid.m5milestone,
  grid.m6milestone,
  grid.m7milestone,
  grid.m8milestone,
  grid.m9milestone,
  grid.m10milestone,
  grid.m11milestone,
  grid.dg1milestone,
  grid.dg2milestone,
  grid.dg3milestone,
  grid.dg4milestone
  from 
(select 
    release_version,                            
   req_id,
    main_application,
    Leading_Func_Area,
   max(amdocs_owner) amdocs_owner,
   max(assigned_to) assigned_to,
  max(Last_ADB_Est) Last_ADB_Est,
  max(work_auth_amt) work_auth_amt,
  max(General_Status) General_Status,
  max(Status) Status,
  max(Project_Status) Project_Status,
  max(Approved_Date_To_UAT) Approved_Date_To_UAT,
  max(att_Owner) att_Owner,
  max(Affected_Func_Areas) Affected_Func_Areas,
  max(BA_Owner) BA_Owner,
  max(Date_Scheduled) Date_Scheduled,
  max(Detected_on_Date) Detected_on_Date,
  max(Amdocs_Pending_Item) Amdocs_Pending_Item,
  max(DE_Submit_Date) DE_Submit_Date,
  max(Lifecycle_Phase) Lifecycle_Phase,
  max(USR_Deploy_Date) USR_Deploy_Date, 
  max(Work_Auth_Date) Work_Auth_Date,
  max(Work_Authorized) Work_Authorized,
  max(Program) Program,
  max(DRD_Approval_Date) DRD_Approval_Date,
  max(atti ) atti,
  max(amdocs_sme_ba) amdocs_sme_ba,
  max(planned_imp_date) planned_imp_date,
  max(cc_impact) cc_impact,
  max(proj_track_date) proj_track_date,
max(m1milestone) m1milestone,
max(m2milestone) m2milestone,
max(m3milestone) m3milestone,
max(m4milestone) m4milestone,
max(m5milestone) m5milestone,
max(m6milestone) m6milestone,
max(m7milestone) m7milestone,
max(m8milestone) m8milestone,
max(m9milestone) m9milestone,
max(m10milestone) m10milestone,
max(m11milestone) m11milestone,
max(dg1milestone) dg1milestone,
max(dg2milestone) dg2milestone,
max(dg3milestone) dg3milestone,
max(dg4milestone) dg4milestone
from
(
select 
         release_version,                            
   req_id,
   description,
   amdocs_owner,
   assigned_to,
  Last_ADB_Est,
  work_auth_amt,
   General_Status,
  Status,
  Project_Status,
  Approved_Date_To_UAT ,
main_application,
  Leading_Func_Area,
  att_Owner,
  Affected_Func_Areas,
  BA_Owner,
  Date_Scheduled,
  Detected_on_Date,
  Amdocs_Pending_Item,
  DE_Submit_Date,
  Lifecycle_Phase,
  USR_Deploy_Date, 
  Work_Auth_Date,
  Work_Authorized,
  Program,
  DRD_Approval_Date,
  atti ,
  amdocs_sme_ba,
  planned_imp_date,
  cc_impact,
  proj_track_date,
case when trim(milestone_code) = 'M1' then release_date else null end  m1milestone,
case when trim(milestone_code) = 'M2' then release_date else null end  m2milestone,
case when trim(milestone_code) = 'M3' then release_date else null end  m3milestone,
case when trim(milestone_code) = 'M4' then release_date else null end  m4milestone,
case when trim(milestone_code) = 'M5' then release_date else null end  m5milestone,
case when trim(milestone_code) = 'M6' then release_date else null end  m6milestone,
case when trim(milestone_code) = 'M7' then release_date else null end  m7milestone,
case when trim(milestone_code) = 'M8' then release_date else null end  m8milestone,
case when trim(milestone_code) = 'M9' then release_date else null end  m9milestone,
case when trim(milestone_code) = 'M10' then release_date else null  end m10milestone,
case when trim(milestone_code) = 'M11' then release_date else null end m11milestone,
case when trim(milestone_code) = 'DG1' then release_date else null end dg1milestone,
case when trim(milestone_code) = 'DG2' then release_date else null end dg2milestone,
case when trim(milestone_code) = 'DG3' then release_date else null end dg3milestone,
case when trim(milestone_code) = 'DG4' then release_date else null end dg4milestone
from
(
select  a.release_version,                            
   req_id,
   description,
   amdocs_owner,
   assigned_to,
  Last_ADB Last_ADB_Est,
  a.work_auth_amt work_auth_amt,
   General_Status,
  Status,
  Project_Status,
  Approved_Date_To_UAT ,
  main_application main_application,
  Leading_Func_Area,
  att_Owner,
  Affected_Func_Areas,
  BA_Owner,
  Date_Scheduled,
  Detected_on_Date,
  Amdocs_Pending_Item,
  DE_Submit_Date,
  Lifecycle_Phase,
  USR_Deploy_Date, 
  Work_Auth_Date,
  Work_Authorized,
  Program,
  DRD_Approval_Date,
  atti
, milestone_code
, release_date
, amdocs_sme_ba
, planned_imp_date
, cc_impact
, proj_track_date
from WRF a , release_schedule b
where upper(trim(a.release_version)) = upper(trim(b.release_version(+)))
and (Leading_Func_Area = {leadFuncArea} or {leadFuncArea} = 'All')
and (  main_application  = {mainAppl} or {mainAppl} = 'All') 
and  ( trim(substr(program,0,16))  = {program} or {program} = 'All')
and program is not null
--and a.release_version not in ('TBD','No CSS Version')
and     a.planned_imp_date between (select add_months(max(planned_imp_date),-13) from wrf) 
                               and (select max(planned_imp_date) from wrf)
and  nvl(work_authorized,'N') = 'P'
and  to_number(a.work_auth_amt) = to_number(a.Last_ADB)
/*and upper(trim(a.release_version)) in (select distinct a.release_version from release_schedule a
, (select distinct release_version from release_schedule where trim(milestone_code) = 'M9'  
and release_date = (select min(release_date) from release_schedule where release_date > sysdate and trim(milestone_code) = 'M9' ) ) b
 where substr(a.release_version,-3,3) between substr(b.release_version,-3,3) - 30 and substr(b.release_version,-3,3) +50)*/
)
)
group by release_version,
req_id,
leading_func_area,
main_application
) grid , WRF c
where                         
grid.req_id = c.req_id(+) and
grid.req_id not like 'CR%'
and (upper(trim(grid.req_id)) like {reqId} or upper(trim(description)) like {reqId})
and ( upper(trim(grid.amdocs_owner)) like {employeeName}
or upper(trim(grid.att_owner)) like {employeeName}
or upper(trim(grid.assigned_to)) like {employeeName}
or upper(trim(grid.ba_owner)) like {employeeName} 
or upper(trim(grid.amdocs_sme_ba)) like {employeeName} )
order by
substr(grid.release_version,-3,3), length(grid.release_version),                            
grid.req_id,
grid.Last_ADB_Est,
grid.m1milestone,
grid.m3milestone,
grid.m4milestone,
grid.m5milestone,
grid.m8milestone,
grid.m9milestone
]]>
</statement>

<statement code="WRF_Grid_Prog_Part_Drilldown_Query">
<![CDATA[
select 
   grid.release_version ,                            
   grid.req_id,
   c.description,
   grid.amdocs_owner,
   grid.assigned_to,
  to_number(grid.Last_ADB_Est) Last_ADB_Est,
  to_number(grid.work_auth_amt) work_auth_amt,
  grid.General_Status,
  grid.Status,
  grid.project_status,
  to_date(grid.Approved_Date_To_UAT,'YYYY-MM-DD') m8,
  grid.main_application,
  grid.Leading_Func_Area,
  grid.att_Owner,
  grid.Affected_Func_Areas,
  grid.BA_Owner,
  to_date(grid.Date_Scheduled,'YYYY-MM-DD') m5,
  grid.Detected_on_Date m1,
  grid.Amdocs_Pending_Item,
  to_date(grid.DE_Submit_Date,'YYYY-MM-DD') m4,
  grid.Lifecycle_Phase,
  to_date(grid.USR_Deploy_Date,'YYYY-MM-DD') m9, 
  to_date(grid.Work_Auth_Date,'YYYY-MM-DD') Work_Auth_Date,
  grid.Work_Authorized,
  grid.Program,
  to_date(grid.DRD_Approval_Date,'YYYY-MM-DD') m3,
  grid.atti ,
  grid.amdocs_sme_ba,
  to_date(to_char(grid.planned_imp_date,'mm/dd/yyyy'),'mm/dd/yyyy') planned_imp_date,
  grid.cc_impact,
  to_date(to_char(to_date(grid.proj_track_date, 'yyyy-mm-dd'),'mm/dd/yyyy'),'mm/dd/yyyy') proj_track_date,
  grid.m1milestone,
  grid.m2milestone,
  grid.m3milestone,
  grid.m4milestone,
  grid.m5milestone,
  grid.m6milestone,
  grid.m7milestone,
  grid.m8milestone,
  grid.m9milestone,
  grid.m10milestone,
  grid.m11milestone,
  grid.dg1milestone,
  grid.dg2milestone,
  grid.dg3milestone,
  grid.dg4milestone
  from 
(select 
    release_version,                            
   req_id,
    main_application,
    Leading_Func_Area,
   max(amdocs_owner) amdocs_owner,
   max(assigned_to) assigned_to,
  max(Last_ADB_Est) Last_ADB_Est,
  max(work_auth_amt) work_auth_amt,
  max(General_Status) General_Status,
  max(Status) Status,
  max(project_status) project_status,
  max(Approved_Date_To_UAT) Approved_Date_To_UAT,
  max(att_Owner) att_Owner,
  max(Affected_Func_Areas) Affected_Func_Areas,
  max(BA_Owner) BA_Owner,
  max(Date_Scheduled) Date_Scheduled,
  max(Detected_on_Date) Detected_on_Date,
  max(Amdocs_Pending_Item) Amdocs_Pending_Item,
  max(DE_Submit_Date) DE_Submit_Date,
  max(Lifecycle_Phase) Lifecycle_Phase,
  max(USR_Deploy_Date) USR_Deploy_Date, 
  max(Work_Auth_Date) Work_Auth_Date,
  max(Work_Authorized) Work_Authorized,
  max(Program) Program,
  max(DRD_Approval_Date) DRD_Approval_Date,
  max(atti ) atti,
  max(amdocs_sme_ba) amdocs_sme_ba,
  max(planned_imp_date) planned_imp_date,
  max(cc_impact) cc_impact,
  max(proj_track_date) proj_track_date,
max(m1milestone) m1milestone,
max(m2milestone) m2milestone,
max(m3milestone) m3milestone,
max(m4milestone) m4milestone,
max(m5milestone) m5milestone,
max(m6milestone) m6milestone,
max(m7milestone) m7milestone,
max(m8milestone) m8milestone,
max(m9milestone) m9milestone,
max(m10milestone) m10milestone,
max(m11milestone) m11milestone,
max(dg1milestone) dg1milestone,
max(dg2milestone) dg2milestone,
max(dg3milestone) dg3milestone,
max(dg4milestone) dg4milestone
from
(
select 
         release_version,                            
   req_id,
   description,
   amdocs_owner,
   assigned_to,
  Last_ADB_Est,
  work_auth_amt,
   General_Status,
  Status,
  project_status,
  Approved_Date_To_UAT ,
main_application,
  Leading_Func_Area,
  att_Owner,
  Affected_Func_Areas,
  BA_Owner,
  Date_Scheduled,
  Detected_on_Date,
  Amdocs_Pending_Item,
  DE_Submit_Date,
  Lifecycle_Phase,
  USR_Deploy_Date, 
  Work_Auth_Date,
  Work_Authorized,
  Program,
  DRD_Approval_Date,
  atti ,
  amdocs_sme_ba,
  planned_imp_date,
  cc_impact,
  proj_track_date,
case when trim(milestone_code) = 'M1' then release_date else null end  m1milestone,
case when trim(milestone_code) = 'M2' then release_date else null end  m2milestone,
case when trim(milestone_code) = 'M3' then release_date else null end  m3milestone,
case when trim(milestone_code) = 'M4' then release_date else null end  m4milestone,
case when trim(milestone_code) = 'M5' then release_date else null end  m5milestone,
case when trim(milestone_code) = 'M6' then release_date else null end  m6milestone,
case when trim(milestone_code) = 'M7' then release_date else null end  m7milestone,
case when trim(milestone_code) = 'M8' then release_date else null end  m8milestone,
case when trim(milestone_code) = 'M9' then release_date else null end  m9milestone,
case when trim(milestone_code) = 'M10' then release_date else null  end m10milestone,
case when trim(milestone_code) = 'M11' then release_date else null end m11milestone,
case when trim(milestone_code) = 'DG1' then release_date else null end dg1milestone,
case when trim(milestone_code) = 'DG2' then release_date else null end dg2milestone,
case when trim(milestone_code) = 'DG3' then release_date else null end dg3milestone,
case when trim(milestone_code) = 'DG4' then release_date else null end dg4milestone
from
(
select  a.release_version,                            
   req_id,
   description,
   amdocs_owner,
   assigned_to,
  Last_ADB Last_ADB_Est,
  a.work_auth_amt work_auth_amt,
   General_Status,
  Status,
  project_status,
  Approved_Date_To_UAT ,
  main_application main_application,
  Leading_Func_Area,
  att_Owner,
  Affected_Func_Areas,
  BA_Owner,
  Date_Scheduled,
  Detected_on_Date,
  Amdocs_Pending_Item,
  DE_Submit_Date,
  Lifecycle_Phase,
  USR_Deploy_Date, 
  Work_Auth_Date,
  Work_Authorized,
  Program,
  DRD_Approval_Date,
  atti
, milestone_code
, release_date
, amdocs_sme_ba
, planned_imp_date
, cc_impact
, proj_track_date
from WRF a , release_schedule b
where upper(trim(a.release_version)) = upper(trim(b.release_version(+)))
and (Leading_Func_Area = {leadFuncArea} or {leadFuncArea} = 'All')
and (  main_application  = {mainAppl} or {mainAppl} = 'All') 
and  ( trim(substr(program,0,16))  = {program} or {program} = 'All')
and program is not null
and     a.planned_imp_date between (select add_months(max(planned_imp_date),-13) from wrf) 
                               and (select max(planned_imp_date) from wrf)
--and a.release_version not in ('TBD','No CSS Version')
and  nvl(work_authorized,'N') = 'P'
and  to_number(a.work_auth_amt) < to_number(a.Last_ADB)
/*and upper(trim(a.release_version)) in (select distinct a.release_version from release_schedule a
, (select distinct release_version from release_schedule where trim(milestone_code) = 'M9'  
and release_date = (select min(release_date) from release_schedule where release_date > sysdate and trim(milestone_code) = 'M9' ) ) b
 where substr(a.release_version,-3,3) between substr(b.release_version,-3,3) - 30 and substr(b.release_version,-3,3) +50)*/
)
)
group by release_version,
req_id,
leading_func_area,
main_application
) grid , WRF c
where                         
grid.req_id = c.req_id(+) and
grid.req_id not like 'CR%'
and (upper(trim(grid.req_id)) like {reqId} or upper(trim(description)) like {reqId})
and ( upper(trim(grid.amdocs_owner)) like {employeeName}
or upper(trim(grid.att_owner)) like {employeeName}
or upper(trim(grid.assigned_to)) like {employeeName}
or upper(trim(grid.ba_owner)) like {employeeName} 
or upper(trim(grid.amdocs_sme_ba)) like {employeeName} )
order by
substr(grid.release_version,-3,3), length(grid.release_version),                            
grid.req_id,
grid.Last_ADB_Est,
grid.m1milestone,
grid.m3milestone,
grid.m4milestone,
grid.m5milestone,
grid.m8milestone,
grid.m9milestone
]]>
</statement>
<statement code="WRF_Grid_Month_Drilldown_Query">
<![CDATA[
select 
   grid.release_version ,                            
   grid.req_id,
   c.description,
   grid.amdocs_owner,
   grid.assigned_to,
  to_number(grid.Last_ADB_Est) Last_ADB_Est,
  grid.General_Status,
  grid.Status,
  grid.Project_Status,
  to_date(grid.Approved_Date_To_UAT,'YYYY-MM-DD') m8,
  grid.main_application,
  grid.Leading_Func_Area,
  grid.att_Owner,
  grid.Affected_Func_Areas,
  grid.BA_Owner,
  to_date(grid.Date_Scheduled,'YYYY-MM-DD') m5,
  grid.Detected_on_Date m1,
  grid.Amdocs_Pending_Item,
  to_date(grid.DE_Submit_Date,'YYYY-MM-DD') m4,
  grid.Lifecycle_Phase,
  to_date(grid.USR_Deploy_Date,'YYYY-MM-DD') m9, 
  to_date(grid.Work_Auth_Date,'YYYY-MM-DD') Work_Auth_Date,
  grid.Work_Authorized,
  grid.Program,
  to_date(grid.DRD_Approval_Date,'YYYY-MM-DD') m3,
  grid.atti ,
  grid.amdocs_sme_ba,
  to_number(grid.work_auth_amt) work_auth_amt,
  to_date(to_char(grid.planned_imp_date,'mm/dd/yyyy'),'mm/dd/yyyy') planned_imp_date,
  grid.cc_impact,
  to_date(to_char(to_date(grid.proj_track_date, 'yyyy-mm-dd'),'mm/dd/yyyy'),'mm/dd/yyyy') proj_track_date,
  grid.m1milestone,
  grid.m2milestone,
  grid.m3milestone,
  grid.m4milestone,
  grid.m5milestone,
  grid.m6milestone,
  grid.m7milestone,
  grid.m8milestone,
  grid.m9milestone,
  grid.m10milestone,
  grid.m11milestone,
  grid.dg1milestone,
  grid.dg2milestone,
  grid.dg3milestone,
  grid.dg4milestone
  from 
(select 
    release_version,                            
   req_id,
    main_application,
    Leading_Func_Area,
   max(amdocs_owner) amdocs_owner,
   max(assigned_to) assigned_to,
  max(Last_ADB_Est) Last_ADB_Est,
  max(General_Status) General_Status,
  max(Status) Status,
  max(Project_Status) Project_Status,
  max(Approved_Date_To_UAT) Approved_Date_To_UAT,
  max(att_Owner) att_Owner,
  max(Affected_Func_Areas) Affected_Func_Areas,
  max(BA_Owner) BA_Owner,
  max(Date_Scheduled) Date_Scheduled,
  max(Detected_on_Date) Detected_on_Date,
  max(Amdocs_Pending_Item) Amdocs_Pending_Item,
  max(DE_Submit_Date) DE_Submit_Date,
  max(Lifecycle_Phase) Lifecycle_Phase,
  max(USR_Deploy_Date) USR_Deploy_Date, 
  max(Work_Auth_Date) Work_Auth_Date,
  max(Work_Authorized) Work_Authorized,
  max(Program) Program,
  max(DRD_Approval_Date) DRD_Approval_Date,
  max(atti ) atti,
  max(amdocs_sme_ba) amdocs_sme_ba,
  max(work_auth_amt) work_auth_amt,
  max(planned_imp_date) planned_imp_date,
  max(cc_impact) cc_impact,
  max(proj_track_date) proj_track_date,
max(m1milestone) m1milestone,
max(m2milestone) m2milestone,
max(m3milestone) m3milestone,
max(m4milestone) m4milestone,
max(m5milestone) m5milestone,
max(m6milestone) m6milestone,
max(m7milestone) m7milestone,
max(m8milestone) m8milestone,
max(m9milestone) m9milestone,
max(m10milestone) m10milestone,
max(m11milestone) m11milestone,
max(dg1milestone) dg1milestone,
max(dg2milestone) dg2milestone,
max(dg3milestone) dg3milestone,
max(dg4milestone) dg4milestone
from
(
select 
         release_version,                            
   req_id,
   description,
   amdocs_owner,
   assigned_to,
  Last_ADB_Est,
   General_Status,
  Status,
  project_status,
  Approved_Date_To_UAT ,
main_application,
  Leading_Func_Area,
  att_Owner,
  Affected_Func_Areas,
  BA_Owner,
  Date_Scheduled,
  Detected_on_Date,
  Amdocs_Pending_Item,
  DE_Submit_Date,
  Lifecycle_Phase,
  USR_Deploy_Date, 
  Work_Auth_Date,
  Work_Authorized,
  Program,
  DRD_Approval_Date,
  atti ,
  amdocs_sme_ba,
  work_auth_amt,
  planned_imp_date,
  cc_impact,
  proj_track_date,
case when trim(milestone_code) = 'M1' then release_date else null end  m1milestone,
case when trim(milestone_code) = 'M2' then release_date else null end  m2milestone,
case when trim(milestone_code) = 'M3' then release_date else null end  m3milestone,
case when trim(milestone_code) = 'M4' then release_date else null end  m4milestone,
case when trim(milestone_code) = 'M5' then release_date else null end  m5milestone,
case when trim(milestone_code) = 'M6' then release_date else null end  m6milestone,
case when trim(milestone_code) = 'M7' then release_date else null end  m7milestone,
case when trim(milestone_code) = 'M8' then release_date else null end  m8milestone,
case when trim(milestone_code) = 'M9' then release_date else null end  m9milestone,
case when trim(milestone_code) = 'M10' then release_date else null  end m10milestone,
case when trim(milestone_code) = 'M11' then release_date else null end m11milestone,
case when trim(milestone_code) = 'DG1' then release_date else null end dg1milestone,
case when trim(milestone_code) = 'DG2' then release_date else null end dg2milestone,
case when trim(milestone_code) = 'DG3' then release_date else null end dg3milestone,
case when trim(milestone_code) = 'DG4' then release_date else null end dg4milestone
from
(
select  a.release_version,                            
   req_id,
   description,
   amdocs_owner,
   assigned_to,
  Last_ADB Last_ADB_Est,
   General_Status,
  Status,
  project_status,
  Approved_Date_To_UAT ,
  main_application main_application,
  Leading_Func_Area,
  att_Owner,
  Affected_Func_Areas,
  BA_Owner,
  Date_Scheduled,
  Detected_on_Date,
  Amdocs_Pending_Item,
  DE_Submit_Date,
  Lifecycle_Phase,
  USR_Deploy_Date, 
  Work_Auth_Date,
  Work_Authorized,
  Program,
  DRD_Approval_Date,
  atti
, milestone_code
, release_date
, amdocs_sme_ba
, work_auth_amt
, planned_imp_date
, cc_impact
, proj_track_date
from WRF a , release_schedule b
where upper(trim(a.release_version)) = upper(trim(b.release_version(+)))
and (Leading_Func_Area = {leadFuncArea} or {leadFuncArea} = 'All')
and (  main_application  = {mainAppl} or {mainAppl} = 'All') 
and  ( trim(substr(program,0,16))  = {program} or {program} = 'All')
and (to_char(a.planned_imp_date,'mm/yyyy') = {month})
and     a.planned_imp_date is not null
and     a.planned_imp_date between (select add_months(max(planned_imp_date),-13) from wrf) 
                               and (select max(planned_imp_date) from wrf)
and  (nvl(work_authorized,'N') in ({{workAuth}}) or ('All' in ({{workAuth}})))
and ((project_status in {{projectStatus}}) or ('All' in ({{projectStatus}})))
/*and upper(trim(a.release_version)) in (select distinct a.release_version from release_schedule a
, (select distinct release_version from release_schedule where trim(milestone_code) = 'M9'  
and release_date = (select min(release_date) from release_schedule where release_date > sysdate and trim(milestone_code) = 'M9' ) ) b
 where substr(a.release_version,-3,3) between substr(b.release_version,-3,3) - 30 and substr(b.release_version,-3,3) +50)*/
)
)
group by release_version,
req_id,
leading_func_area,
main_application
) grid , WRF c
where                         
grid.req_id = c.req_id(+) and
grid.req_id not like 'CR%'
and (upper(trim(grid.req_id)) like {reqId} or upper(trim(description)) like {reqId})
and ( upper(trim(grid.amdocs_owner)) like {employeeName}
or upper(trim(grid.att_owner)) like {employeeName}
or upper(trim(grid.assigned_to)) like {employeeName}
or upper(trim(grid.ba_owner)) like {employeeName} 
or upper(trim(grid.amdocs_sme_ba)) like {employeeName} )
order by
substr(grid.release_version,-3,3), length(grid.release_version),                            
grid.req_id,
grid.Last_ADB_Est,
grid.m1milestone,
grid.m3milestone,
grid.m4milestone,
grid.m5milestone,
grid.m8milestone,
grid.m9milestone
]]>
</statement>

<statement code="WRF_Grid_Month_Full_Drilldown_Query">
<![CDATA[
select 
   grid.release_version ,                            
   grid.req_id,
   c.description,
   grid.amdocs_owner,
   grid.assigned_to,
  to_number(grid.Last_ADB_Est) Last_ADB_Est,
  to_number(grid.work_auth_amt) work_auth_amt,
  grid.General_Status,
  grid.Status,
  grid.project_status,
  to_date(grid.Approved_Date_To_UAT,'YYYY-MM-DD') m8,
  grid.main_application,
  grid.Leading_Func_Area,
  grid.att_Owner,
  grid.Affected_Func_Areas,
  grid.BA_Owner,
  to_date(grid.Date_Scheduled,'YYYY-MM-DD') m5,
  grid.Detected_on_Date m1,
  grid.Amdocs_Pending_Item,
  to_date(grid.DE_Submit_Date,'YYYY-MM-DD') m4,
  grid.Lifecycle_Phase,
  to_date(grid.USR_Deploy_Date,'YYYY-MM-DD') m9, 
  to_date(grid.Work_Auth_Date,'YYYY-MM-DD') Work_Auth_Date,
  grid.Work_Authorized,
  grid.Program,
  to_date(grid.DRD_Approval_Date,'YYYY-MM-DD') m3,
  grid.atti ,
  grid.amdocs_sme_ba,
  to_date(to_char(grid.planned_imp_date,'mm/dd/yyyy'),'mm/dd/yyyy') planned_imp_date,
  grid.cc_impact,
  to_date(to_char(to_date(grid.proj_track_date, 'yyyy-mm-dd'),'mm/dd/yyyy'),'mm/dd/yyyy') proj_track_date,
  grid.m1milestone,
  grid.m2milestone,
  grid.m3milestone,
  grid.m4milestone,
  grid.m5milestone,
  grid.m6milestone,
  grid.m7milestone,
  grid.m8milestone,
  grid.m9milestone,
  grid.m10milestone,
  grid.m11milestone,
  grid.dg1milestone,
  grid.dg2milestone,
  grid.dg3milestone,
  grid.dg4milestone
  from 
(select 
    release_version,                            
   req_id,
    main_application,
    Leading_Func_Area,
   max(amdocs_owner) amdocs_owner,
   max(assigned_to) assigned_to,
  max(Last_ADB_Est) Last_ADB_Est,
  max(work_auth_amt) work_auth_amt,
  max(General_Status) General_Status,
  max(Status) Status,
  max(Project_Status) Project_Status,
  max(Approved_Date_To_UAT) Approved_Date_To_UAT,
  max(att_Owner) att_Owner,
  max(Affected_Func_Areas) Affected_Func_Areas,
  max(BA_Owner) BA_Owner,
  max(Date_Scheduled) Date_Scheduled,
  max(Detected_on_Date) Detected_on_Date,
  max(Amdocs_Pending_Item) Amdocs_Pending_Item,
  max(DE_Submit_Date) DE_Submit_Date,
  max(Lifecycle_Phase) Lifecycle_Phase,
  max(USR_Deploy_Date) USR_Deploy_Date, 
  max(Work_Auth_Date) Work_Auth_Date,
  max(Work_Authorized) Work_Authorized,
  max(Program) Program,
  max(DRD_Approval_Date) DRD_Approval_Date,
  max(atti ) atti,
  max(amdocs_sme_ba) amdocs_sme_ba,
  max(planned_imp_date) planned_imp_date,
  max(cc_impact) cc_impact,
  max(proj_track_date) proj_track_date,
max(m1milestone) m1milestone,
max(m2milestone) m2milestone,
max(m3milestone) m3milestone,
max(m4milestone) m4milestone,
max(m5milestone) m5milestone,
max(m6milestone) m6milestone,
max(m7milestone) m7milestone,
max(m8milestone) m8milestone,
max(m9milestone) m9milestone,
max(m10milestone) m10milestone,
max(m11milestone) m11milestone,
max(dg1milestone) dg1milestone,
max(dg2milestone) dg2milestone,
max(dg3milestone) dg3milestone,
max(dg4milestone) dg4milestone
from
(
select 
         release_version,                            
   req_id,
   description,
   amdocs_owner,
   assigned_to,
  Last_ADB_Est,
  work_auth_amt,
   General_Status,
  Status,
  Project_Status,
  Approved_Date_To_UAT ,
main_application,
  Leading_Func_Area,
  att_Owner,
  Affected_Func_Areas,
  BA_Owner,
  Date_Scheduled,
  Detected_on_Date,
  Amdocs_Pending_Item,
  DE_Submit_Date,
  Lifecycle_Phase,
  USR_Deploy_Date, 
  Work_Auth_Date,
  Work_Authorized,
  Program,
  DRD_Approval_Date,
  atti ,
  amdocs_sme_ba,
  planned_imp_date,
  cc_impact,
  proj_track_date,
case when trim(milestone_code) = 'M1' then release_date else null end  m1milestone,
case when trim(milestone_code) = 'M2' then release_date else null end  m2milestone,
case when trim(milestone_code) = 'M3' then release_date else null end  m3milestone,
case when trim(milestone_code) = 'M4' then release_date else null end  m4milestone,
case when trim(milestone_code) = 'M5' then release_date else null end  m5milestone,
case when trim(milestone_code) = 'M6' then release_date else null end  m6milestone,
case when trim(milestone_code) = 'M7' then release_date else null end  m7milestone,
case when trim(milestone_code) = 'M8' then release_date else null end  m8milestone,
case when trim(milestone_code) = 'M9' then release_date else null end  m9milestone,
case when trim(milestone_code) = 'M10' then release_date else null  end m10milestone,
case when trim(milestone_code) = 'M11' then release_date else null end m11milestone,
case when trim(milestone_code) = 'DG1' then release_date else null end dg1milestone,
case when trim(milestone_code) = 'DG2' then release_date else null end dg2milestone,
case when trim(milestone_code) = 'DG3' then release_date else null end dg3milestone,
case when trim(milestone_code) = 'DG4' then release_date else null end dg4milestone
from
(
select  a.release_version,                            
   req_id,
   description,
   amdocs_owner,
   assigned_to,
  Last_ADB Last_ADB_Est,
  a.work_auth_amt work_auth_amt,
   General_Status,
  Status,
  Project_Status,
  Approved_Date_To_UAT ,
  main_application main_application,
  Leading_Func_Area,
  att_Owner,
  Affected_Func_Areas,
  BA_Owner,
  Date_Scheduled,
  Detected_on_Date,
  Amdocs_Pending_Item,
  DE_Submit_Date,
  Lifecycle_Phase,
  USR_Deploy_Date, 
  Work_Auth_Date,
  Work_Authorized,
  Program,
  DRD_Approval_Date,
  atti
, milestone_code
, release_date
, amdocs_sme_ba
, planned_imp_date
, cc_impact
, proj_track_date
from WRF a , release_schedule b
where upper(trim(a.release_version)) = upper(trim(b.release_version(+)))
and (Leading_Func_Area = {leadFuncArea} or {leadFuncArea} = 'All')
and (  main_application  = {mainAppl} or {mainAppl} = 'All') 
and  ( trim(substr(program,0,16))  = {program} or {program} = 'All')
and (to_char(a.planned_imp_date,'mm/yyyy') = {month})
and     a.planned_imp_date is not null
--and a.release_version not in ('TBD','No CSS Version')
and  nvl(work_authorized,'N') = 'P'
and  to_number(a.work_auth_amt) = to_number(a.Last_ADB)
and     a.planned_imp_date between (select add_months(max(planned_imp_date),-13) from wrf) 
                               and (select max(planned_imp_date) from wrf)
/*and upper(trim(a.release_version)) in (select distinct a.release_version from release_schedule a
, (select distinct release_version from release_schedule where trim(milestone_code) = 'M9'  
and release_date = (select min(release_date) from release_schedule where release_date > sysdate and trim(milestone_code) = 'M9' ) ) b
 where substr(a.release_version,-3,3) between substr(b.release_version,-3,3) - 30 and substr(b.release_version,-3,3) +50)*/
)
)
group by release_version,
req_id,
leading_func_area,
main_application
) grid , WRF c
where                         
grid.req_id = c.req_id(+) and
grid.req_id not like 'CR%'
and (upper(trim(grid.req_id)) like {reqId} or upper(trim(description)) like {reqId})
and ( upper(trim(grid.amdocs_owner)) like {employeeName}
or upper(trim(grid.att_owner)) like {employeeName}
or upper(trim(grid.assigned_to)) like {employeeName}
or upper(trim(grid.ba_owner)) like {employeeName} 
or upper(trim(grid.amdocs_sme_ba)) like {employeeName} )
order by
substr(grid.release_version,-3,3), length(grid.release_version),                            
grid.req_id,
grid.Last_ADB_Est,
grid.m1milestone,
grid.m3milestone,
grid.m4milestone,
grid.m5milestone,
grid.m8milestone,
grid.m9milestone
]]>
</statement>

<statement code="WRF_Grid_Month_Part_Drilldown_Query">
<![CDATA[
select 
   grid.release_version ,                            
   grid.req_id,
   c.description,
   grid.amdocs_owner,
   grid.assigned_to,
  to_number(grid.Last_ADB_Est) Last_ADB_Est,
  to_number(grid.work_auth_amt) work_auth_amt,
  grid.General_Status,
  grid.Status,
  grid.project_status,
  to_date(grid.Approved_Date_To_UAT,'YYYY-MM-DD') m8,
  grid.main_application,
  grid.Leading_Func_Area,
  grid.att_Owner,
  grid.Affected_Func_Areas,
  grid.BA_Owner,
  to_date(grid.Date_Scheduled,'YYYY-MM-DD') m5,
  grid.Detected_on_Date m1,
  grid.Amdocs_Pending_Item,
  to_date(grid.DE_Submit_Date,'YYYY-MM-DD') m4,
  grid.Lifecycle_Phase,
  to_date(grid.USR_Deploy_Date,'YYYY-MM-DD') m9, 
  to_date(grid.Work_Auth_Date,'YYYY-MM-DD') Work_Auth_Date,
  grid.Work_Authorized,
  grid.Program,
  to_date(grid.DRD_Approval_Date,'YYYY-MM-DD') m3,
  grid.atti ,
  grid.amdocs_sme_ba,
  to_date(to_char(grid.planned_imp_date,'mm/dd/yyyy'),'mm/dd/yyyy') planned_imp_date,
  grid.cc_impact,  
  to_date(to_char(to_date(grid.proj_track_date, 'yyyy-mm-dd'),'mm/dd/yyyy'),'mm/dd/yyyy') proj_track_date, 
  grid.m1milestone,
  grid.m2milestone,
  grid.m3milestone,
  grid.m4milestone,
  grid.m5milestone,
  grid.m6milestone,
  grid.m7milestone,
  grid.m8milestone,
  grid.m9milestone,
  grid.m10milestone,
  grid.m11milestone,
  grid.dg1milestone,
  grid.dg2milestone,
  grid.dg3milestone,
  grid.dg4milestone
  from 
(select 
    release_version,                            
   req_id,
    main_application,
    Leading_Func_Area,
   max(amdocs_owner) amdocs_owner,
   max(assigned_to) assigned_to,
  max(Last_ADB_Est) Last_ADB_Est,
  max(work_auth_amt) work_auth_amt,
  max(General_Status) General_Status,
  max(Status) Status,
  max(project_status) project_status,
  max(Approved_Date_To_UAT) Approved_Date_To_UAT,
  max(att_Owner) att_Owner,
  max(Affected_Func_Areas) Affected_Func_Areas,
  max(BA_Owner) BA_Owner,
  max(Date_Scheduled) Date_Scheduled,
  max(Detected_on_Date) Detected_on_Date,
  max(Amdocs_Pending_Item) Amdocs_Pending_Item,
  max(DE_Submit_Date) DE_Submit_Date,
  max(Lifecycle_Phase) Lifecycle_Phase,
  max(USR_Deploy_Date) USR_Deploy_Date, 
  max(Work_Auth_Date) Work_Auth_Date,
  max(Work_Authorized) Work_Authorized,
  max(Program) Program,
  max(DRD_Approval_Date) DRD_Approval_Date,
  max(atti ) atti,
  max(amdocs_sme_ba) amdocs_sme_ba,
  max(planned_imp_date) planned_imp_date,
  max(cc_impact) cc_impact,
  max(proj_track_date) proj_track_date,
max(m1milestone) m1milestone,
max(m2milestone) m2milestone,
max(m3milestone) m3milestone,
max(m4milestone) m4milestone,
max(m5milestone) m5milestone,
max(m6milestone) m6milestone,
max(m7milestone) m7milestone,
max(m8milestone) m8milestone,
max(m9milestone) m9milestone,
max(m10milestone) m10milestone,
max(m11milestone) m11milestone,
max(dg1milestone) dg1milestone,
max(dg2milestone) dg2milestone,
max(dg3milestone) dg3milestone,
max(dg4milestone) dg4milestone
from
(
select 
         release_version,                            
   req_id,
   description,
   amdocs_owner,
   assigned_to,
  Last_ADB_Est,
  work_auth_amt,
   General_Status,
  Status,
  project_status,
  Approved_Date_To_UAT ,
main_application,
  Leading_Func_Area,
  att_Owner,
  Affected_Func_Areas,
  BA_Owner,
  Date_Scheduled,
  Detected_on_Date,
  Amdocs_Pending_Item,
  DE_Submit_Date,
  Lifecycle_Phase,
  USR_Deploy_Date, 
  Work_Auth_Date,
  Work_Authorized,
  Program,
  DRD_Approval_Date,
  atti ,
  amdocs_sme_ba,
  planned_imp_date,
  cc_impact,
  proj_track_date,
case when trim(milestone_code) = 'M1' then release_date else null end  m1milestone,
case when trim(milestone_code) = 'M2' then release_date else null end  m2milestone,
case when trim(milestone_code) = 'M3' then release_date else null end  m3milestone,
case when trim(milestone_code) = 'M4' then release_date else null end  m4milestone,
case when trim(milestone_code) = 'M5' then release_date else null end  m5milestone,
case when trim(milestone_code) = 'M6' then release_date else null end  m6milestone,
case when trim(milestone_code) = 'M7' then release_date else null end  m7milestone,
case when trim(milestone_code) = 'M8' then release_date else null end  m8milestone,
case when trim(milestone_code) = 'M9' then release_date else null end  m9milestone,
case when trim(milestone_code) = 'M10' then release_date else null  end m10milestone,
case when trim(milestone_code) = 'M11' then release_date else null end m11milestone,
case when trim(milestone_code) = 'DG1' then release_date else null end dg1milestone,
case when trim(milestone_code) = 'DG2' then release_date else null end dg2milestone,
case when trim(milestone_code) = 'DG3' then release_date else null end dg3milestone,
case when trim(milestone_code) = 'DG4' then release_date else null end dg4milestone
from
(
select  a.release_version,                            
   req_id,
   description,
   amdocs_owner,
   assigned_to,
  Last_ADB Last_ADB_Est,
  a.work_auth_amt work_auth_amt,
   General_Status,
  Status,
  project_status,
  Approved_Date_To_UAT ,
  main_application main_application,
  Leading_Func_Area,
  att_Owner,
  Affected_Func_Areas,
  BA_Owner,
  Date_Scheduled,
  Detected_on_Date,
  Amdocs_Pending_Item,
  DE_Submit_Date,
  Lifecycle_Phase,
  USR_Deploy_Date, 
  Work_Auth_Date,
  Work_Authorized,
  Program,
  DRD_Approval_Date,
  atti
, milestone_code
, release_date
, amdocs_sme_ba
, planned_imp_date
, cc_impact
, proj_track_date
from WRF a , release_schedule b
where upper(trim(a.release_version)) = upper(trim(b.release_version(+)))
and (Leading_Func_Area = {leadFuncArea} or {leadFuncArea} = 'All')
and (  main_application  = {mainAppl} or {mainAppl} = 'All') 
and  ( trim(substr(program,0,16))  = {program} or {program} = 'All')
and (to_char(a.planned_imp_date,'mm/yyyy') = {month})
and     a.planned_imp_date is not null
--and a.release_version not in ('TBD','No CSS Version')
and  nvl(work_authorized,'N') = 'P'
and  to_number(a.work_auth_amt) < to_number(a.Last_ADB)
and     a.planned_imp_date between (select add_months(max(planned_imp_date),-13) from wrf) 
                               and (select max(planned_imp_date) from wrf)
/*and upper(trim(a.release_version)) in (select distinct a.release_version from release_schedule a
, (select distinct release_version from release_schedule where trim(milestone_code) = 'M9'  
and release_date = (select min(release_date) from release_schedule where release_date > sysdate and trim(milestone_code) = 'M9' ) ) b
 where substr(a.release_version,-3,3) between substr(b.release_version,-3,3) - 30 and substr(b.release_version,-3,3) +50)*/
)
)
group by release_version,
req_id,
leading_func_area,
main_application
) grid , WRF c
where                         
grid.req_id = c.req_id(+) and
grid.req_id not like 'CR%'
and (upper(trim(grid.req_id)) like {reqId} or upper(trim(description)) like {reqId})
and ( upper(trim(grid.amdocs_owner)) like {employeeName}
or upper(trim(grid.att_owner)) like {employeeName}
or upper(trim(grid.assigned_to)) like {employeeName}
or upper(trim(grid.ba_owner)) like {employeeName} 
or upper(trim(grid.amdocs_sme_ba)) like {employeeName} )
order by
substr(grid.release_version,-3,3), length(grid.release_version),                            
grid.req_id,
grid.Last_ADB_Est,
grid.m1milestone,
grid.m3milestone,
grid.m4milestone,
grid.m5milestone,
grid.m8milestone,
grid.m9milestone
]]>
</statement>

<statement code="WRF_Grid_ProjStat_DD_Query">
<![CDATA[
select 
   grid.release_version ,                            
   grid.req_id,
   c.description,
   grid.amdocs_owner,
   grid.assigned_to,
  to_number(grid.Last_ADB_Est) Last_ADB_Est,
  grid.General_Status,
  grid.Status,
  grid.Project_Status,
  to_date(grid.Approved_Date_To_UAT,'YYYY-MM-DD') m8,
  grid.main_application,
  grid.Leading_Func_Area,
  grid.att_Owner,
  grid.Affected_Func_Areas,
  grid.BA_Owner,
  to_date(grid.Date_Scheduled,'YYYY-MM-DD') m5,
  grid.Detected_on_Date m1,
  grid.Amdocs_Pending_Item,
  to_date(grid.DE_Submit_Date,'YYYY-MM-DD') m4,
  grid.Lifecycle_Phase,
  to_date(grid.USR_Deploy_Date,'YYYY-MM-DD') m9, 
  to_date(grid.Work_Auth_Date,'YYYY-MM-DD') Work_Auth_Date,
  grid.Work_Authorized,
  grid.Program,
  to_date(grid.DRD_Approval_Date,'YYYY-MM-DD') m3,
  grid.atti ,
  grid.amdocs_sme_ba,
  to_number(grid.work_auth_amt) work_auth_amt,
  to_date(to_char(grid.planned_imp_date,'mm/dd/yyyy'),'mm/dd/yyyy') planned_imp_date,
  grid.cc_impact,
  to_date(to_char(to_date(grid.proj_track_date, 'yyyy-mm-dd'),'mm/dd/yyyy'),'mm/dd/yyyy') proj_track_date,
  grid.m1milestone,
  grid.m2milestone,
  grid.m3milestone,
  grid.m4milestone,
  grid.m5milestone,
  grid.m6milestone,
  grid.m7milestone,
  grid.m8milestone,
  grid.m9milestone,
  grid.m10milestone,
  grid.m11milestone,
  grid.dg1milestone,
  grid.dg2milestone,
  grid.dg3milestone,
  grid.dg4milestone
  from 
(select 
    release_version,                            
   req_id,
    main_application,
    Leading_Func_Area,
   max(amdocs_owner) amdocs_owner,
   max(assigned_to) assigned_to,
  max(Last_ADB_Est) Last_ADB_Est,
  max(General_Status) General_Status,
  max(Status) Status,
  max(Project_Status) Project_Status,
  max(Approved_Date_To_UAT) Approved_Date_To_UAT,
  max(att_Owner) att_Owner,
  max(Affected_Func_Areas) Affected_Func_Areas,
  max(BA_Owner) BA_Owner,
  max(Date_Scheduled) Date_Scheduled,
  max(Detected_on_Date) Detected_on_Date,
  max(Amdocs_Pending_Item) Amdocs_Pending_Item,
  max(DE_Submit_Date) DE_Submit_Date,
  max(Lifecycle_Phase) Lifecycle_Phase,
  max(USR_Deploy_Date) USR_Deploy_Date, 
  max(Work_Auth_Date) Work_Auth_Date,
  max(Work_Authorized) Work_Authorized,
  max(Program) Program,
  max(DRD_Approval_Date) DRD_Approval_Date,
  max(atti ) atti,
  max(amdocs_sme_ba) amdocs_sme_ba,
  max(work_auth_amt) work_auth_amt,
  max(planned_imp_date) planned_imp_date,
  max(cc_impact) cc_impact,
  max(proj_track_date) proj_track_date,
max(m1milestone) m1milestone,
max(m2milestone) m2milestone,
max(m3milestone) m3milestone,
max(m4milestone) m4milestone,
max(m5milestone) m5milestone,
max(m6milestone) m6milestone,
max(m7milestone) m7milestone,
max(m8milestone) m8milestone,
max(m9milestone) m9milestone,
max(m10milestone) m10milestone,
max(m11milestone) m11milestone,
max(dg1milestone) dg1milestone,
max(dg2milestone) dg2milestone,
max(dg3milestone) dg3milestone,
max(dg4milestone) dg4milestone
from
(
select 
         release_version,                            
   req_id,
   description,
   amdocs_owner,
   assigned_to,
  Last_ADB_Est,
   General_Status,
  Status,
  project_status,
  Approved_Date_To_UAT ,
main_application,
  Leading_Func_Area,
  att_Owner,
  Affected_Func_Areas,
  BA_Owner,
  Date_Scheduled,
  Detected_on_Date,
  Amdocs_Pending_Item,
  DE_Submit_Date,
  Lifecycle_Phase,
  USR_Deploy_Date, 
  Work_Auth_Date,
  Work_Authorized,
  Program,
  DRD_Approval_Date,
  atti ,
  amdocs_sme_ba,
  work_auth_amt,
  planned_imp_date,
  cc_impact,
  proj_track_date,
case when trim(milestone_code) = 'M1' then release_date else null end  m1milestone,
case when trim(milestone_code) = 'M2' then release_date else null end  m2milestone,
case when trim(milestone_code) = 'M3' then release_date else null end  m3milestone,
case when trim(milestone_code) = 'M4' then release_date else null end  m4milestone,
case when trim(milestone_code) = 'M5' then release_date else null end  m5milestone,
case when trim(milestone_code) = 'M6' then release_date else null end  m6milestone,
case when trim(milestone_code) = 'M7' then release_date else null end  m7milestone,
case when trim(milestone_code) = 'M8' then release_date else null end  m8milestone,
case when trim(milestone_code) = 'M9' then release_date else null end  m9milestone,
case when trim(milestone_code) = 'M10' then release_date else null  end m10milestone,
case when trim(milestone_code) = 'M11' then release_date else null end m11milestone,
case when trim(milestone_code) = 'DG1' then release_date else null end dg1milestone,
case when trim(milestone_code) = 'DG2' then release_date else null end dg2milestone,
case when trim(milestone_code) = 'DG3' then release_date else null end dg3milestone,
case when trim(milestone_code) = 'DG4' then release_date else null end dg4milestone
from
(
select  a.release_version,                            
   req_id,
   description,
   amdocs_owner,
   assigned_to,
  Last_ADB Last_ADB_Est,
   General_Status,
  Status,
  project_status,
  Approved_Date_To_UAT ,
  main_application main_application,
  Leading_Func_Area,
  att_Owner,
  Affected_Func_Areas,
  BA_Owner,
  Date_Scheduled,
  Detected_on_Date,
  Amdocs_Pending_Item,
  DE_Submit_Date,
  Lifecycle_Phase,
  USR_Deploy_Date, 
  Work_Auth_Date,
  Work_Authorized,
  Program,
  DRD_Approval_Date,
  atti
, milestone_code
, release_date
, amdocs_sme_ba
, work_auth_amt
, planned_imp_date
, cc_impact
, proj_track_date
from WRF a , release_schedule b
where upper(trim(a.release_version)) = upper(trim(b.release_version))
and (Leading_Func_Area = {leadFuncArea} or {leadFuncArea} = 'All')
and (  main_application  = {mainAppl} or {mainAppl} = 'All') 
and  ( Program  = {program} or {program} = 'All')
and a.release_version not in ('TBD','No CSS Version')
and project_status is not null
and  upper(trim(a.release_version)) = upper(trim({version}))
and  (nvl(work_authorized,'N') in ({{workAuth}}) or ( 'All' in ({{workAuth}}) ))
and ((project_status in {{projectStatus}}) or ( 'All' in ({{projectStatus}})))
and upper(trim(a.release_version)) in (select  release_version 
from     wrf_release)
)
)
group by release_version,
req_id,
leading_func_area,
main_application
) grid , WRF c
where                         
grid.req_id = c.req_id(+) and
grid.req_id not like 'CR%'
and (upper(trim(grid.req_id)) like {reqId} or upper(trim(description)) like {reqId})
and ( upper(trim(grid.amdocs_owner)) like {employeeName}
or upper(trim(grid.att_owner)) like {employeeName}
or upper(trim(grid.assigned_to)) like {employeeName}
or upper(trim(grid.ba_owner)) like {employeeName} 
or upper(trim(grid.amdocs_sme_ba)) like {employeeName} )
order by
substr(grid.release_version,-3,3), length(grid.release_version),                            
grid.req_id,
grid.Last_ADB_Est,
grid.m1milestone,
grid.m3milestone,
grid.m4milestone,
grid.m5milestone,
grid.m8milestone,
grid.m9milestone
]]>
</statement>

<statement code="WRF_Grid_Combined_ProjStat_DD_Query">
<![CDATA[
select 
   grid.release_version ,                            
   grid.req_id,
   c.description,
   grid.amdocs_owner,
   grid.assigned_to,
  to_number(grid.Last_ADB_Est) Last_ADB_Est,
  to_number(grid.work_auth_amt) work_auth_amt,
  grid.General_Status,
  grid.Status,
  grid.project_status,
  to_date(grid.Approved_Date_To_UAT,'YYYY-MM-DD') m8,
  grid.main_application,
  grid.Leading_Func_Area,
  grid.att_Owner,
  grid.Affected_Func_Areas,
  grid.BA_Owner,
  to_date(grid.Date_Scheduled,'YYYY-MM-DD') m5,
  grid.Detected_on_Date m1,
  grid.Amdocs_Pending_Item,
  to_date(grid.DE_Submit_Date,'YYYY-MM-DD') m4,
  grid.Lifecycle_Phase,
  to_date(grid.USR_Deploy_Date,'YYYY-MM-DD') m9, 
  to_date(grid.Work_Auth_Date,'YYYY-MM-DD') Work_Auth_Date,
  grid.Work_Authorized,
  grid.Program,
  to_date(grid.DRD_Approval_Date,'YYYY-MM-DD') m3,
  grid.atti ,
  grid.amdocs_sme_ba,
  to_date(to_char(grid.planned_imp_date,'mm/dd/yyyy'),'mm/dd/yyyy') planned_imp_date,
  grid.cc_impact,
  to_date(to_char(to_date(grid.proj_track_date, 'yyyy-mm-dd'),'mm/dd/yyyy'),'mm/dd/yyyy') proj_track_date,
  grid.m1milestone,
  grid.m2milestone,
  grid.m3milestone,
  grid.m4milestone,
  grid.m5milestone,
  grid.m6milestone,
  grid.m7milestone,
  grid.m8milestone,
  grid.m9milestone,
  grid.m10milestone,
  grid.m11milestone,
  grid.dg1milestone,
  grid.dg2milestone,
  grid.dg3milestone,
  grid.dg4milestone
  from 
(select 
    release_version,                            
   req_id,
    main_application,
    Leading_Func_Area,
   max(amdocs_owner) amdocs_owner,
   max(assigned_to) assigned_to,
  max(Last_ADB_Est) Last_ADB_Est,
  max(work_auth_amt) work_auth_amt,
  max(General_Status) General_Status,
  max(Status) Status,
  max(project_status) project_status,
  max(Approved_Date_To_UAT) Approved_Date_To_UAT,
  max(att_Owner) att_Owner,
  max(Affected_Func_Areas) Affected_Func_Areas,
  max(BA_Owner) BA_Owner,
  max(Date_Scheduled) Date_Scheduled,
  max(Detected_on_Date) Detected_on_Date,
  max(Amdocs_Pending_Item) Amdocs_Pending_Item,
  max(DE_Submit_Date) DE_Submit_Date,
  max(Lifecycle_Phase) Lifecycle_Phase,
  max(USR_Deploy_Date) USR_Deploy_Date, 
  max(Work_Auth_Date) Work_Auth_Date,
  max(Work_Authorized) Work_Authorized,
  max(Program) Program,
  max(DRD_Approval_Date) DRD_Approval_Date,
  max(atti ) atti,
  max(amdocs_sme_ba) amdocs_sme_ba,
  max(planned_imp_date) planned_imp_date,
  max(cc_impact) cc_impact,
  max(proj_track_date) proj_track_date,
max(m1milestone) m1milestone,
max(m2milestone) m2milestone,
max(m3milestone) m3milestone,
max(m4milestone) m4milestone,
max(m5milestone) m5milestone,
max(m6milestone) m6milestone,
max(m7milestone) m7milestone,
max(m8milestone) m8milestone,
max(m9milestone) m9milestone,
max(m10milestone) m10milestone,
max(m11milestone) m11milestone,
max(dg1milestone) dg1milestone,
max(dg2milestone) dg2milestone,
max(dg3milestone) dg3milestone,
max(dg4milestone) dg4milestone
from
(
select 
         release_version,                            
   req_id,
   description,
   amdocs_owner,
   assigned_to,
  Last_ADB_Est,
  work_auth_amt,
   General_Status,
  Status,
  project_status,
  Approved_Date_To_UAT ,
main_application,
  Leading_Func_Area,
  att_Owner,
  Affected_Func_Areas,
  BA_Owner,
  Date_Scheduled,
  Detected_on_Date,
  Amdocs_Pending_Item,
  DE_Submit_Date,
  Lifecycle_Phase,
  USR_Deploy_Date, 
  Work_Auth_Date,
  Work_Authorized,
  Program,
  DRD_Approval_Date,
  atti ,
  amdocs_sme_ba,
  planned_imp_date,
  cc_impact,
  proj_track_date,
case when trim(milestone_code) = 'M1' then release_date else null end  m1milestone,
case when trim(milestone_code) = 'M2' then release_date else null end  m2milestone,
case when trim(milestone_code) = 'M3' then release_date else null end  m3milestone,
case when trim(milestone_code) = 'M4' then release_date else null end  m4milestone,
case when trim(milestone_code) = 'M5' then release_date else null end  m5milestone,
case when trim(milestone_code) = 'M6' then release_date else null end  m6milestone,
case when trim(milestone_code) = 'M7' then release_date else null end  m7milestone,
case when trim(milestone_code) = 'M8' then release_date else null end  m8milestone,
case when trim(milestone_code) = 'M9' then release_date else null end  m9milestone,
case when trim(milestone_code) = 'M10' then release_date else null  end m10milestone,
case when trim(milestone_code) = 'M11' then release_date else null end m11milestone,
case when trim(milestone_code) = 'DG1' then release_date else null end dg1milestone,
case when trim(milestone_code) = 'DG2' then release_date else null end dg2milestone,
case when trim(milestone_code) = 'DG3' then release_date else null end dg3milestone,
case when trim(milestone_code) = 'DG4' then release_date else null end dg4milestone
from
(
select  a.release_version,                            
   req_id,
   description,
   amdocs_owner,
   assigned_to,
  Last_ADB Last_ADB_Est,
  a.work_auth_amt work_auth_amt,
   General_Status,
  Status,
  project_status,
  Approved_Date_To_UAT ,
  main_application main_application,
  Leading_Func_Area,
  att_Owner,
  Affected_Func_Areas,
  BA_Owner,
  Date_Scheduled,
  Detected_on_Date,
  Amdocs_Pending_Item,
  DE_Submit_Date,
  Lifecycle_Phase,
  USR_Deploy_Date, 
  Work_Auth_Date,
  Work_Authorized,
  Program,
  DRD_Approval_Date,
  atti
, milestone_code
, release_date
, amdocs_sme_ba
, planned_imp_date
, cc_impact
, proj_track_date
from WRF a , release_schedule b
where upper(trim(a.release_version)) = upper(trim(b.release_version))
and (Leading_Func_Area = {leadFuncArea} or {leadFuncArea} = 'All')
and (  main_application  = {mainAppl} or {mainAppl} = 'All') 
and  ( Program  = {program} or {program} = 'All')
and a.release_version not in ('TBD','No CSS Version')
and  a.release_version like {version}
and project_status is not null
and  (nvl(work_authorized,'N') in ({{workAuth}}) or ('All' in ({{workAuth}})))
and ((project_status in {{projectStatus}}) or ({projectStatus} = 'All'))
and upper(trim(a.release_version)) in (select  release_version 
from     wrf_release
)
)
)
group by release_version,
req_id,
leading_func_area,
main_application
) grid , WRF c
where                         
grid.req_id = c.req_id(+) and
grid.req_id not like 'CR%'
and (upper(trim(grid.req_id)) like {reqId} or upper(trim(description)) like {reqId})
and ( upper(trim(grid.amdocs_owner)) like {employeeName}
or upper(trim(grid.att_owner)) like {employeeName}
or upper(trim(grid.assigned_to)) like {employeeName}
or upper(trim(grid.ba_owner)) like {employeeName} 
or upper(trim(grid.amdocs_sme_ba)) like {employeeName} )
order by
substr(grid.release_version,-3,3), length(grid.release_version),                            
grid.req_id,
grid.Last_ADB_Est,
grid.m1milestone,
grid.m3milestone,
grid.m4milestone,
grid.m5milestone,
grid.m8milestone,
grid.m9milestone
]]>
</statement>

<statement code="WRF_Grid_Prog_ProjStat_DD_Query">
<![CDATA[
select 
   grid.release_version ,                            
   grid.req_id,
   c.description,
   grid.amdocs_owner,
   grid.assigned_to,
  to_number(grid.Last_ADB_Est) Last_ADB_Est,
  grid.General_Status,
  grid.Status,
  grid.Project_Status,
  to_date(grid.Approved_Date_To_UAT,'YYYY-MM-DD') m8,
  grid.main_application,
  grid.Leading_Func_Area,
  grid.att_Owner,
  grid.Affected_Func_Areas,
  grid.BA_Owner,
  to_date(grid.Date_Scheduled,'YYYY-MM-DD') m5,
  grid.Detected_on_Date m1,
  grid.Amdocs_Pending_Item,
  to_date(grid.DE_Submit_Date,'YYYY-MM-DD') m4,
  grid.Lifecycle_Phase,
  to_date(grid.USR_Deploy_Date,'YYYY-MM-DD') m9, 
  to_date(grid.Work_Auth_Date,'YYYY-MM-DD') Work_Auth_Date,
  grid.Work_Authorized,
  grid.Program,
  to_date(grid.DRD_Approval_Date,'YYYY-MM-DD') m3,
  grid.atti ,
  grid.amdocs_sme_ba,
  to_number(grid.work_auth_amt) work_auth_amt,
  to_date(to_char(grid.planned_imp_date,'mm/dd/yyyy'),'mm/dd/yyyy') planned_imp_date,
  grid.cc_impact,
  to_date(to_char(to_date(grid.proj_track_date, 'yyyy-mm-dd'),'mm/dd/yyyy'),'mm/dd/yyyy') proj_track_date,
  grid.m1milestone,
  grid.m2milestone,
  grid.m3milestone,
  grid.m4milestone,
  grid.m5milestone,
  grid.m6milestone,
  grid.m7milestone,
  grid.m8milestone,
  grid.m9milestone,
  grid.m10milestone,
  grid.m11milestone,
  grid.dg1milestone,
  grid.dg2milestone,
  grid.dg3milestone,
  grid.dg4milestone
  from 
(select 
    release_version,                            
   req_id,
    main_application,
    Leading_Func_Area,
   max(amdocs_owner) amdocs_owner,
   max(assigned_to) assigned_to,
  max(Last_ADB_Est) Last_ADB_Est,
  max(General_Status) General_Status,
  max(Status) Status,
  max(Project_Status) Project_Status,
  max(Approved_Date_To_UAT) Approved_Date_To_UAT,
  max(att_Owner) att_Owner,
  max(Affected_Func_Areas) Affected_Func_Areas,
  max(BA_Owner) BA_Owner,
  max(Date_Scheduled) Date_Scheduled,
  max(Detected_on_Date) Detected_on_Date,
  max(Amdocs_Pending_Item) Amdocs_Pending_Item,
  max(DE_Submit_Date) DE_Submit_Date,
  max(Lifecycle_Phase) Lifecycle_Phase,
  max(USR_Deploy_Date) USR_Deploy_Date, 
  max(Work_Auth_Date) Work_Auth_Date,
  max(Work_Authorized) Work_Authorized,
  max(Program) Program,
  max(DRD_Approval_Date) DRD_Approval_Date,
  max(atti ) atti,
  max(amdocs_sme_ba) amdocs_sme_ba,
  max(work_auth_amt) work_auth_amt,
  max(planned_imp_date) planned_imp_date,
    max(cc_impact) cc_impact,
  max(proj_track_date) proj_track_date,
max(m1milestone) m1milestone,
max(m2milestone) m2milestone,
max(m3milestone) m3milestone,
max(m4milestone) m4milestone,
max(m5milestone) m5milestone,
max(m6milestone) m6milestone,
max(m7milestone) m7milestone,
max(m8milestone) m8milestone,
max(m9milestone) m9milestone,
max(m10milestone) m10milestone,
max(m11milestone) m11milestone,
max(dg1milestone) dg1milestone,
max(dg2milestone) dg2milestone,
max(dg3milestone) dg3milestone,
max(dg4milestone) dg4milestone
from
(
select 
         release_version,                            
   req_id,
   description,
   amdocs_owner,
   assigned_to,
  Last_ADB_Est,
   General_Status,
  Status,
  project_status,
  Approved_Date_To_UAT ,
main_application,
  Leading_Func_Area,
  att_Owner,
  Affected_Func_Areas,
  BA_Owner,
  Date_Scheduled,
  Detected_on_Date,
  Amdocs_Pending_Item,
  DE_Submit_Date,
  Lifecycle_Phase,
  USR_Deploy_Date, 
  Work_Auth_Date,
  Work_Authorized,
  Program,
  DRD_Approval_Date,
  atti ,
  amdocs_sme_ba,
  work_auth_amt,
  planned_imp_date,
    cc_impact,
  proj_track_date,
case when trim(milestone_code) = 'M1' then release_date else null end  m1milestone,
case when trim(milestone_code) = 'M2' then release_date else null end  m2milestone,
case when trim(milestone_code) = 'M3' then release_date else null end  m3milestone,
case when trim(milestone_code) = 'M4' then release_date else null end  m4milestone,
case when trim(milestone_code) = 'M5' then release_date else null end  m5milestone,
case when trim(milestone_code) = 'M6' then release_date else null end  m6milestone,
case when trim(milestone_code) = 'M7' then release_date else null end  m7milestone,
case when trim(milestone_code) = 'M8' then release_date else null end  m8milestone,
case when trim(milestone_code) = 'M9' then release_date else null end  m9milestone,
case when trim(milestone_code) = 'M10' then release_date else null  end m10milestone,
case when trim(milestone_code) = 'M11' then release_date else null end m11milestone,
case when trim(milestone_code) = 'DG1' then release_date else null end dg1milestone,
case when trim(milestone_code) = 'DG2' then release_date else null end dg2milestone,
case when trim(milestone_code) = 'DG3' then release_date else null end dg3milestone,
case when trim(milestone_code) = 'DG4' then release_date else null end dg4milestone
from
(
select  a.release_version,                            
   req_id,
   description,
   amdocs_owner,
   assigned_to,
  Last_ADB Last_ADB_Est,
   General_Status,
  Status,
  project_status,
  Approved_Date_To_UAT ,
  main_application main_application,
  Leading_Func_Area,
  att_Owner,
  Affected_Func_Areas,
  BA_Owner,
  Date_Scheduled,
  Detected_on_Date,
  Amdocs_Pending_Item,
  DE_Submit_Date,
  Lifecycle_Phase,
  USR_Deploy_Date, 
  Work_Auth_Date,
  Work_Authorized,
  Program,
  DRD_Approval_Date,
  atti
, milestone_code
, release_date
, amdocs_sme_ba
, planned_imp_date
, work__amt,
  cc_impact,
  proj_track_date
from WRF a , release_schedule b
where upper(trim(a.release_version)) = upper(trim(b.release_version(+)))
and (Leading_Func_Area = {leadFuncArea} or {leadFuncArea} = 'All')
and (  main_application  = {mainAppl} or {mainAppl} = 'All') 
and  ( trim(substr(program,0,16))  = {program} or {program} = 'All')
and program is not null
and project_status is not null
and  (nvl(work_authorized,'N') in ({{workAuth}}) or ('All' in ({{workAuth}})))
and ((project_status in {{projectStatus}}) or ('All' in ({{projectStatus}})))
and     a.planned_imp_date between (select add_months(max(planned_imp_date),-13) from wrf) 
                               and (select max(planned_imp_date) from wrf)
/*and upper(trim(a.release_version)) in (select distinct a.release_version from release_schedule a
, (select distinct release_version from release_schedule where trim(milestone_code) = 'M9'  
and release_date = (select min(release_date) from release_schedule where release_date > sysdate and trim(milestone_code) = 'M9' ) ) b
 where substr(a.release_version,-3,3) between substr(b.release_version,-3,3) - 30 and substr(b.release_version,-3,3) +50)*/
)
)
group by release_version,
req_id,
leading_func_area,
main_application
) grid , WRF c
where                         
grid.req_id = c.req_id(+) and
grid.req_id not like 'CR%'
and (upper(trim(grid.req_id)) like {reqId} or upper(trim(description)) like {reqId})
and ( upper(trim(grid.amdocs_owner)) like {employeeName}
or upper(trim(grid.att_owner)) like {employeeName}
or upper(trim(grid.assigned_to)) like {employeeName}
or upper(trim(grid.ba_owner)) like {employeeName} 
or upper(trim(grid.amdocs_sme_ba)) like {employeeName} )
order by
substr(grid.release_version,-3,3), length(grid.release_version),                            
grid.req_id,
grid.Last_ADB_Est,
grid.m1milestone,
grid.m3milestone,
grid.m4milestone,
grid.m5milestone,
grid.m8milestone,
grid.m9milestone
]]>
</statement>

<statement code="WRF_Grid_Month_ProjStat_DD_Query">
<![CDATA[
select 
   grid.release_version ,                            
   grid.req_id,
   c.description,
   grid.amdocs_owner,
   grid.assigned_to,
  to_number(grid.Last_ADB_Est) Last_ADB_Est,
  grid.General_Status,
  grid.Status,
  grid.Project_Status,
  to_date(grid.Approved_Date_To_UAT,'YYYY-MM-DD') m8,
  grid.main_application,
  grid.Leading_Func_Area,
  grid.att_Owner,
  grid.Affected_Func_Areas,
  grid.BA_Owner,
  to_date(grid.Date_Scheduled,'YYYY-MM-DD') m5,
  grid.Detected_on_Date m1,
  grid.Amdocs_Pending_Item,
  to_date(grid.DE_Submit_Date,'YYYY-MM-DD') m4,
  grid.Lifecycle_Phase,
  to_date(grid.USR_Deploy_Date,'YYYY-MM-DD') m9, 
  to_date(grid.Work_Auth_Date,'YYYY-MM-DD') Work_Auth_Date,
  grid.Work_Authorized,
  grid.Program,
  to_date(grid.DRD_Approval_Date,'YYYY-MM-DD') m3,
  grid.atti ,
  grid.amdocs_sme_ba,
  to_date(to_char(grid.planned_imp_date,'mm/dd/yyyy'),'mm/dd/yyyy') planned_imp_date,
  to_number(grid.work_auth_amt) work_auth_amt, 
  grid.cc_impact,
  to_date(to_char(to_date(grid.proj_track_date, 'yyyy-mm-dd'),'mm/dd/yyyy'),'mm/dd/yyyy') proj_track_date, 
  grid.m1milestone,
  grid.m2milestone,
  grid.m3milestone,
  grid.m4milestone,
  grid.m5milestone,
  grid.m6milestone,
  grid.m7milestone,
  grid.m8milestone,
  grid.m9milestone,
  grid.m10milestone,
  grid.m11milestone,
  grid.dg1milestone,
  grid.dg2milestone,
  grid.dg3milestone,
  grid.dg4milestone
  from 
(select 
    release_version,                            
   req_id,
    main_application,
    Leading_Func_Area,
   max(amdocs_owner) amdocs_owner,
   max(assigned_to) assigned_to,
  max(Last_ADB_Est) Last_ADB_Est,
  max(General_Status) General_Status,
  max(Status) Status,
  max(Project_Status) Project_Status,
  max(Approved_Date_To_UAT) Approved_Date_To_UAT,
  max(att_Owner) att_Owner,
  max(Affected_Func_Areas) Affected_Func_Areas,
  max(BA_Owner) BA_Owner,
  max(Date_Scheduled) Date_Scheduled,
  max(Detected_on_Date) Detected_on_Date,
  max(Amdocs_Pending_Item) Amdocs_Pending_Item,
  max(DE_Submit_Date) DE_Submit_Date,
  max(Lifecycle_Phase) Lifecycle_Phase,
  max(USR_Deploy_Date) USR_Deploy_Date, 
  max(Work_Auth_Date) Work_Auth_Date,
  max(Work_Authorized) Work_Authorized,
  max(Program) Program,
  max(DRD_Approval_Date) DRD_Approval_Date,
  max(atti ) atti,
  max(amdocs_sme_ba) amdocs_sme_ba,
  max(planned_imp_date) planned_imp_date,
  max(work_auth_amt) work_auth_amt,
    max(cc_impact) cc_impact,
  max(proj_track_date) proj_track_date,
max(m1milestone) m1milestone,
max(m2milestone) m2milestone,
max(m3milestone) m3milestone,
max(m4milestone) m4milestone,
max(m5milestone) m5milestone,
max(m6milestone) m6milestone,
max(m7milestone) m7milestone,
max(m8milestone) m8milestone,
max(m9milestone) m9milestone,
max(m10milestone) m10milestone,
max(m11milestone) m11milestone,
max(dg1milestone) dg1milestone,
max(dg2milestone) dg2milestone,
max(dg3milestone) dg3milestone,
max(dg4milestone) dg4milestone
from
(
select 
         release_version,                            
   req_id,
   description,
   amdocs_owner,
   assigned_to,
  Last_ADB_Est,
   General_Status,
  Status,
  project_status,
  Approved_Date_To_UAT ,
main_application,
  Leading_Func_Area,
  att_Owner,
  Affected_Func_Areas,
  BA_Owner,
  Date_Scheduled,
  Detected_on_Date,
  Amdocs_Pending_Item,
  DE_Submit_Date,
  Lifecycle_Phase,
  USR_Deploy_Date, 
  Work_Auth_Date,
  Work_Authorized,
  Program,
  DRD_Approval_Date,
  atti ,
  amdocs_sme_ba,
  planned_imp_date,
  work_auth_amt,
    cc_impact,
  proj_track_date,
case when trim(milestone_code) = 'M1' then release_date else null end  m1milestone,
case when trim(milestone_code) = 'M2' then release_date else null end  m2milestone,
case when trim(milestone_code) = 'M3' then release_date else null end  m3milestone,
case when trim(milestone_code) = 'M4' then release_date else null end  m4milestone,
case when trim(milestone_code) = 'M5' then release_date else null end  m5milestone,
case when trim(milestone_code) = 'M6' then release_date else null end  m6milestone,
case when trim(milestone_code) = 'M7' then release_date else null end  m7milestone,
case when trim(milestone_code) = 'M8' then release_date else null end  m8milestone,
case when trim(milestone_code) = 'M9' then release_date else null end  m9milestone,
case when trim(milestone_code) = 'M10' then release_date else null  end m10milestone,
case when trim(milestone_code) = 'M11' then release_date else null end m11milestone,
case when trim(milestone_code) = 'DG1' then release_date else null end dg1milestone,
case when trim(milestone_code) = 'DG2' then release_date else null end dg2milestone,
case when trim(milestone_code) = 'DG3' then release_date else null end dg3milestone,
case when trim(milestone_code) = 'DG4' then release_date else null end dg4milestone
from
(
select  a.release_version,                            
   req_id,
   description,
   amdocs_owner,
   assigned_to,
  Last_ADB Last_ADB_Est,
   General_Status,
  Status,
  project_status,
  Approved_Date_To_UAT ,
  main_application main_application,
  Leading_Func_Area,
  att_Owner,
  Affected_Func_Areas,
  BA_Owner,
  Date_Scheduled,
  Detected_on_Date,
  Amdocs_Pending_Item,
  DE_Submit_Date,
  Lifecycle_Phase,
  USR_Deploy_Date, 
  Work_Auth_Date,
  Work_Authorized,
  Program,
  DRD_Approval_Date,
  atti
, milestone_code
, release_date
, amdocs_sme_ba
, planned_imp_date
, work_auth_amt,
  cc_impact,
  proj_track_date
from WRF a , release_schedule b
where upper(trim(a.release_version)) = upper(trim(b.release_version(+)))
and (Leading_Func_Area = {leadFuncArea} or {leadFuncArea} = 'All')
and (  main_application  = {mainAppl} or {mainAppl} = 'All') 
and  ( trim(substr(program,0,16))  = {program} or {program} = 'All')
and (to_char(a.planned_imp_date,'mm/yyyy') = {month})
and     a.planned_imp_date is not null
and project_status is not null
and  (nvl(work_authorized,'N') in ({{workAuth}}) or ('All' in ({{workAuth}})))
and ((project_status in {{projectStatus}}) or ('All' in ({{projectStatus}})))
and     a.planned_imp_date between (select add_months(max(planned_imp_date),-13) from wrf) 
                               and (select max(planned_imp_date) from wrf)
/*and upper(trim(a.release_version)) in (select distinct a.release_version from release_schedule a
, (select distinct release_version from release_schedule where trim(milestone_code) = 'M9'  
and release_date = (select min(release_date) from release_schedule where release_date > sysdate and trim(milestone_code) = 'M9' ) ) b
 where substr(a.release_version,-3,3) between substr(b.release_version,-3,3) - 30 and substr(b.release_version,-3,3) +50)*/
)
)
group by release_version,
req_id,
leading_func_area,
main_application
) grid , WRF c
where                         
grid.req_id = c.req_id(+) and
grid.req_id not like 'CR%'
and (upper(trim(grid.req_id)) like {reqId} or upper(trim(description)) like {reqId})
and ( upper(trim(grid.amdocs_owner)) like {employeeName}
or upper(trim(grid.att_owner)) like {employeeName}
or upper(trim(grid.assigned_to)) like {employeeName}
or upper(trim(grid.ba_owner)) like {employeeName} 
or upper(trim(grid.amdocs_sme_ba)) like {employeeName} )
order by
substr(grid.release_version,-3,3), length(grid.release_version),                            
grid.req_id,
grid.Last_ADB_Est,
grid.m1milestone,
grid.m3milestone,
grid.m4milestone,
grid.m5milestone,
grid.m8milestone,
grid.m9milestone
]]>
</statement>

</sql>