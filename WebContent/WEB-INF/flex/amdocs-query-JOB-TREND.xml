<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sql SYSTEM "amdocs-query-config.dtd">
<sql type="CdwSQL">

	<!--statement code="JOB_TRENDS_CHART_DATA">
		SELECT
		 	   a.job_name,
               a.job_rec,
               a.start_time,
               to_char(a.start_time,'(#ww) Mon-yyyy') start_week,
		       a.end_time,
		       a.rerun_num,
		       a.market,
		       (floor(((nvl(a.end_time,sysdate)-a.start_time)*24*60*60)/3600)
		          || ' Hrs ' ||
		          floor((((nvl(a.end_time,sysdate)-a.start_time)*24*60*60) -
		          floor(((nvl(a.end_time,sysdate)-a.start_time)*24*60*60)/3600)*3600)/60)
		          || ' Mins ')  run_time,
               round((nvl(a.end_time,sysdate)-a.start_time)*24*60*60/3600,2) run_time_new,
               round(b.avg_run_time/3600,2) avg_run_time          
		  FROM sla_batch_stat_summ_mv a, sla_avg_stat@dblink1 b
		 WHERE a.market ={market}                      
           AND to_date(to_char(a.START_TIME, 'mm/yyyy'),'mm/yyyy') between to_date(nvl({fromDate},to_char(add_months(sysdate,-6),'mm/yyyy')),'mm/yyyy')
           															   and to_date(nvl({toDate},to_char(sysdate,'mm/yyyy')),'mm/yyyy')
           AND a.status = 0         
		   AND a.job_name = {jobName}
           AND a.cycle_name = b.cycle_name
           AND a.job_rec = b.job_rec
           AND a.market = b.market
           AND a.job_name = b.job_name		   		                 
      ORDER BY a.start_time
	</statement-->
	
	<statement code="TOP_JOB_TRENDS_WEEKLY_CHART_DATA">
		select * from (
		SELECT
				 	   a.job_name,
				 	   a.cycle_id,
		               a.job_rec,
		               a.start_time,               
		               substr(cycle_id,5,2) ||'/'||substr(cycle_id,7,2) ||'/'|| substr(cycle_id,3,2) X_AXIS,
				       a.end_time,
				       a.rerun_num,
				       a.market,
				       (floor(((nvl(a.end_time,sysdate)-a.start_time)*24*60*60)/3600)
				          || ' Hrs ' ||
				          floor((((nvl(a.end_time,sysdate)-a.start_time)*24*60*60) -
				          floor(((nvl(a.end_time,sysdate)-a.start_time)*24*60*60)/3600)*3600)/60)
				          || ' Mins ')  run_time,                  
		               round((nvl(a.end_time,sysdate)-a.start_time)*24*60*60/3600,2) rounded_run_time,
		               b.avg_run_time,
		               b.avg_run_time_round rounded_avg_run_time                                       
				  FROM sla_batch_stat_summ_mv a, sla_batch_avg_stat_mv b
				 WHERE a.market = {market}
		           AND a.status = 0         
				   AND a.job_name = {jobName}
		           AND a.job_name = b.job_name
		           AND a.market = b.market
		           AND a.job_rec = b.job_rec                      		   		                
		      ORDER BY a.cycle_id desc
		) where rownum &lt; 13 
		ORDER BY cycle_id		
	</statement>
	
	<statement code="TOP_JOB_TRENDS_DAILY_CHART_DATA">
		select * from (
		SELECT
				 	   a.job_name,
				 	   a.cycle_id
		               a.job_rec,
		               a.start_time,               
		               substr(cycle_id,5,2) ||'/'||substr(cycle_id,7,2) ||'/'|| substr(cycle_id,3,2) X_AXIS,
				       a.end_time,
				       a.rerun_num,
				       a.market,
				       (floor(((nvl(a.end_time,sysdate)-a.start_time)*24*60*60)/3600)
				          || ' Hrs ' ||
				          floor((((nvl(a.end_time,sysdate)-a.start_time)*24*60*60) -
				          floor(((nvl(a.end_time,sysdate)-a.start_time)*24*60*60)/3600)*3600)/60)
				          || ' Mins ')  run_time,                  
		               round((nvl(a.end_time,sysdate)-a.start_time)*24*60*60/3600,2) rounded_run_time,
		               b.avg_run_time,
		               b.avg_run_time_round rounded_avg_run_time                                        
				  FROM sla_batch_stat_summ_mv a, sla_batch_avg_stat_mv b
				 WHERE a.market = {market}
		           AND a.status = 0         
				   AND a.job_name = {jobName}
		           AND a.job_name = b.job_name
		           AND a.market = b.market
		           AND a.job_rec = b.job_rec                      		   		                
		      ORDER BY a.cycle_id desc
		) where rownum &lt; 13
		ORDER BY cycle_id
	</statement>
	
	<statement code="TOP_JOB_TRENDS_CHART_DATA">
		select * from (
        SELECT
                       a.job_name,
                       a.OPPROG_DESCRIPTION job_desc,
                       a.job_rec,                                      
                       case when cycle_id in ('RunJobs','Immediate') then to_char(a.start_time,'mm/dd/yy')
                            else substr(cycle_id,5,2) ||'/'||substr(cycle_id,7,2) ||'/'|| substr(cycle_id,3,2) end X_AXIS,
                       case when cycle_id in ('RunJobs','Immediate') then to_char(a.start_time,'yymmdd')
                            else substr(cycle_id,3,2) || substr(cycle_id,5,2) || substr(cycle_id,7,2) end X_AXIS_SORT,
                       to_char(a.start_time,'mm/dd/yyyy hh24:mi:ss') start_time,
                       to_char(a.end_time,'mm/dd/yyyy hh24:mi:ss') end_time,
                       a.rerun_num,
                       a.market,
                       (floor(((nvl(a.end_time,sysdate)-a.start_time)*24*60*60)/3600)
                          || ' Hrs ' ||
                          floor((((nvl(a.end_time,sysdate)-a.start_time)*24*60*60) -
                          floor(((nvl(a.end_time,sysdate)-a.start_time)*24*60*60)/3600)*3600)/60)
                          || ' Mins ')  run_time,                  
                       round((nvl(a.end_time,sysdate)-a.start_time)*24*60*60/3600,2) rounded_run_time,
                       floor(((((nvl(a.end_time,sysdate)-a.start_time)*24*60*60)/3600)*3600)/60) rounded_run_time_min,
                       b.avg_run_time,
                       b.avg_run_time_min,
                       b.avg_run_time_round rounded_avg_run_time                                                              
                  FROM sla_batch_stat_summ_mv a, sla_batch_avg_stat_mv b
                 WHERE a.market = {market}
                   AND a.status = 0         
                   AND a.job_name = {jobName}
                   AND a.job_rec = {rec}
                   AND a.job_name = b.job_name
                   AND a.market = b.market
                   AND a.job_rec = b.job_rec                                                         
              ORDER BY X_AXIS_SORT desc
        ) where rownum &lt; 13 
        ORDER BY X_AXIS_SORT		
	</statement>		
	
	<statement code="GET_JOB_NAME">
		select 'All' label from dual
		union all
		SELECT DISTINCT a.job_name label          
          FROM sla_batch_stat_summ_mv a
         WHERE (a.job_rec  = {jobRec} or {jobRec} = 'All')
           AND (a.market = {market} or 'All' = {market} )
           AND a.status = 0
           AND to_char(a.start_time,'YYYYMMDD') >= to_char(add_months(sysdate, -12),'yyyymmdd')
           AND floor(((nvl(a.end_time,sysdate)-a.start_time)*24*60*60)/3600)&gt;=3
      ORDER BY label
	</statement>
	
	<statement code="GET_JOB_REC_NAME">
		 select 'All' label from dual
		 union all
		 SELECT DISTINCT job_rec label
           FROM sla_batch_stat_summ_mv
          WHERE (job_rec LIKE '%WEEKLY%'
             OR job_rec LIKE '%DAILY%')
             	AND (market = {market} or {market} = 'All')
                AND status = 0               
                and TO_CHAR (start_time, 'YYYYMMDD') >= TO_CHAR (ADD_MONTHS (SYSDATE, -12),'yyyymmdd')
                AND FLOOR (((NVL (end_time, SYSDATE) - start_time) *24*60*60)/ 3600) &gt;= 3
       ORDER BY label                
	</statement>
	<statement code="GET_JOB_TREND_GRID_DATA">
		select          job_name,job_desc,cycle_name,job_rec_actual,job_rec,start_time,end_time,rerun_num,market,avg_run_time,avg_run_time_round,                 
		                                case when t1/10 >= 1 then to_char(t1) else '0' || t1 end 
		                                || ' Hrs ' ||
		                                case when t2/10 >= 1 then to_char(t2) else '0' || t2 end || ' Mins ' run_time 
		from 
		(select
		                               a.job_name,
		                               a.opprog_description job_desc,
		                               a.cycle_name,
		                               a.job_rec job_rec_actual,
		                               (case when a.job_rec like '%DAILY%' then 'DAILY'
		                                             when a.job_rec like '%WEEKLY%' then 'WEEKLY'
		                                             when a.job_rec like '%MON%' then 'MON' end) job_rec,
		                               to_char(a.start_time,'mm/dd/yyyy hh24:mi:ss') start_time,
		                               to_char(a.end_time,'mm/dd/yyyy hh24:mi:ss') end_time,
		                               a.rerun_num,
		                               a.market,               
		                               floor(((nvl(a.end_time,sysdate)-a.start_time)*24*60*60)/3600) t1,
		                               floor((((nvl(a.end_time,sysdate)-a.start_time)*24*60*60) -
		                                  floor(((nvl(a.end_time,sysdate)-a.start_time)*24*60*60)/3600)*3600)/60) t2,
		                               (floor(((nvl(a.end_time,sysdate)-a.start_time)*24*60*60)/3600)
		                                  || ':' ||
		                                  floor((((nvl(a.end_time,sysdate)-a.start_time)*24*60*60) -
		                                  floor(((nvl(a.end_time,sysdate)-a.start_time)*24*60*60)/3600)*3600)/60))  run_time,
		                               c.avg_run_time,
		                               c.avg_run_time_round             
		from
		(select a.* from 
		(select /*+ parallel(a,4) */
		    a.*, row_number() over(partition by job_rec, job_name, market
		                           order by cycle_id desc) rnum
		from sla_batch_stat_summ_mv a
		where status = 0
		AND start_time BETWEEN SYSDATE - 8 AND SYSDATE
		and market = {market}) a
		where rnum = 1) a, sla_batch_avg_stat_mv c
		where a.job_name = c.job_name
		and a.market = c.market
		and a.job_rec = c.job_rec)
		--where rownum &gt;= 40
		order by run_time desc		
	</statement>
	
	
	<!--statement code="GET_JOB_TREND_GRID_DATA">
		select          job_name,job_desc,cycle_name,job_rec_actual,job_rec,start_time,end_time,rerun_num,market,avg_run_time,avg_run_time_round,                 
				                case when t1/10 >= 1 then to_char(t1) else '0' || t1 end 
				                || ' Hrs ' ||
				                case when t2/10 >= 1 then to_char(t2) else '0' || t2 end || ' Mins ' run_time 
				from
				(
				          SELECT
				               DISTINCT a.job_name,
				               a.opprog_description job_desc,
				               a.cycle_name,
				               a.job_rec job_rec_actual,
				               (case when a.job_rec like '%DAILY%' then 'DAILY'
                                    		 when a.job_rec like '%WEEKLY%' then 'WEEKLY'
                                    		 when a.job_rec like '%MON%' then 'MON' end) job_rec,
				               to_char(a.start_time,'mm/dd/yyyy hh24:mi:ss') start_time,
				               to_char(a.end_time,'mm/dd/yyyy hh24:mi:ss') end_time,
				               a.rerun_num,
				               a.market,               
		                       floor(((nvl(a.end_time,sysdate)-a.start_time)*24*60*60)/3600) t1,
		                       floor((((nvl(a.end_time,sysdate)-a.start_time)*24*60*60) -
		                          floor(((nvl(a.end_time,sysdate)-a.start_time)*24*60*60)/3600)*3600)/60) t2,
		                       (floor(((nvl(a.end_time,sysdate)-a.start_time)*24*60*60)/3600)
		                          || ':' ||
		                          floor((((nvl(a.end_time,sysdate)-a.start_time)*24*60*60) -
		                          floor(((nvl(a.end_time,sysdate)-a.start_time)*24*60*60)/3600)*3600)/60))  run_time,
		                       c.avg_run_time,
		                       c.avg_run_time_round             
		                  FROM             sla_batch_stat_summ_mv a ,
		                                  (SELECT DISTINCT job_rec, MAX (cycle_id) cycle_id, job_name
		                                              FROM sla_batch_stat_summ_mv a
		                                             WHERE a.status = 0
		                                               AND a.start_time BETWEEN SYSDATE - 8 AND SYSDATE
		                                               AND (((NVL(a.end_time, SYSDATE) - a.start_time)*24*60*60)/3600) >= 3
		                                          GROUP BY (job_rec, job_name)) b,
		                                  sla_batch_avg_stat_mv c                                         
		                                                                                                                                                                        
		                 WHERE a.cycle_id = b.cycle_id
		                 and a.job_rec = b.job_rec
		                 and a.job_name = b.job_name
		                 and a.job_name = c.job_name
		                 and a.market= c.market
		                 and a.job_rec = c.job_rec                  
		        )where rownum &lt; 40
		         order by run_time desc			
	</statement-->
	
	<statement code="GET_JOB_TREND_GRID_DATA_TEXT_SEARCH">
select          job_name,job_desc,cycle_name,job_rec_actual,job_rec,start_time,end_time,rerun_num,market,avg_run_time,avg_run_time_round,                 
		                                case when t1/10 >= 1 then to_char(t1) else '0' || t1 end 
		                                || ' Hrs ' ||
		                                case when t2/10 >= 1 then to_char(t2) else '0' || t2 end || ' Mins ' run_time 
		from 
		(select
		                               a.job_name,
		                               a.opprog_description job_desc,
		                               a.cycle_name,
		                               a.job_rec job_rec_actual,
		                               (case when a.job_rec like '%DAILY%' then 'DAILY'
		                                             when a.job_rec like '%WEEKLY%' then 'WEEKLY'
		                                             when a.job_rec like '%MON%' then 'MON' end) job_rec,
		                               to_char(a.start_time,'mm/dd/yyyy hh24:mi:ss') start_time,
		                               to_char(a.end_time,'mm/dd/yyyy hh24:mi:ss') end_time,
                                       a.rerun_num,
                                       a.market,               
                                       floor(((nvl(a.end_time,sysdate)-a.start_time)*24*60*60)/3600) t1,
                                       floor((((nvl(a.end_time,sysdate)-a.start_time)*24*60*60) -
                                          floor(((nvl(a.end_time,sysdate)-a.start_time)*24*60*60)/3600)*3600)/60) t2,
                                       (floor(((nvl(a.end_time,sysdate)-a.start_time)*24*60*60)/3600)
                                          || ':' ||
                                          floor((((nvl(a.end_time,sysdate)-a.start_time)*24*60*60) -
                                          floor(((nvl(a.end_time,sysdate)-a.start_time)*24*60*60)/3600)*3600)/60))  run_time,
                                       c.avg_run_time,
                                       c.avg_run_time_round             
        from
        (select a.* from 
        (select /*+ parallel(a,4) */
            a.*, row_number() over(partition by job_rec, job_name, market
                                   order by cycle_id desc) rnum
        from sla_batch_stat_summ_mv a
        where status = 0
        and (upper(a.job_name) like upper({input_text}) or upper(a.OPPROG_DESCRIPTION) like upper({input_text}))) a
        where rnum = 1) a, sla_batch_avg_stat_mv c
        where a.job_name = c.job_name
        and a.market = c.market
        and a.job_rec = c.job_rec)
        order by run_time desc	
	</statement>
	
	
	<!--statement code="GET_JOB_TREND_GRID_DATA_TEXT_SEARCH">
		select         a.job_name,
					   a.OPPROG_DESCRIPTION, 
		               a.cycle_name,
		               a.job_rec,               
		               to_char(a.start_time,'mm/dd/yyyy hh24:mi:ss') start_time,
		               to_char(a.end_time,'mm/dd/yyyy hh24:mi:ss') end_time,
		               a.rerun_num,
		               a.market,
		               (nvl(a.end_time,sysdate)-a.start_time) diff,
		               (floor(((nvl(a.end_time,sysdate)-a.start_time)*24*60*60)/3600)
		                  || ':' ||
		                  floor((((nvl(a.end_time,sysdate)-a.start_time)*24*60*60) -
		                  floor(((nvl(a.end_time,sysdate)-a.start_time)*24*60*60)/3600)*3600)/60))  run_time from sla_batch_stat_summ_mv a,
		                  (
		                    SELECT DISTINCT a.job_name, max(a.start_time) start_time    
		                      FROM             sla_batch_stat_summ_mv a
		                      where a.status = 0
		                        and a.market = 'D'
		                        and (upper(a.job_name) like upper({input_text}) or upper(a.OPPROG_DESCRIPTION) like upper({input_text}))
		                      group by a.job_name
		                      order by a.job_name ) b
		where a.job_name = b.job_name
		and a.start_time = b.start_time	
	</statement-->
	<!--statement code="GET_JOB_TREND_GRID_DATA_CUSTOMIZED">
		SELECT
		 	   DISTINCT a.job_name,
		 	   a.cycle_name,
               a.job_rec,
               a.start_time,
               a.start_time,
		       a.end_time,
		       a.rerun_num,
		       a.market,
		       (nvl(end_time,sysdate)-start_time) diff,
		       (floor(((nvl(a.end_time,sysdate)-a.start_time)*24*60*60)/3600)
		          || ' Hrs ' ||
		          floor((((nvl(a.end_time,sysdate)-a.start_time)*24*60*60) -
		          floor(((nvl(a.end_time,sysdate)-a.start_time)*24*60*60)/3600)*3600)/60)
		          || ' Mins ')  run_time          
          FROM             sla_batch_stat_summ_mv a ,
                          (select distinct cycle_name,max(cycle_id) cycle_id,job_name    
                          FROM sla_batch_stat_summ_mv a
                         WHERE a.market = {market}                                           
                           AND a.status = 0
                           AND to_date(to_char(a.START_TIME, 'mm/yyyy'),'mm/yyyy') &gt;= to_date(to_char(add_months(sysdate, -3),'mm/yyyy'),'mm/yyyy')
                           AND to_date(to_char(a.START_TIME,'mm/yyyy' ),'mm/yyyy') &lt;= to_date(to_char(sysdate,'mm/yyyy'),'mm/yyyy')                                                  
                           AND (a.cycle_name in ({cycle_name1},{cycle_name2}) or 'ALL' = {cycle_name1})
                           group by (cycle_name,job_name)) b
         WHERE a.cycle_id = b.cycle_id
         and a.cycle_name = b.cycle_name
         and a.job_name = b.job_name         
         order by diff desc     	
	</statement-->
	<statement code="GET_JOB_TREND_GRID_DATA_CUSTOMIZED">
		SELECT
		 	   DISTINCT a.job_name,
		 	   a.cycle_name,
               a.job_rec,
               a.start_time,
               a.start_time,
		       a.end_time,
		       a.rerun_num,
		       a.market,
		       (nvl(end_time,sysdate)-start_time) diff,
		       (floor(((nvl(a.end_time,sysdate)-a.start_time)*24*60*60)/3600)
		          || ' Hrs ' ||
		          floor((((nvl(a.end_time,sysdate)-a.start_time)*24*60*60) -
		          floor(((nvl(a.end_time,sysdate)-a.start_time)*24*60*60)/3600)*3600)/60)
		          || ' Mins ')  run_time          
          FROM             sla_batch_stat_summ_mv a ,
                          (select distinct cycle_name,max(cycle_id) cycle_id,job_name    
                          FROM sla_batch_stat_summ_mv a
                         WHERE a.status = 0
                           AND to_date(to_char(a.START_TIME, 'mm/yyyy'),'mm/yyyy') &gt;= to_date(to_char(add_months(sysdate, -3),'mm/yyyy'),'mm/yyyy')
                           AND to_date(to_char(a.START_TIME,'mm/yyyy' ),'mm/yyyy') &lt;= to_date(to_char(sysdate,'mm/yyyy'),'mm/yyyy')                                                  
                           AND (a.cycle_name in ({cycle_name1},{cycle_name2}) or 'ALL' = {cycle_name1})
                           group by (cycle_name,job_name)) b
         WHERE a.cycle_id = b.cycle_id
         and a.cycle_name = b.cycle_name
         and a.job_name = b.job_name         
         order by diff desc     	
	</statement>
	<statement code="GET_JOB_DESC">			
		select distinct a.job_name,b.opprog_description
		  from sla_batch_stat_summ_mv a, opprog b
		 where a.job_name = b.opprog_job_name (+)
		   and a.market = {market}
		   and job_rec = {job_rec}
		   and a.job_name = {job_name}	
	</statement>
	<statement code="GET_JOB_TREND_DATA_ALL">
		 select * from sla_batch_stat_summ_mv where market = 'D' 
      	and start_time between add_months(sysdate,-6) and sysdate
	</statement>
		
	<!-- Returns last load date for Job Trend data -->
	<statement code="JOB_TREND_LOAD_DATE">	
		select job_load_date from  dash_jobtrend_control
    </statement>
</sql>