<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sql SYSTEM "amdocs-query-config.dtd">
<sql type="CdwSQL">

    <statement code="ABRKPI_selectReportProperties">
select 'Last Data Refresh' label
     , to_char(load_date,'MM/DD/YYYY') description
from   abr_kpi_control
    </statement>

	<statement code="ABRKPI_selectReportTypeFilters">
select 'Y' id, 'By Year' display from dual
union all
select 'M' id, 'By Month' display from dual
union all
select 'X' id, 'Weekly Avg By Month' display from dual
union all
select 'W' id, 'By Week' display from dual
	</statement>

	<statement code="ABRKPI_selectReportYearFilters">
select   distinct prd_year id, prd_year display
from     abr_kpi_yr_categories  y
         cross join abr_kpi_control c
where    prd_year >= to_char(c.load_date,'YYYY') - 1
order by 1 desc
	</statement>

	<statement code="ABRKPI_selectReportPeriodFilters"><![CDATA[
select   to_char(report_period,'MM/DD/YYYY') id
       , to_char(report_period, (case when report_type in ('X','M') then 'FMMonth' else 'FMMonth dd' end)) display
from     (select     report_type
                  , (case when report_type in ('X','M') then add_months(end_report_period, -(level-1))
                          when report_type='W' then end_report_period - ((level-1)*7)
                          --when report_type='D' then start_report_period + (level-1)
                     end) report_period
                  , level lvl
          from      (select  {report_type} report_type
                           , (case {report_type} when 'X' then to_date('01'||{prd_year},'MMYYYY')
                                                 when 'M' then to_date('01'||{prd_year},'MMYYYY')
                                                 when 'W' then least(trunc(to_date('0101'||{prd_year},'MMDDYYYY'),'DAY'), trunc(load_date-91,'DAY')) + 1
                              end) start_report_period
                           , (case {report_type} when 'X' then least(to_date('12'||{prd_year},'MMYYYY'), trunc(load_date-7,'MM'))
                                                 when 'M' then least(to_date('12'||{prd_year},'MMYYYY'), trunc(load_date-7,'MM'))
                                                 when 'W' then least(trunc(to_date('1231'||{prd_year},'MMDDYYYY'),'DAY'), trunc(load_date-7,'DAY')) + 1
                              end) end_report_period
                     from     abr_kpi_control
                     where    {report_type} in ('M','X','W'))
          where      level <= (case when {report_type} = 'W' then 8 else 12 end)
          connect by level <= (case when report_type in ('X','M') then (months_between(end_report_period, start_report_period) + 1)
                                    when report_type='W' then ((end_report_period-start_report_period)/7)+1
                                    --when report_type='D' then end_report_period-start_report_period
                               end)
         )
order by lvl
	]]></statement>

	<statement code="ABRKPI_selectInitialReportLevel" paramsRequired="false">
select cat_type
     , cat_id
     , cat_name
     , 'X' report_type
     , to_char(load_date-7,'YYYY') prd_year
     , to_char(trunc(load_date-7,'MM'),'MM/DD/YYYY') report_period
from   abr_kpi_category
       cross join abr_kpi_control
where  cat_type = 'all'
and    {employee_id} = {employee_id}
	</statement>
	
	<statement code="ABRKPI_selectInitialHistoryTrail" paramsRequired="false"><![CDATA[
select   c.cat_type
       , c.cat_id
       , kpi_abr_cat_name_fnc({prd_year}, {report_type}, {report_period}, c.cat_type, c.cat_name) cat_name
from     (select id
               , c.prd_year
               , (case when id = 1 then 'all'
                       when id = 2 then 'region'
                       when id = 3 then 'channel'
                       when id = 4 then 'rvp_code'
                       when id = 5 then 'branch_code' end) cat_type
               , (case when id = 1 then 'ALL'
                       when id = 2 then c.region
                       when id = 3 then c.channel
                       when id = 4 then c.rvp_code
                       when id = 5 then c.branch_code end) cat_id
          from   (select level id from dual connect by level <= 5) gen
               , abr_kpi_yr_categories c
          where  c.prd_year = {prd_year}
          and    c.cat_type = {cat_type}
          and    c.cat_id = {cat_id}
          and    (  (c.cat_type = 'branch_code' and id in (1,2,4))
                 or (c.cat_type = 'rvp_code' and id in (1,2,3))
                 or (c.cat_type = 'channel' and id in (1,2))
                 or (c.cat_type = 'region') )
         ) a
         join abr_kpi_yr_categories b
           on a.prd_year = b.prd_year
          and a.cat_type = b.cat_type
          and a.cat_id = b.cat_id
         join abr_kpi_category c
           on b.cat_type = c.cat_type
          and b.cat_id = c.cat_id
order by a.id
	]]></statement>


	<statement code="ABRKPI_searchCategories" paramsRequired="false"><![CDATA[
select   cat_type
       , cat_id
       , cat_name
       , cat_desc
from     (select   yc.cat_type, yc.cat_id
                 , kpi_abr_cat_name_fnc({prd_year}, {report_type}, {report_period}, c.cat_type, c.cat_name) cat_name
                 , (case yc.cat_type
                         when 'region' then 'Region'
                         when 'channel' then 'Channel'
                         when 'rvp_code' then 'RVP'
                         when 'branch_code' then 'Branch'
                    end) cat_desc
                 , row_number() 
                       over(partition by 1
                            order by     instr(lower(c.cat_name), lower({search}))
                                       , cat_name) rnum 
          from     abr_kpi_yr_categories yc
                   join abr_kpi_category c
                     on yc.cat_type = c.cat_type
                    and yc.cat_id = c.cat_id
          where    lower(kpi_abr_cat_name_fnc({prd_year}, {report_type}, {report_period}, c.cat_type, c.cat_name)) like '%'||lower({search})||'%'
          and      yc.prd_year = {prd_year}
         )
where    rnum <= 30
order by rnum
	]]></statement>


	<statement code="ABRKPI_selectReportData" paramsRequired="false"><![CDATA[
select prd_year
     , report_period2 report_period
     , cat_type
     , cat_id
     , cat_name
     -- IYP_HNDL_AMT
     , iyp_hndl_amt
     , prev_iyp_hndl_amt     iyp_hndl_obj
     , (case when prev_iyp_hndl_amt <= 0 then sign(iyp_hndl_amt)
             else round((iyp_hndl_amt-prev_iyp_hndl_amt)/prev_iyp_hndl_amt,4)
         end) iyp_hndl_chg_pct
     , iyp_hndl_amt - prev_iyp_hndl_amt iyp_hndl_chg_amt
     -- IYP_INCREASE_AMT
     , iyp_increase_amt
     , prev_iyp_increase_amt     iyp_increase_obj
     , (case when prev_iyp_increase_amt <= 0 then sign(iyp_increase_amt)
             else round((iyp_increase_amt-prev_iyp_increase_amt)/prev_iyp_increase_amt,4)
         end) iyp_increase_chg_pct
     , iyp_increase_amt - prev_iyp_increase_amt iyp_increase_chg_amt
     -- IYP_OBL_AMT
     , iyp_obl_amt
     , prev_iyp_obl_amt     iyp_obl_obj
     , (case when prev_iyp_obl_amt <= 0 then sign(iyp_obl_amt)
             else round((iyp_obl_amt-prev_iyp_obl_amt)/prev_iyp_obl_amt,4)
         end) iyp_obl_chg_pct
     , iyp_obl_amt - prev_iyp_obl_amt iyp_obl_chg_amt
     -- IYP_NEW_AMT
     , iyp_new_amt
     , prev_iyp_new_amt     iyp_new_obj
     , (case when prev_iyp_new_amt <= 0 then sign(iyp_new_amt)
             else round((iyp_new_amt-prev_iyp_new_amt)/prev_iyp_new_amt,4)
         end) iyp_new_chg_pct
     , iyp_new_amt - prev_iyp_new_amt iyp_new_chg_amt
     -- IYP_SOLD_AMT
     , iyp_sold_amt
     , prev_iyp_sold_amt     iyp_sold_obj
     , (case when prev_iyp_sold_amt <= 0 then sign(iyp_sold_amt)
             else round((iyp_sold_amt-prev_iyp_sold_amt)/prev_iyp_sold_amt,4)
         end) iyp_sold_chg_pct
     , iyp_sold_amt - prev_iyp_sold_amt iyp_sold_chg_amt
     -- IYP_NET_AMT
     , iyp_net_amt
     , prev_iyp_net_amt     iyp_net_obj
     , (case when prev_iyp_net_amt <= 0 then sign(iyp_net_amt)
             else round((iyp_net_amt-prev_iyp_net_amt)/prev_iyp_net_amt,4)
         end) iyp_net_chg_pct
     , iyp_net_amt - prev_iyp_net_amt iyp_net_chg_amt
     , (case when prev_iyp_hndl_amt = 0 then 0 else prev_iyp_net_amt/prev_iyp_hndl_amt end) prev_iyp_net_srv_pct
     , (case when iyp_hndl_amt = 0 then 0 else iyp_net_amt/iyp_hndl_amt end) iyp_net_srv_pct
     , (case when prev_iyp_sold_amt <= 0 then sign(iyp_sold_amt) 
             else round(iyp_sold_amt/prev_iyp_sold_amt,4) - 1
        end) iyp_net_pct_growth
     , (case when iyp_hndl_amt = 0 then 0 else iyp_net_amt/iyp_hndl_amt end) - (case when prev_iyp_hndl_amt = 0 then 0 else prev_iyp_net_amt/prev_iyp_hndl_amt end) iyp_net_srv_pct_diff
from   (select   prd_year
               , report_period2
               , cat_type
               , cat_id
               , cat_name
               , sum(prev_iyp_hndl_amt)     prev_iyp_hndl_amt
               , sum(prev_iyp_increase_amt) prev_iyp_increase_amt
               , sum(prev_iyp_obl_amt)      prev_iyp_obl_amt
               , sum(prev_iyp_new_amt)      prev_iyp_new_amt
               , sum(prev_iyp_sold_amt)     prev_iyp_sold_amt
               , sum(prev_iyp_net_amt)      prev_iyp_net_amt
               , sum(iyp_hndl_amt)          iyp_hndl_amt
               , sum(iyp_increase_amt)      iyp_increase_amt
               , sum(iyp_obl_amt)           iyp_obl_amt
               , sum(iyp_new_amt)           iyp_new_amt
               , sum(iyp_sold_amt)          iyp_sold_amt
               , sum(iyp_net_amt)           iyp_net_amt
               , sum(iyp_hndl_amt-prev_iyp_hndl_amt) iyp_yoy_hndl_chg
               , sum(iyp_increase_amt-prev_iyp_increase_amt) iyp_yoy_increase_chg
               , sum(iyp_obl_amt-prev_iyp_obl_amt)   iyp_yoy_obl_chg
               , sum(iyp_new_amt-prev_iyp_new_amt)   iyp_yoy_new_chg
               , sum(iyp_sold_amt-prev_iyp_sold_amt) iyp_yoy_sold_chg
               , sum(iyp_net_amt-prev_iyp_net_amt)   iyp_yoy_net_chg
        from     (select  d.*
                       ,  kpi_abr_cat_name_fnc({prd_year}, {report_type}, {report_period}, d.cat_type, c.cat_name) cat_name
                  from    (select   nvl({cat_type},'all') cat_type
                                  , (case {cat_type}
                                          when 'branch_code' then s.branch_code
                                          when 'channel' then b.adj_chan_region
                                          when 'rvp_code' then b.rvp_code
                                          when 'region' then b.adj_region
                                          else 'ALL' end) cat_id
                                  , nvl({report_period},'YTD') report_period2
                                  , s.*
                           from     abr_kpi_smy_hist s
                                    join abr_kpi_branch_info b
                                      on s.branch_code = b.branch_code
                           where    s.branch_code = nvl({branch_code},s.branch_code)
                           and      b.adj_chan_region = nvl({channel},b.adj_chan_region)
                           and      b.rvp_code = nvl({rvp_code},b.rvp_code)
                           and      b.adj_region = nvl({region},b.adj_region)
                           and      s.report_type = {report_type}
                           and      s.prd_year = {prd_year}
                           and      s.report_period = nvl(to_date({report_period},'MM/DD/YYYY'),s.report_period)
                          ) d
                          left outer join abr_kpi_category c
                            on d.cat_type = c.cat_type
                           and d.cat_id = c.cat_id
                 )
        group by prd_year
               , cat_name
               , report_period2
               , cat_id
               , cat_type
       )
order by prd_year
       , cat_name
       , prev_iyp_sold_amt desc
	]]></statement>
	
	
	<statement code="ABRKPI_selectDetailData" paramsRequired="false"><![CDATA[
select dummy from dual
	]]></statement>
	
<statement code="ABRKPI_selectTrendChartData" paramsRequired="false"><![CDATA[
with report_ranges as
(select /*+ parallel(t,4) */
                     {data_field} data_field
                   , report_type
                   , prd_year
                   , min(report_period) start_report_period
                   , max(report_period) end_report_period
            from     abr_kpi_smy_hist t
            where    report_type = nvl(nullif({report_type},'Y'),'M')
            and      prd_year <= {prd_year}
            and      nvl(case {data_field}
                          when 'iyp_hndl_amt' then iyp_hndl_amt
                          when 'iyp_sold_amt' then iyp_sold_amt
                          when 'iyp_net_amt' then iyp_net_amt
                          when 'iyp_net_srv_pct' then round(case when iyp_hndl_amt = 0 then 0 else iyp_net_amt/iyp_hndl_amt end,1)
                          when 'iyp_sold_chg_amt' then iyp_sold_amt - prev_iyp_sold_amt
                          when 'iyp_net_pct_growth' then round(case when prev_iyp_sold_amt <= 0 and iyp_sold_amt = 0 then 0
                                                               when prev_iyp_sold_amt <= 0 then 1 
                                                               else round(iyp_sold_amt/prev_iyp_sold_amt,4) - 1
                                                          end,1)
                          when 'iyp_net_srv_pct_diff' then round((case when iyp_hndl_amt = 0 then 0 else iyp_net_amt/iyp_hndl_amt end) - (case when prev_iyp_hndl_amt = 0 then 0 else prev_iyp_net_amt/prev_iyp_hndl_amt end),1) 
                          when 'iyp_new_amt' then iyp_new_amt
                          when 'iyp_increase_amt' then iyp_increase_amt
                          when 'iyp_obl_amt' then iyp_obl_amt
                        end, 0) != 0
            group by report_type
                   , prd_year
), report_periods as
(select data_field
      , report_type
      , report_period
 from   (select    (case when report_type in ('M','X') then add_months(start_report_period,(level-1))
                         when report_type = 'W' then start_report_period + ((level-1)*7)
                         --when report_type = 'D' then start_report_period + (level-1)
                    end) report_date
                 , data_field
                 , report_type
                 , (case when report_type in ('M','X') then add_months(start_report_period,(level-1))
                         when report_type = 'W' then start_report_period + ((level-1)*7)
                         --when report_type = 'D' then start_report_period + (level-1)
                    end) report_period
                 , row_number() over(partition by 1 order by level desc) rnum
         from      (select /*+ parallel(t,4) */
                             {data_field} data_field
                           , report_type
                           , min(start_report_period) start_report_period
                           , max(end_report_period) end_report_period
                    from     report_ranges t
                    where    report_type = nvl(nullif({report_type},'Y'),'M')
                    and      prd_year <= {prd_year}
                    group by report_type
                   )
         connect by level <= (case when report_type in ('M','X') then (months_between(end_report_period, start_report_period) + 1)
                                   when report_type = 'W' then ((end_report_period-start_report_period)/7)+1
                                   --when report_type = 'D' then end_report_period-start_report_period
                               end)
         order by 1, 2
        ) t
 where  rnum <= 24
)
select   to_char(report_period,'MM/DD/YYYY') kpi_date
       , (case when report_type in ('M','X') then to_char(report_period,'Mon YYYY') 
               when report_type='W' then to_char(report_period,'Mon FMDD') 
               --when report_type = 'D' then to_char(report_period,'Mon D') 
          end)  kpi_date_lbl
       , sum(kpi_val) kpi_val
from     (select   p.report_period
                 , p.report_type
                 , nvl(case {data_field}
                          when 'iyp_hndl_amt' then iyp_hndl_amt
                          when 'iyp_sold_amt' then iyp_sold_amt
                          when 'iyp_net_amt' then iyp_net_amt
                          when 'iyp_net_srv_pct' then round(case when iyp_hndl_amt = 0 then 0 else iyp_net_amt/iyp_hndl_amt end,1)
                          when 'iyp_sold_chg_amt' then iyp_sold_amt - prev_iyp_sold_amt
                          when 'iyp_net_pct_growth' then round(case when prev_iyp_sold_amt <= 0 and iyp_sold_amt = 0 then 0
                                                               when prev_iyp_sold_amt <= 0 then 1 
                                                               else round(iyp_sold_amt/prev_iyp_sold_amt,4) - 1
                                                          end,1)
                          when 'iyp_net_srv_pct_diff' then round((case when iyp_hndl_amt = 0 then 0 else iyp_net_amt/iyp_hndl_amt end) - (case when prev_iyp_hndl_amt = 0 then 0 else prev_iyp_net_amt/prev_iyp_hndl_amt end),1) 
                          when 'iyp_new_amt' then iyp_new_amt
                          when 'iyp_increase_amt' then iyp_increase_amt
                          when 'iyp_obl_amt' then iyp_obl_amt
                        end, 0) kpi_val
          from     report_periods p
                   left outer join 
                      (select /*+ parallel(s,4) */ s.*
                       from   abr_kpi_smy_hist s
                              join abr_kpi_branch_info b
                                on s.branch_code = b.branch_code
                       where  s.prd_year <= {prd_year}
                       and    s.report_type = nvl(nullif({report_type},'Y'),'M')
                       and    s.branch_code = nvl({branch_code}, s.branch_code)
                       and    b.adj_chan_region = nvl({channel}, b.adj_chan_region)
                       and    b.rvp_code = nvl({rvp_code}, b.rvp_code)
                       and    b.adj_region = nvl({region}, b.adj_region)
                       ) h
                     on p.report_type = h.report_type
                    and p.report_period = h.report_period
         )
group by report_period
       , (case when report_type in ('M','X') then to_char(report_period,'Mon YYYY') 
               when report_type = 'W' then to_char(report_period,'Mon FMDD') 
               --when report_type = 'D' then to_char(report_period,'Mon D') 
          end)
order by report_period desc
	]]></statement>
	
	<statement code="ABRKPI_selectYOYChartData" paramsRequired="false"><![CDATA[
with report_periods as 
(select    data_field
         , report_type
         , (case when report_type in ('X','M') then add_months(end_report_period, -(level-1))
                 when report_type = 'W' then end_report_period - ((level-1)*7)
                 --when report_type = 'D' then start_report_period + (level-1)
            end) report_period
         , (case when report_type in ('X','M') then add_months(end_report_period, -(level-1) - 12)
                 when report_type = 'W' then trunc(add_months(end_report_period - ((level-1)*7), -12),'DAY') + 1
                 --when report_type = 'D' then start_report_period + (level-1)
            end) prev_report_period
 from      (select  {data_field} data_field
                  , report_type
                  , {prd_year} prd_year
                  , (case report_type when 'X' then to_date('01'||{prd_year},'MMYYYY')
                                      when 'M' then to_date('01'||{prd_year},'MMYYYY')
                                      when 'W' then least(trunc(to_date('0101'||{prd_year},'MMDDYYYY'),'DAY'), trunc(load_date-91,'DAY')) + 1
                     end) start_report_period
                  , (case report_type when 'X' then to_date('12'||{prd_year},'MMYYYY')
                                      when 'M' then to_date('12'||{prd_year},'MMYYYY')
                                      when 'W' then least(trunc(to_date('1231'||{prd_year},'MMDDYYYY'),'DAY'), trunc(load_date-7,'DAY')) + 1
                     end) end_report_period
             from   (select t.*
                          , nvl(nullif({report_type}, 'Y'),'M') report_type
                     from   abr_kpi_control t)
            )
 where      level <= 12
 connect by level <= (case when report_type='X' then (months_between(end_report_period, start_report_period) + 1)
                           when report_type='M' then (months_between(end_report_period, start_report_period) + 1)
                           when report_type='W' then ((end_report_period-start_report_period)/7)+1
                           --when report_type='D' then end_report_period-start_report_period
                      end)
 order by 3
)
select   to_char(nvl(curr.report_period, prev.report_period),'MM/DD/YYYY') kpi_date
       , (case when nvl(curr.report_type,prev.report_type) in ('X','M') then to_char(nvl(curr.report_period, prev.report_period),'Mon') 
               when nvl(curr.report_type,prev.report_type) = 'W' then to_char(nvl(curr.report_period, prev.report_period),'Mon FMDD') 
               --when nvl(curr.report_type,prev.report_type) = 'D' then to_char(nvl(curr.report_period, prev.report_period),'Mon D') 
          end)  kpi_date_lbl
       , nvl(prev.kpi_val,0) prev_kpi_val
       , nvl(curr.kpi_val,0) kpi_val
from     (select   p.report_period
                 , p.report_type
                 , sum(nvl(case p.data_field
                                when 'iyp_hndl_amt' then curr.iyp_hndl_amt
                                when 'iyp_sold_amt' then curr.iyp_sold_amt
                                when 'iyp_net_amt' then curr.iyp_net_amt
                                when 'iyp_net_srv_pct' then round(case when curr.iyp_hndl_amt = 0 then 0 else curr.iyp_net_amt/curr.iyp_hndl_amt end,1)
                                when 'iyp_sold_chg_amt' then curr.iyp_sold_amt - curr.prev_iyp_sold_amt
                                when 'iyp_net_pct_growth' then round(case when curr.prev_iyp_sold_amt <= 0 and curr.iyp_sold_amt = 0 then 0
                                                                     when curr.prev_iyp_sold_amt <= 0 then 1 
                                                                     else round(curr.iyp_sold_amt/curr.prev_iyp_sold_amt,4) - 1
                                                                end,1)
                                when 'iyp_net_srv_pct_diff' then round((case when curr.iyp_hndl_amt = 0 then 0 else curr.iyp_net_amt/curr.iyp_hndl_amt end) - (case when curr.prev_iyp_hndl_amt = 0 then 0 else curr.prev_iyp_net_amt/curr.prev_iyp_hndl_amt end),1) 
                                when 'iyp_new_amt' then curr.iyp_new_amt
                                when 'iyp_increase_amt' then curr.iyp_increase_amt
                                when 'iyp_obl_amt' then curr.iyp_obl_amt
                           end, 0)) kpi_val
          from     report_periods p
                   left outer join 
                      (select /*+ parallel(s,4) */ s.*
                       from   abr_kpi_smy_hist s
                              join abr_kpi_branch_info b
                                on s.branch_code = b.branch_code
                       where  s.prd_year = {prd_year}
                       and    s.report_type = nvl(nullif({report_type},'Y'),'M')
                       and    s.branch_code = nvl({branch_code}, s.branch_code)
                       and    b.adj_chan_region = nvl({channel}, b.adj_chan_region)
                       and    b.rvp_code = nvl({rvp_code}, b.rvp_code)
                       and    b.adj_region = nvl({region}, b.adj_region)
                       ) curr
                     on p.report_type = curr.report_type
                    and p.report_period = curr.report_period 
          group by  p.report_period
                  , p.report_type
         ) curr
         full outer join
         (select   p.report_period
                 , p.report_type
                 , sum(nvl(case p.data_field
                                when 'iyp_hndl_amt' then prev.iyp_hndl_amt
                                when 'iyp_sold_amt' then prev.iyp_sold_amt
                                when 'iyp_net_amt' then prev.iyp_net_amt
                                when 'iyp_net_srv_pct' then round(case when prev.iyp_hndl_amt = 0 then 0 else prev.iyp_net_amt/prev.iyp_hndl_amt end,1)
                                when 'iyp_sold_chg_amt' then prev.iyp_sold_amt - prev.prev_iyp_sold_amt
                                when 'iyp_net_pct_growth' then round(case when prev.prev_iyp_sold_amt <= 0 and prev.iyp_sold_amt = 0 then 0
                                                                     when prev.prev_iyp_sold_amt <= 0 then 1 
                                                                     else round(prev.iyp_sold_amt/prev.prev_iyp_sold_amt,4) - 1
                                                                end,1)
                                when 'iyp_net_srv_pct_diff' then round((case when prev.iyp_hndl_amt = 0 then 0 else prev.iyp_net_amt/prev.iyp_hndl_amt end) - (case when prev.prev_iyp_hndl_amt = 0 then 0 else prev.prev_iyp_net_amt/prev.prev_iyp_hndl_amt end),1) 
                                when 'iyp_new_amt' then prev.iyp_new_amt
                                when 'iyp_increase_amt' then prev.iyp_increase_amt
                                when 'iyp_obl_amt' then prev.iyp_obl_amt
                           end, 0)) kpi_val
          from     report_periods p
                   left outer join 
                      (select /*+ parallel(s,4) */ s.*
                       from   abr_kpi_smy_hist s
                              join abr_kpi_branch_info b
                                on s.branch_code = b.branch_code
                       where  s.prd_year = to_char({prd_year}-1)
                       and    s.report_type = nvl(nullif({report_type},'Y'),'M')
                       and    s.branch_code = nvl({branch_code}, s.branch_code)
                       and    b.adj_chan_region = nvl({channel}, b.adj_chan_region)
                       and    b.rvp_code = nvl({rvp_code}, b.rvp_code)
                       and    b.adj_region = nvl({region}, b.adj_region)
                       ) prev
                     on p.report_type = prev.report_type
                    and p.prev_report_period = prev.report_period
          group by p.report_period
                 , p.report_type
         ) prev
           on curr.report_type = prev.report_type
          and curr.report_period = prev.report_period
order by nvl(curr.report_period, prev.report_period) desc
	]]></statement>

</sql>