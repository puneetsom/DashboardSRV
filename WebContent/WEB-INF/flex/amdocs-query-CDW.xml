<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sql SYSTEM "amdocs-query-config.dtd">
<sql type="CdwSQL">
	<statement code="udacFacilityValueByCodeAndDate" clientObject="udacFacilityValue">
select UDAC_GROUP, FACILITY, VALUE
  from jh2168.DASH_SUMMARY
 where VALUE_CODE = {valueCode}
   and DATE_TYPE = {dateType}
   and DATE_VALUE = {dateValue}
	</statement>
	<statement code="dateUdacFacilityValueByCode" clientObject="udacFacilityValue">
select DATE_VALUE, FACILITY, UDAC_GROUP, sum(VALUE) as VALUE
  from jh2168.DASH_SUMMARY
 where VALUE_CODE = {valueCode}
   and DATE_TYPE = {dateType}
   and DATE_VALUE >= SYSDATE - 365
 group by DATE_VALUE, FACILITY, UDAC_GROUP
	</statement>	
	<statement code="socProductTypeCategory" clientObject="soc">
select distinct PRODUCT_TYPE, SOC_CATEGORY from SOC_TEMP
	</statement>
	<statement code="iypItemInventorySummary" clientObject="iypItemInventory">
SELECT   soc_category,
         DECODE (TYPE,
                 'Q', 'Query',
                 'E', 'EUE',
                 'R', 'Need reservation',
                 'A', 'Contract Not Closed',
                 'B', 'Contract Not Closed - PCP Rolled',
                 'C', 'Current Inventory [EFS]'
                ) "TYPE",
         COUNT (*) "Volume",
         ROUND (AVG (SYSDATE - signature_date)) "SignatureDate",
         ROUND (AVG (SYSDATE - open_date)) "OpenDate",
         ROUND (MAX (SYSDATE - signature_date)) "EarliestSignatureDate"
    FROM temp_int_item_pf a, soc_temp b
   WHERE a.udac_code = b.soc
     AND ( ('emptyParam') in ({{regionCode}})  
      OR REGION in ({{regionCode}}) )
GROUP BY soc_category, TYPE
UNION
SELECT   c.soc_category,
         'EUEs removed' "TYPE",
         COUNT (*) "Volume",
         ROUND (AVG (SYSDATE - signature_date)) "SignatureDate",
         ROUND (AVG (SYSDATE - open_date)) "OpenDate",
         ROUND (MAX (SYSDATE - signature_date)) "EarliestSignatureDate"
    FROM temp_int_item_pf a, soc_temp c
   WHERE TYPE = 'C'
     AND a.udac_code = c.soc
     AND requested_start_dt = open_date + fullfilment_period
     AND ( ('emptyParam') in ({{regionCode}})  
      OR REGION in ({{regionCode}}) )
GROUP BY c.soc_category, TYPE
ORDER BY soc_category
	</statement>
	<statement code="iypItemInventoryDetails" clientObject="iypItemInventory">
select CUSTOMER_ID,
       PRODUCT_CODE,
       PRODUCT_ISSUE_NUM,
       ITEM_ID,
       ITEM_VERSION,
       UDAC_CODE,
       ITEM_NISD_AMT,
       ITEM_BOTS_AMT,
       QUERY,
       CLOSED_CONTRACT_IND,
       FULFILLMENT_STATUS,
       DELIQUENT_IND,
       REQUESTED_START_DT,
       REQUESTED_END_DT,
       ACTUAL_START_DATE,
       ACTUAL_END_DATE,
       PREV_ACT_START_DT,
       PREV_ACT_END_DT,
       EARLY_DOWN_REASON_CD,
       OPEN_DATE,
       SIGNATURE_DATE,
       CONTRACT_ID,
       CONTRACT_SEQ_NUM,
       TYPE,
       REGION
  from TEMP_INT_ITEM_PF
 where UDAC_CODE in (select SOC from SOC_TEMP where SOC_CATEGORY = {socCategory})
   AND ( ('emptyParam') in ({{regionCode}})  
    OR REGION in ({{regionCode}}) )
   AND ( ('emptyParam') in ({{typeCode}})  
    OR TYPE in ({{typeCode}}) )
 order by CUSTOMER_ID
	</statement>
	<statement code="iypItemInventoryDetailsByCategories" clientObject="iypItemInventory">
select CUSTOMER_ID,
       PRODUCT_CODE,
       PRODUCT_ISSUE_NUM,
       ITEM_ID,
       ITEM_VERSION,
       UDAC_CODE,
       ITEM_NISD_AMT,
       ITEM_BOTS_AMT,
       QUERY,
       CLOSED_CONTRACT_IND,
       FULFILLMENT_STATUS,
       DELIQUENT_IND,
       REQUESTED_START_DT,
       REQUESTED_END_DT,
       ACTUAL_START_DATE,
       ACTUAL_END_DATE,
       PREV_ACT_START_DT,
       PREV_ACT_END_DT,
       EARLY_DOWN_REASON_CD,
       OPEN_DATE,
       SIGNATURE_DATE,
       CONTRACT_ID,
       CONTRACT_SEQ_NUM,
       TYPE,
       REGION
  from TEMP_INT_ITEM_PF
 where ( ('emptyParam') in ({{regionCode}})  
    OR REGION in ({{regionCode}}) )
   AND UDAC_CODE in (select SOC from SOC_TEMP where SOC_CATEGORY in {{socCategories}})
   AND ( ('emptyParam') in ({{typeCode}})  
    OR TYPE in ({{typeCode}}) )
 order by CUSTOMER_ID
	</statement>
	<statement code="itemsBilledSummaryByMonth">
select decode(TYPE,
               'O', 'Items Keyed',
               'S', 'Items Received by Fulfillment',
               'E', 'Items Fulfilled',
               'L', 'Items Billed') TYPE, count(*) COUNT
  from TEMP_INT_ITEM_LIVE A, SOC_TEMP B
 where A.UDAC_CODE = B.SOC
   and ( ('emptyParam') in ({{regionCode}})  
    or REGION in ({{regionCode}}) ) 
   and ( ('emptyParam') in ({{socCategories}})  
    or SOC_CATEGORY in ({{socCategories}}) )
 group by TYPE
	</statement>
	<statement code="itemsBilledDetailsByCategoryType">
select * from TEMP_INT_ITEM_LIVE a, soc_temp b
 where a.udac_code = b.soc
   and ( ('emptyParam') in ({{regionCode}})  
    or REGION in ({{regionCode}}) )
   and ( ('emptyParam') in ({{socCategories}})  
    or SOC_CATEGORY in ({{socCategories}}) )
   and TYPE = {type}
	</statement>
	<statement code="cycleTimeVolumeByMonth">
select SOC_CATEGORY, count(*) "Cycle Time Volume"
  from (select A.* from TEMP_INT_ITEM_LIVE A where TYPE = 'L'
         minus
        select * from TEMP_INT_ITEM_LIVE Q
         where ((REQUESTED_START_DT - OPEN_DATE &lt;&gt; 7
           and OPEN_DATE &lt; to_date('20100101','YYYYMMDD'))
            or (REQUESTED_START_DT - OPEN_DATE &lt;&gt; 15 
            and OPEN_DATE &gt; to_date('20100101','YYYYMMDD')))
           and TYPE = 'L'     
         minus
        select I.* from TEMP_INT_ITEM_LIVE I
         where I.ACTION_CODE &lt;&gt; 'I'
           and NVL(I.CLOSED_CONTRACT_IND, ' ') &lt;&gt; 'C'
           and TYPE = 'L') V, SOC_TEMP B
 where V.UDAC_CODE = B.SOC
   and ( ('emptyParam') in ({{regionCode}})  
    or REGION in ({{regionCode}}) )
 group by SOC_CATEGORY
	</statement>
	<statement code="cycleTimeBreakDownByCategoryAndMonth">
select soc_category, round(avg(SIGNAL_TO_BILL),2) "Signal to Bill",round(avg(SIG_TO_KEY),2) "sig to key",round(avg(KEY_TO_PROCESS_START),2) "key to process start",round(avg(PROCESS_START_TO_PROCESS_END),2)"process start to process end",round(avg(PROCESS_END_TO_BILL),2)"process end to bill"
 from (select soc_category,round(avg(live_date -signature_date),2) "SIGNAL_TO_BILL",
round(avg(open_date-signature_date),2) "SIG_TO_KEY",
round(avg(trunc(process_start_time) - open_date),2) "KEY_TO_PROCESS_START",
round(avg(trunc(process_end_time) - trunc(process_start_time)),2) "PROCESS_START_TO_PROCESS_END",
round(avg(live_date - trunc(process_end_time)),2)  "PROCESS_END_TO_BILL" 
from TEMP_INT_ITEM_LIVE v, soc_temp s
where type = 'L'
  and contract_date - signature_date &lt;= 90
  and v.udac_code = s.soc
  and ( ('emptyParam') in ({{regionCode}})  
   or REGION in ({{regionCode}}) )
  group by s.soc_category
UNION 
select soc_category,round(avg(live_date -contract_date),2) "SIGNAL_TO_BILL",
round(avg(open_date-contract_date),2) "SIG_TO_KEY",
round(avg(trunc(process_start_time) - open_date),2) "KEY_TO_PROCESS_START",
round(avg(trunc(process_end_time) - trunc(process_start_time)),2) "PROCESS_START_TO_PROCESS_END",
round(avg(live_date - trunc(process_end_time)),2)  "PROCESS_END_TO_BILL" 
from TEMP_INT_ITEM_LIVE v, soc_temp s
where type = 'L'
  and contract_date - signature_date &gt; 90
  and v.udac_code = s.soc
  and ( ('emptyParam') in ({{regionCode}})  
   or REGION in ({{regionCode}}) )
 group by s.soc_category) v group by v.soc_category 
	</statement>
	<statement code="cycleTimeDetailsByCategory">
select * from
  (select a.* from TEMP_INT_ITEM_LIVE a where type = 'L'
    minus
   select * from TEMP_INT_ITEM_LIVE q
    where ((requested_start_dt - open_date &lt;&gt; 7 and open_date &lt; to_date('20100101','YYYYMMDD'))
        or (requested_start_dt - open_date &lt;&gt; 15 and open_date &gt; to_date('20100101','YYYYMMDD')))
      and type = 'L'
    minus
   select i.* from TEMP_INT_ITEM_LIVE i
    where i.action_code &lt;&gt; 'I'
      and nvl(i.closed_contract_ind, ' ') &lt;&gt; 'C'
      and type = 'L') v, soc_temp b
  where v.udac_code = b.soc
   and ( ('emptyParam') in ({{regionCode}})  
    or REGION in ({{regionCode}}) )
   and ( ('emptyParam') in ({{socCategories}})  
    or SOC_CATEGORY in ({{socCategories}}) )
	</statement>
	<statement code="cycleTimeInTarget">
select count(*) "In Target" from (select v.*,contract_date - signature_date,
case when open_date &lt; TO_DATE ('20100110', 'YYYYMMDD') then (live_date-signature_date) -19 else (live_date-signature_date) end "DIFF1",
case when open_date &lt; TO_DATE ('20100110', 'YYYYMMDD') then (live_date-contract_date) -19 else (live_date-contract_date) end "DIFF2" from 
	(SELECT a.*
       FROM TEMP_INT_ITEM_LIVE a where type = 'L'
       MINUS
     SELECT *
       FROM TEMP_INT_ITEM_LIVE q 
      WHERE type = 'L'
        AND (  (  requested_start_dt - open_date &lt;&gt; 7
        AND open_date &lt; TO_DATE ('20100101', 'YYYYMMDD') )
           OR (   requested_start_dt - open_date &lt;&gt; 15
              AND open_date &gt; TO_DATE ('20100101', 'YYYYMMDD') ) )
       MINUS
      SELECT i.*
        FROM TEMP_INT_ITEM_LIVE i 
       WHERE type = 'L' and i.action_code &lt;&gt; 'I'
         AND NVL (i.closed_contract_ind, ' ') &lt;&gt; 'C') v, soc_temp b
       WHERE v.udac_code = b.soc        
		 and ( ('emptyParam') in ({{regionCode}})  
		  or V.REGION in ({{regionCode}}) )
		 and ( ('emptyParam') in ({{socCategories}})  
		  or B.SOC_CATEGORY in ({{socCategories}}) )
         ) v
 where (DIFF1 &lt;= 10 and (contract_date - signature_date) &lt;= 90) or
       (DIFF2 &lt;= 10 and (contract_date - signature_date) &gt; 90) 
	</statement>	



	
	<statement code="HDDSupportAreaQuery" clientObject="HelpDeskDashboard">
		select ' ALL' label from dual union all 
		select distinct support_category from helpdesk_group where trim(support_category) is not null  order by 1
	</statement>
	
	<statement code="HDDDirectorQuery" clientObject="HelpDeskDashboard">
		select ' ALL' label from dual union all
		select distinct group_manager from helpdesk_group where trim(group_manager) is not null order by 1
	</statement>
	
	<statement code="HDDSupportGroupQuery" clientObject="HelpDeskDashboard">
		select ' ALL' label from dual union all 
		select distinct assign_group label from helpdesk_group a
		where ( ' ALL' = {director}
		or group_manager = {director} )  
		and ( ' ALL' = {pm}
		or group_pm = {pm} ) order by 1
	</statement>
	
	<statement code="HDDPMQuery" clientObject="HelpDeskDashboard">
		select ' ALL' label from dual union all 
		select distinct group_pm from helpdesk_group 
		where trim(group_pm) is not null and (group_manager = {director} or {director} = ' ALL') order by 1
	</statement>
	
	
	<statement code="HDDSLAResponseChartQuery" clientObject="HelpDeskDashboard">
		SELECT
			to_char(to_date(CREATED_MONTH,'yyyymm'),'mm-yyyy') CREATED_MONTH,
			IN_TARGET,
			RISK,
			OUT_TARGET,
			CASE WHEN IN_TARGET + OUT_TARGET &gt; 0 THEN IN_TARGET / (IN_TARGET + OUT_TARGET) ELSE 0 END TARGET_PCT
		FROM
		(SELECT /*+ parallel(a,6) */
			TO_CHAR(CREATED_ON,'YYYYMM') CREATED_MONTH,
			SUM(CASE WHEN RESPONSE_TARGET_IND = 'IN'  THEN 1 ELSE 0 END) IN_TARGET,
			SUM(CASE WHEN RESPONSE_TARGET_IND = 'RISK'  THEN 1 ELSE 0 END) RISK,
			SUM(CASE WHEN RESPONSE_TARGET_IND = 'OUT' THEN 1 ELSE 0 END) OUT_TARGET
		FROM
			DASH_HELPDESK a
		WHERE
		TO_CHAR(CREATED_ON,'YYYYMM') 	&gt;= TO_CHAR(ADD_MONTHS(SYSDATE,-5),'YYYYMM')
		AND	TO_CHAR(CREATED_ON,'YYYYMM') 	&lt;= TO_CHAR(SYSDATE,'YYYYMM')				
		AND	(GROUP_MANAGER			= {director}
		OR	{director}			=  ' ALL')
		AND	(GROUP_PM			= {pm}
		OR	{pm}				=  ' ALL')
		AND	(ASSIGN_GROUP			= {supportGroup}
		OR	{supportGroup}			=  ' ALL')
		AND	(PRIORITY			= {ticketPriority}
		OR	{ticketPriority}			= ' ALL')
		GROUP BY
			TO_CHAR(CREATED_ON,'YYYYMM'))
		ORDER BY
			TO_DATE(CREATED_MONTH,'MM-YYYY')		
	</statement>
	
	<statement code="HDDSLARepairChartQuery" clientObject="HelpDeskDashboard">
		SELECT
			to_char(to_date(SUB_MONTH,'yyyymm'),'mm-yyyy') SUB_MONTH,
			IN_TARGET,
			RISK,
			OUT_TARGET,
			CASE WHEN IN_TARGET + OUT_TARGET &gt; 0 THEN IN_TARGET / (IN_TARGET + OUT_TARGET) ELSE 0 END TARGET_PCT
		FROM
		(SELECT /*+ parallel(a,6) */
			TO_CHAR(SUBMITTED_DATE,'YYYYMM') SUB_MONTH,
			SUM(CASE WHEN REPAIR_TARGET_IND = 'IN'  THEN 1 ELSE 0 END) IN_TARGET,
			SUM(CASE WHEN REPAIR_TARGET_IND = 'RISK'  THEN 1 ELSE 0 END) RISK,
			SUM(CASE WHEN REPAIR_TARGET_IND = 'OUT' THEN 1 ELSE 0 END) OUT_TARGET
		FROM
			DASH_HELPDESK a
		WHERE
			TO_CHAR(CREATED_ON,'YYYYMM') 	&gt;= TO_CHAR(ADD_MONTHS(SYSDATE,-5),'YYYYMM')
		AND	TO_CHAR(CREATED_ON,'YYYYMM') 	&lt;= TO_CHAR(SYSDATE,'YYYYMM')
		AND	(GROUP_MANAGER			= {director}
		OR	{director}			=  ' ALL')
		AND	(GROUP_PM			= {pm}
		OR	{pm}				=  ' ALL')
		AND	(ASSIGN_GROUP			= {supportGroup}
		OR	{supportGroup}			=  ' ALL')
		AND	(PRIORITY			= {ticketPriority}
		OR	{ticketPriority}			= ' ALL')
		GROUP BY
			TO_CHAR(SUBMITTED_DATE,'YYYYMM'))
		ORDER BY
			TO_DATE(SUB_MONTH,'MM-YYYY')
	</statement>
	
	
	<statement code="HDDSLAResolutionChartQuery" clientObject="HelpDeskDashboard">
		SELECT
			to_char(to_date(SUB_MONTH,'yyyymm'),'mm-yyyy') SUB_MONTH,
			IN_TARGET,
			RISK,
			OUT_TARGET,
			CASE WHEN IN_TARGET + OUT_TARGET &gt; 0 THEN IN_TARGET / (IN_TARGET + OUT_TARGET) ELSE 0 END TARGET_PCT
		FROM
		(SELECT /*+ parallel(a,6) */
			TO_CHAR(SUBMITTED_DATE,'YYYYMM') SUB_MONTH,
			SUM(CASE WHEN RESOLUTION_TARGET_IND = 'IN'  THEN 1 ELSE 0 END) IN_TARGET,
			SUM(CASE WHEN RESOLUTION_TARGET_IND = 'RISK'  THEN 1 ELSE 0 END) RISK,
			SUM(CASE WHEN RESOLUTION_TARGET_IND = 'OUT' THEN 1 ELSE 0 END) OUT_TARGET
		FROM
			DASH_HELPDESK a
		WHERE
			TO_CHAR(CREATED_ON,'YYYYMM') 	&gt;= TO_CHAR(ADD_MONTHS(SYSDATE,-5),'YYYYMM')
		AND	TO_CHAR(CREATED_ON,'YYYYMM') 	&lt;= TO_CHAR(SYSDATE,'YYYYMM')
		AND	(GROUP_MANAGER		= {director}
		OR	{director}			=  ' ALL')
		AND	(GROUP_PM			= {pm}
		OR	{pm}				=  ' ALL')
		AND	(ASSIGN_GROUP		= {supportGroup}
		OR	{supportGroup}		=  ' ALL')
		AND	(PRIORITY			= {ticketPriority}
		OR	{ticketPriority}	= ' ALL')
		GROUP BY
			TO_CHAR(SUBMITTED_DATE,'YYYYMM'))
		ORDER BY
			TO_DATE(SUB_MONTH,'MM-YYYY')
	</statement>		
	
	<statement code="HDDMonthQuery" clientObject="HelpDeskDashboard">
  select to_char(sysdate,'yyyymm') value,  to_char(sysdate,'MON YYYY') label from dual
union all
select to_char(add_months(sysdate,-1),'yyyymm') value,  to_char(add_months(sysdate,-1),'MON YYYY') label from dual
union all
select to_char(add_months(sysdate,-2),'yyyymm') value,  to_char(add_months(sysdate,-2),'MON YYYY') label from dual
union all
select to_char(add_months(sysdate,-3),'yyyymm') value,  to_char(add_months(sysdate,-3),'MON YYYY') label from dual
union all
select to_char(add_months(sysdate,-4),'yyyymm') value,  to_char(add_months(sysdate,-4),'MON YYYY') label from dual
union all
select to_char(add_months(sysdate,-5),'yyyymm') value,  to_char(add_months(sysdate,-5),'MON YYYY') label from dual
	</statement>
	
	<statement code="HDDGridQuery" clientObject="HelpDeskDashboard">
select /*+ full(a) parallel(a,6) */
TICKET_ID
,TO_CHAR(TO_DATE(OPEN_MONTH,'YYYYMM'),'MM-YYYY') OPEN_MONTH
,ASSIGN_GROUP
,TICKET_STATUS
,SUPPORT_CATEGORY
,to_char(SUBMITTED_DATE,'mm/dd/yyyy hh24:mi:ss') SUBMITTED_DATE 
,to_char(RESOLVED_DATE,'mm/dd/yyyy hh24:mi:ss') RESOLVED_DATE
,(nvl(to_date(to_char(RESOLVED_DATE,'MMDDYYYY'),'MMDDYYYY'),to_date(to_char(sysdate,'MMDDYYYY'),'MMDDYYYY'))  
- to_date(to_char(SUBMITTED_DATE,'MMDDYYYY'),'MMDDYYYY')) TICKET_AGE
,ASSIGNEE
,LAST_MODIFIED_BY
,PRIORITY
,STATUS
,PENDING
,CATEGORY
,TYPE
,ITEM
,SUMMARY
,REPLACE(REPLACE(REPLACE(solution_summary, CHR(10), ''), CHR(13), ''), CHR(9), '') SOLUTION_SUMMARY
,ROOT_CAUSE
,REGION
,SITE
,ORIG_SUBMITTER
,SUBMITTER_NAME
,RESOLUTION_CATEGORY
,RESOLUTION_CATEGORY_TIER_2
,STATUS_REASON_DESC
,DEPARTMENT
,to_char(REPAIRED_TIME, 'mm/dd/yyyy hh24:mi:ss') REPAIRED_TIME 
,CUS_STATUS_REASON
,ASSIGNED_GROUP1
,to_char(START_ASSIGNED_TIME1, 'mm/dd/yyyy hh24:mi:ss') START_ASSIGNED_TIME1
,TOTAL_TIME_SPENT_IN_ASSIGNED1
,to_char(END_ASSIGNED_TIME1,'mm/dd/yyyy hh24:mi:ss') END_ASSIGNED_TIME1
,to_char(CREATED_ON,'mm/dd/yyyy hh24:mi:ss') CREATED_ON
,RESOLUTION_CATEGORY_AUDIT
,GROUP_MANAGER
,GROUP_PM
,SLA_BYPASS_IND
,DESKTOP_IND
,RESPONSE_TARGET_IND
,REPAIR_TARGET_IND
,RESOLUTION_TARGET_IND
,REPORTED_SOURCE 
,REPORTED_SOURCE_AUDIT
from dash_helpdesk a
where 
	(GROUP_MANAGER			= {director}
		OR	{director}		=  ' ALL')
		AND	(GROUP_PM		= {pm}
		OR	{pm}			=  ' ALL')
		AND	(ASSIGN_GROUP	= {supportGroup}
		OR	{supportGroup}	=  ' ALL')
		AND	(PRIORITY		= {ticketPriority}
		OR	{ticketPriority}= ' ALL')
		AND TO_CHAR(SUBMITTED_DATE,'YYYYMM')     = TO_CHAR(SYSDATE,'YYYYMM')		
	</statement>
	
	<statement code="HDDSubmittedTrendChartQuery" clientObject="HelpDeskDashboard">
		select * from
(
select
curr.support_category,
Initcap(curr.support_group) support_group,
curr.open_ticket_count,
curr.close_ticket_count resolvedTickets ,
curr.submitted_tickets submittedTickets,
round((aver.open_ticket_avg * (case when to_char(sysdate,'yyyymm') = to_char(sysdate,'yyyymm') then to_number(to_char(sysdate,'dd'))/30 else 1 end)),1) open_ticket_wavg,
round((aver.close_ticket_avg * (case when to_char(sysdate,'yyyymm') = to_char(sysdate,'yyyymm') then to_number(to_char(sysdate,'dd'))/30 else 1 end)),1)  projResolvedTickets,
round((aver.submitted_tickets_avg * (case when to_char(sysdate,'yyyymm') = to_char(sysdate,'yyyymm') then to_number(to_char(sysdate,'dd'))/30 else 1 end)),1)  projSubmittedTickets,
curr.open_ticket_count - round((aver.open_ticket_avg * (case when to_char(sysdate,'yyyymm') = to_char(sysdate,'yyyymm') then to_number(to_char(sysdate,'dd'))/30 else 1 end)),1) open_ticket_diff,
curr.close_ticket_count - round((aver.close_ticket_avg * (case when to_char(sysdate,'yyyymm') = to_char(sysdate,'yyyymm') then to_number(to_char(sysdate,'dd'))/30 else 1 end)),1) close_ticket_diff,
curr.submitted_tickets - round((aver.submitted_tickets_avg * (case when to_char(sysdate,'yyyymm') = to_char(sysdate,'yyyymm') then to_number(to_char(sysdate,'dd'))/30 else 1 end)),1) submitted_tickets_diff
from
(select /*+ full(a) parallel(a,6) */
support_category, 
support_group, 
round(open_ticket_count /6,1) open_ticket_avg,
round(close_ticket_count /6,1) close_ticket_avg,
round(submitted_tickets /6,1) submitted_tickets_avg
from
(select /*+ full(a) parallel(a,6) */
a.SUPPORT_CATEGORY,
trim(a.ASSIGN_GROUP) support_group,
sum(case when a.RESOLVED_DATE is null then 1 else 0 end) open_ticket_count,
sum(case when a.RESOLVED_DATE is not null 
            and 
            (  to_char(a.resolved_date,'yyyymm') &gt;= to_char(add_months(param.month ,-6),'yyyymm'))
      	and
      	( to_char(a.resolved_date,'yyyymm') &lt;= to_char(add_months(param.month ,-1),'yyyymm'))
           then 1 else 0 end) close_ticket_count,
--count(*) submitted_tickets
sum(case when to_char(a.submitted_date,'yyyymm') &gt;= to_char(add_months(param.month ,-6),'yyyymm')
and to_char(a.submitted_date,'yyyymm') &lt;= to_char(add_months(param.month ,-1),'yyyymm')
then 1 else 0 end) submitted_tickets

from dash_helpdesk a,
(select trunc(sysdate,'MM') month from dual) param
where (
    (
    	(to_char(a.submitted_date,'yyyymm') &gt;= to_char(add_months(param.month ,-6),'yyyymm'))
      	and
      	 (to_char(a.submitted_date,'yyyymm') &lt;= to_char(add_months(param.month ,-1),'yyyymm'))
      ) 
    OR
    (
    	(to_char(a.resolved_date,'yyyymm') &gt;= to_char(add_months(param.month ,-6),'yyyymm'))
      	and
      	(to_char(a.resolved_date,'yyyymm') &lt;= to_char(add_months(param.month ,-1),'yyyymm'))
      ) 
      )        
group by 
a.support_category,
trim(a.ASSIGN_GROUP))) aver,
(select 
a.support_category,
trim(a.ASSIGN_GROUP) support_group,
sum(case when a.resolved_date is null then 1 else 0 end) open_ticket_count,
sum(case when a.resolved_date is not null  and (to_char(a.resolved_date,'yyyymm') = to_char(sysdate,'yyyymm'))  then 1 else 0 end) close_ticket_count,
sum( case when (to_char(a.submitted_date,'yyyymm') = to_char(sysdate,'yyyymm')) then 1 else 0 end) submitted_tickets
from dash_helpdesk a
where (to_char(a.submitted_date,'yyyymm') = to_char(sysdate,'yyyymm')
     or
   to_char(a.resolved_date,'yyyymm') = to_char(sysdate,'yyyymm')) 
group by 
a.support_category,
trim(a.ASSIGN_GROUP)) Curr
where
    curr.support_category = aver.support_category (+)
and curr.support_group    = aver.support_group (+) 
and ( 'emptyParam' = {supportGroup}
     or  curr.support_group = {supportGroup} or {supportGroup} = ' ALL' ) 
order by
    1, 11 desc, 2
    )
    where rownum &lt;11
    </statement>
    
        <statement code="HDDSubmittedTrendChartQuery1" clientObject="HelpDeskDashboard">
	select 
	to_char(to_date(sub_month,'yyyymm'),'mm-yyyy') sub_month
	,open_ticket_count
	,close_ticket_count resolvedTickets
	,submitted_tickets submittedTickets
	,open_ticket_wavg
	,close_ticket_wavg projResolvedTickets
	,submitted_tickets_wavg projSubmittedTickets
	from
	(
	select
	curr.sub_month,
	curr.open_ticket_count,
	curr.close_ticket_count,
	curr.submitted_tickets,
	aver.open_ticket_count_6,
	aver.close_ticket_count_6,
	aver.submitted_tickets_6,
	aver.open_ticket_avg op_6_avg,
	aver.close_ticket_avg cl_6_avg,
	aver.submitted_tickets_avg sb_6_avg,
	aver.open_ticket_avg open_ticket_wavg,
	aver.close_ticket_avg close_ticket_wavg,
	aver.submitted_tickets_avg submitted_tickets_wavg,
	curr.open_ticket_count - aver.open_ticket_avg open_ticket_diff,
	curr.close_ticket_count - aver.close_ticket_avg close_ticket_diff,
	curr.submitted_tickets - aver.submitted_tickets_avg submitted_tickets_diff
	from
	(select
	ropen.open_ticket_count open_ticket_count_6,
	nvl(rclose.close_ticket_count,0) close_ticket_count_6,
	ropen.submitted_tickets submitted_tickets_6,
	round(ropen.open_ticket_count /6,1) open_ticket_avg,
	round(nvl(rclose.close_ticket_count,0) /6,1) close_ticket_avg,
	round(ropen.submitted_tickets /6,1) submitted_tickets_avg
	from
	(select /*+ parallel(a,6) */
	sum(case when a.RESOLVED_DATE is null then 1 else 0 end) open_ticket_count,
	sum(case when a.RESOLVED_DATE is not null then 1 else 0 end) close_ticket_count,
	count(*) submitted_tickets
	from dash_helpdesk a,
	(select trunc(sysdate,'MM') month from dual) param
	where
	    to_char(a.submitted_date,'yyyymm') &gt;= to_char(add_months(param.month,-5),'yyyymm')
	and to_char(a.submitted_date,'yyyymm') &lt;= to_char(param.month,'yyyymm')
	AND	(GROUP_MANAGER			= {director}
	OR	{director}			=  ' ALL')
	AND	(GROUP_PM			= {pm}
	OR	{pm}				=  ' ALL')
	AND	(ASSIGN_GROUP			= {supportGroup}
	OR	{supportGroup}			=  ' ALL')
	AND	(PRIORITY			= {ticketPriority}
	OR	{ticketPriority}		= ' ALL')
	) ropen,
	(select /*+ parallel(a,6) */
	sum(case when a.RESOLVED_DATE is null then 1 else 0 end) open_ticket_count,
	sum(case when a.RESOLVED_DATE is not null then 1 else 0 end) close_ticket_count,
	count(*) submitted_tickets
	from dash_helpdesk a,
	(select trunc(sysdate,'MM') month from dual) param
	where
	     to_char(a.resolved_date,'yyyymm') &gt;= to_char(add_months(param.month,-5),'yyyymm')
	and  to_char(a.resolved_date,'yyyymm') &lt;= to_char(add_months(param.month,0),'yyyymm')   
	AND	(GROUP_MANAGER			= {director}
	OR	{director}			=  ' ALL')
	AND	(GROUP_PM			= {pm}
	OR	{pm}				=  ' ALL')
	AND	(ASSIGN_GROUP			= {supportGroup}
	OR	{supportGroup}			=  ' ALL')
	AND	(PRIORITY			= {ticketPriority}
	OR	{ticketPriority}		= ' ALL')
	) rclose
	) aver,
	(select 
	ropen.sub_month, 
	ropen.open_ticket_count,
	nvl(rclose.close_ticket_count,0) close_ticket_count,
	ropen.submitted_tickets
	from
	(select /*+ parallel(a,6) */
	to_char(a.submitted_date,'yyyymm') sub_month,
	sum(case when a.resolved_date is null then 1 else 0 end) open_ticket_count,
	sum(case when a.resolved_date is not null then 1 else 0 end) close_ticket_count,
	count(*) submitted_tickets
	from dash_helpdesk a,
	(select trunc(sysdate,'MM') month from dual) param
	where to_char(a.submitted_date,'yyyymm') &gt;= to_char(add_months(param.month,-5),'yyyymm') 
	and   to_char(a.submitted_date,'yyyymm') &lt;= to_char(param.month,'yyyymm')
	AND	(GROUP_MANAGER			= {director}
	OR	{director}			=  ' ALL')
	AND	(GROUP_PM			= {pm}
	OR	{pm}				=  ' ALL')
	AND	(ASSIGN_GROUP			= {supportGroup}
	OR	{supportGroup}			=  ' ALL')
	AND	(PRIORITY			= {ticketPriority}
	OR	{ticketPriority}		= ' ALL')
	group by 
	to_char(a.submitted_date,'yyyymm')
	) ropen,
	(select /*+ parallel(a,6) */
	to_char(a.resolved_date,'yyyymm') sub_month,
	sum(case when a.resolved_date is null then 1 else 0 end) open_ticket_count,
	sum(case when a.resolved_date is not null then 1 else 0 end) close_ticket_count ,
	count(*) submitted_tickets
	from dash_helpdesk a,
	(select  trunc(sysdate,'MM') month from dual) param
	where to_char(a.resolved_date,'yyyymm') &gt;= to_char(add_months(param.month,-5),'yyyymm') 
	and   to_char(a.resolved_date,'yyyymm') &lt;= to_char(param.month,'yyyymm')
	AND	(GROUP_MANAGER			= {director}
	OR	{director}			=  ' ALL')
	AND	(GROUP_PM			= {pm}
	OR	{pm}				=  ' ALL')
	AND	(ASSIGN_GROUP			= {supportGroup}
	OR	{supportGroup}			=  ' ALL')
	AND	(PRIORITY			= {ticketPriority}
	OR	{ticketPriority}		= ' ALL')
	group by 
	to_char(a.resolved_date,'yyyymm')
	) rclose
	where ropen.sub_month = rclose.sub_month (+)) Curr,
	(select trunc(sysdate,'MM') month from dual) param
	 )
	 --group by sub_month
	 order by to_date(sub_month,'mm-yyyy')
    </statement>
    
    
    <statement code="HDDWeeklyChartQuery" clientObject="HelpDeskDashboard">
 	<!-- select 
	support_category,
	support_group,	
	submittedTickets,
	projSubmittedTickets,
	resolvedTickets,
	projResolvedTickets
	from hd_chart_temp -->
select 
to_char(next_day(trunc(to_date(substr(sub_week,1,4),'yyyy'),'yyyy'),'Sunday') + (substr(sub_week,6,2) - 1) * 7,'mm/dd/yyyy') sub_week
,open_ticket_count
,close_ticket_count resolvedTickets
,submitted_tickets submittedTickets
,open_ticket_wavg
,close_ticket_wavg projResolvedTickets
,submitted_tickets_wavg projSubmittedTickets
from
(
select
curr.support_category,
Initcap(curr.support_group) support_group,
curr.sub_week,
curr.open_ticket_count,
curr.close_ticket_count,
curr.submitted_tickets,
aver.open_ticket_count_6,
aver.close_ticket_count_6,
aver.submitted_tickets_6,
aver.open_ticket_avg op_6_avg,
aver.close_ticket_avg cl_6_avg,
aver.submitted_tickets_avg sb_6_avg,
aver.open_ticket_avg open_ticket_wavg,
aver.close_ticket_avg close_ticket_wavg,
aver.submitted_tickets_avg submitted_tickets_wavg,
curr.open_ticket_count - aver.open_ticket_avg open_ticket_diff,
curr.close_ticket_count - aver.close_ticket_avg close_ticket_diff,
curr.submitted_tickets - aver.submitted_tickets_avg submitted_tickets_diff
from
(select
ropen.support_category, 
ropen.support_group, 
--ropen.sub_week,
ropen.open_ticket_count open_ticket_count_6,
nvl(rclose.close_ticket_count,0) close_ticket_count_6,
ropen.submitted_tickets submitted_tickets_6,
round(ropen.open_ticket_count /26,1) open_ticket_avg,
round(nvl(rclose.close_ticket_count,0) /26,1) close_ticket_avg,
round(ropen.submitted_tickets /26,1) submitted_tickets_avg
from
(select /*+ full(a) parallel(a,6) */
a.SUPPORT_CATEGORY,
trim(a.ASSIGN_GROUP) support_group,
--to_char(a.submitted_date,'yyyy-iw') sub_week,
sum(case when a.RESOLVED_DATE is null then 1 else 0 end) open_ticket_count,
sum(case when a.RESOLVED_DATE is not null then 1 else 0 end) close_ticket_count,
count(*) submitted_tickets
from dash_helpdesk a,
(select nvl2({month}, to_date({month},'yyyymm'), trunc(sysdate,'MM')) month from dual) param
where
    to_char(a.submitted_date,'yyyymm') &gt;= to_char(add_months(param.month,-6),'yyyymm')
and to_char(a.submitted_date,'yyyymm') &lt;= to_char(param.month,'yyyymm')
group by
a.support_category,
trim(a.ASSIGN_GROUP)
) ropen,
(select /*+ full(a) parallel(a,6) */
a.SUPPORT_CATEGORY,
trim(a.ASSIGN_GROUP) support_group,
--to_char(a.resolved_date,'yyyy-iw') sub_week,
sum(case when a.RESOLVED_DATE is null then 1 else 0 end) open_ticket_count,
sum(case when a.RESOLVED_DATE is not null then 1 else 0 end) close_ticket_count,
count(*) submitted_tickets
from dash_helpdesk a,
(select nvl2({month}, to_date({month},'yyyymm'), trunc(sysdate,'MM')) month from dual) param
where
     to_char(a.resolved_date,'yyyymm') &gt;= to_char(add_months(param.month,-6),'yyyymm')
and  to_char(a.resolved_date,'yyyymm') &lt;= to_char(add_months(param.month,0),'yyyymm')   
group by
a.support_category,
trim(a.ASSIGN_GROUP)) rclose
where ropen.SUPPORT_CATEGORY = rclose.SUPPORT_CATEGORY (+)
and ropen.support_group = rclose.support_group (+)
) aver,
(select 
ropen.support_category, 
ropen.support_group,
ropen.sub_week, 
ropen.open_ticket_count,
nvl(rclose.close_ticket_count,0) close_ticket_count,
ropen.submitted_tickets
from
(select /*+ full(a) parallel(a,6) */
a.support_category,
trim(a.ASSIGN_GROUP) support_group,
to_char(a.submitted_date,'yyyy-iw') sub_week,
sum(case when a.resolved_date is null then 1 else 0 end) open_ticket_count,
sum(case when a.resolved_date is not null then 1 else 0 end) close_ticket_count,
count(*) submitted_tickets
from dash_helpdesk a,
(select nvl2({month}, to_date({month},'yyyymm'), trunc(sysdate,'MM')) month from dual) param
where to_char(a.submitted_date,'yyyymm') &gt;= to_char(add_months(param.month,-1),'yyyymm') 
and   to_char(a.submitted_date,'yyyymm') &lt;= to_char(param.month,'yyyymm')
group by 
a.support_category,
trim(a.ASSIGN_GROUP),
to_char(a.submitted_date,'yyyy-iw')) ropen,
(select /*+ full(a) parallel(a,6) */
a.support_category,
trim(a.ASSIGN_GROUP) support_group,
to_char(a.resolved_date,'yyyy-iw') sub_week,
sum(case when a.resolved_date is null then 1 else 0 end) open_ticket_count,
sum(case when a.resolved_date is not null then 1 else 0 end) close_ticket_count ,
count(*) submitted_tickets
from dash_helpdesk a,
(select nvl2({month}, to_date({month},'yyyymm'), trunc(sysdate,'MM')) month from dual) param
where to_char(a.resolved_date,'yyyymm') &gt;= to_char(add_months(param.month,-1),'yyyymm') 
and   to_char(a.resolved_date,'yyyymm') &lt;= to_char(param.month,'yyyymm')
group by 
a.support_category,
trim(a.ASSIGN_GROUP),
to_char(a.resolved_date,'yyyy-iw')) rclose
where ropen.support_category = rclose.support_category (+)
and ropen.support_group = rclose.support_group (+)
and ropen.sub_week = rclose.sub_week (+)) Curr,
(select nvl2({month}, to_date({month},'yyyymm'), trunc(sysdate,'MM')) month from dual) param
where
    curr.support_category = aver.support_category (+)
and curr.support_group    = aver.support_group (+)
--and curr.sub_week    = aver.sub_week (+)
and ( 'emptyParam' = {supportArea}
     or  curr.support_category = {supportArea} ) 
and ( 'emptyParam' = {supportGroup}
     or  curr.support_group = {supportGroup} ) 
--and (substr(curr.sub_week,1,6) &gt;= to_char(add_months(param.month,-1),'yyyymm')
--and substr(curr.sub_week,1,6) &lt;= to_char(param.month,'yyyymm'))
and (curr.sub_week &gt;= to_char(add_months(param.month,-1),'yyyy-iw')
and curr.sub_week &lt;= to_char(add_months(param.month,1),'yyyy-iw'))
order by
    1, 14 desc, 3
 )
 --group by sub_week
 order by sub_week

	</statement>
	
	<statement code="HDDSLAResponseGridQueryIN" clientObject="HelpDeskDashboard">
select /*+ parallel(a,6) */
TICKET_ID
,TO_CHAR(TO_DATE(OPEN_MONTH,'YYYYMM'),'MM-YYYY') OPEN_MONTH
,ASSIGN_GROUP
,TICKET_STATUS
,SUPPORT_CATEGORY
,to_char(SUBMITTED_DATE,'mm/dd/yyyy hh24:mi:ss') SUBMITTED_DATE 
,to_char(RESOLVED_DATE,'mm/dd/yyyy hh24:mi:ss') RESOLVED_DATE 
,(nvl(to_date(to_char(RESOLVED_DATE,'MMDDYYYY'),'MMDDYYYY'),to_date(to_char(sysdate,'MMDDYYYY'),'MMDDYYYY'))  
- to_date(to_char(SUBMITTED_DATE,'MMDDYYYY'),'MMDDYYYY')) TICKET_AGE
,ASSIGNEE
,LAST_MODIFIED_BY
,PRIORITY
,STATUS
,PENDING
,CATEGORY
,TYPE
,ITEM
,SUMMARY
,REPLACE(REPLACE(REPLACE(solution_summary, CHR(10), ''), CHR(13), ''), CHR(9), '') SOLUTION_SUMMARY
,ROOT_CAUSE
,REGION
,SITE
,ORIG_SUBMITTER
,SUBMITTER_NAME
,RESOLUTION_CATEGORY
,RESOLUTION_CATEGORY_TIER_2
,STATUS_REASON_DESC
,DEPARTMENT
,to_char(REPAIRED_TIME,'mm/dd/yyyy hh24:mi:ss') REPAIRED_TIME
,CUS_STATUS_REASON
,ASSIGNED_GROUP1
,to_char(START_ASSIGNED_TIME1,'mm/dd/yyyy hh24:mi:ss') START_ASSIGNED_TIME1
,TOTAL_TIME_SPENT_IN_ASSIGNED1
,to_char(END_ASSIGNED_TIME1,'mm/dd/yyyy hh24:mi:ss') END_ASSIGNED_TIME1
,to_char(CREATED_ON,'mm/dd/yyyy hh24:mi:ss') CREATED_ON
,RESOLUTION_CATEGORY_AUDIT
,GROUP_MANAGER
,GROUP_PM
,SLA_BYPASS_IND
,DESKTOP_IND
,RESPONSE_TARGET_IND
,REPAIR_TARGET_IND
,RESOLUTION_TARGET_IND
,REPORTED_SOURCE 
,REPORTED_SOURCE_AUDIT
from dash_helpdesk a
where (( 'emptyParam' = {month}
     or to_char(CREATED_ON,'mm-yyyy') = nvl({month},to_char(sysdate,'mm-yyyy')) )
      ) 
 and
 ( 'emptyParam' = {supportGroup}
     or assign_group = {supportGroup} or {supportGroup} = ' ALL')
     AND	(GROUP_MANAGER			= {director}
		OR	{director}			=  ' ALL')
		AND	(GROUP_PM			= {pm}
		OR	{pm}				=  ' ALL')		
		AND	(PRIORITY			= {ticketPriority}
		OR	{ticketPriority}			= ' ALL')
 and RESPONSE_TARGET_IND = 'IN'     
    </statement>
    
<statement code="HDDSLAResponseGridQueryRISK" clientObject="HelpDeskDashboard">
select /*+ parallel(a,6) */
TICKET_ID
,TO_CHAR(TO_DATE(OPEN_MONTH,'YYYYMM'),'MM-YYYY') OPEN_MONTH
,ASSIGN_GROUP
,TICKET_STATUS
,SUPPORT_CATEGORY
,to_char(SUBMITTED_DATE,'mm/dd/yyyy hh24:mi:ss') SUBMITTED_DATE 
,to_char(RESOLVED_DATE,'mm/dd/yyyy hh24:mi:ss') RESOLVED_DATE 
,(nvl(to_date(to_char(RESOLVED_DATE,'MMDDYYYY'),'MMDDYYYY'),to_date(to_char(sysdate,'MMDDYYYY'),'MMDDYYYY'))  
- to_date(to_char(SUBMITTED_DATE,'MMDDYYYY'),'MMDDYYYY')) TICKET_AGE
,ASSIGNEE
,LAST_MODIFIED_BY
,PRIORITY
,STATUS
,PENDING
,CATEGORY
,TYPE
,ITEM
,SUMMARY
,REPLACE(REPLACE(REPLACE(solution_summary, CHR(10), ''), CHR(13), ''), CHR(9), '') SOLUTION_SUMMARY
,ROOT_CAUSE
,REGION
,SITE
,ORIG_SUBMITTER
,SUBMITTER_NAME
,RESOLUTION_CATEGORY
,RESOLUTION_CATEGORY_TIER_2
,STATUS_REASON_DESC
,DEPARTMENT
,to_char(REPAIRED_TIME,'mm/dd/yyyy hh24:mi:ss') REPAIRED_TIME
,CUS_STATUS_REASON
,ASSIGNED_GROUP1
,to_char(START_ASSIGNED_TIME1,'mm/dd/yyyy hh24:mi:ss') START_ASSIGNED_TIME1
,TOTAL_TIME_SPENT_IN_ASSIGNED1
,to_char(END_ASSIGNED_TIME1,'mm/dd/yyyy hh24:mi:ss') END_ASSIGNED_TIME1
,to_char(CREATED_ON,'mm/dd/yyyy hh24:mi:ss') CREATED_ON
,RESOLUTION_CATEGORY_AUDIT
,GROUP_MANAGER
,GROUP_PM
,SLA_BYPASS_IND
,DESKTOP_IND
,RESPONSE_TARGET_IND
,REPAIR_TARGET_IND
,RESOLUTION_TARGET_IND
,REPORTED_SOURCE 
,REPORTED_SOURCE_AUDIT
from dash_helpdesk a
where (( 'emptyParam' = {month}
     or to_char(CREATED_ON,'mm-yyyy') = nvl({month},to_char(sysdate,'mm-yyyy')) )
      ) 
 and
 ( 'emptyParam' = {supportGroup}
     or assign_group = {supportGroup} or {supportGroup} = ' ALL')
     AND	(GROUP_MANAGER			= {director}
		OR	{director}			=  ' ALL')
		AND	(GROUP_PM			= {pm}
		OR	{pm}				=  ' ALL')		
		AND	(PRIORITY			= {ticketPriority}
		OR	{ticketPriority}			= ' ALL')
 and RESPONSE_TARGET_IND = 'RISK'      
    </statement>


<statement code="HDDSLAResponseGridQueryOUT" clientObject="HelpDeskDashboard">
select /*+ parallel(a,6) */
TICKET_ID
,TO_CHAR(TO_DATE(OPEN_MONTH,'YYYYMM'),'MM-YYYY') OPEN_MONTH
,ASSIGN_GROUP
,TICKET_STATUS
,SUPPORT_CATEGORY
,to_char(SUBMITTED_DATE,'mm/dd/yyyy hh24:mi:ss') SUBMITTED_DATE 
,to_char(RESOLVED_DATE,'mm/dd/yyyy hh24:mi:ss') RESOLVED_DATE 
,(nvl(to_date(to_char(RESOLVED_DATE,'MMDDYYYY'),'MMDDYYYY'),to_date(to_char(sysdate,'MMDDYYYY'),'MMDDYYYY'))  
- to_date(to_char(SUBMITTED_DATE,'MMDDYYYY'),'MMDDYYYY')) TICKET_AGE
,ASSIGNEE
,LAST_MODIFIED_BY
,PRIORITY
,STATUS
,PENDING
,CATEGORY
,TYPE
,ITEM
,SUMMARY
,REPLACE(REPLACE(REPLACE(solution_summary, CHR(10), ''), CHR(13), ''), CHR(9), '') SOLUTION_SUMMARY
,ROOT_CAUSE
,REGION
,SITE
,ORIG_SUBMITTER
,SUBMITTER_NAME
,RESOLUTION_CATEGORY
,RESOLUTION_CATEGORY_TIER_2
,STATUS_REASON_DESC
,DEPARTMENT
,to_char(REPAIRED_TIME,'mm/dd/yyyy hh24:mi:ss') REPAIRED_TIME
,CUS_STATUS_REASON
,ASSIGNED_GROUP1
,to_char(START_ASSIGNED_TIME1,'mm/dd/yyyy hh24:mi:ss') START_ASSIGNED_TIME1
,TOTAL_TIME_SPENT_IN_ASSIGNED1
,to_char(END_ASSIGNED_TIME1,'mm/dd/yyyy hh24:mi:ss') END_ASSIGNED_TIME1
,to_char(CREATED_ON,'mm/dd/yyyy hh24:mi:ss') CREATED_ON
,RESOLUTION_CATEGORY_AUDIT
,GROUP_MANAGER
,GROUP_PM
,SLA_BYPASS_IND
,DESKTOP_IND
,RESPONSE_TARGET_IND
,REPAIR_TARGET_IND
,RESOLUTION_TARGET_IND
,REPORTED_SOURCE 
,REPORTED_SOURCE_AUDIT
from dash_helpdesk a
where (( 'emptyParam' = {month}
     or to_char(CREATED_ON,'mm-yyyy') = nvl({month},to_char(sysdate,'mm-yyyy')) )
      )
 and
 ( 'emptyParam' = {supportGroup}
     or assign_group = {supportGroup} or {supportGroup} = ' ALL')
     AND	(GROUP_MANAGER			= {director}
		OR	{director}			=  ' ALL')
		AND	(GROUP_PM			= {pm}
		OR	{pm}				=  ' ALL')		
		AND	(PRIORITY			= {ticketPriority}
		OR	{ticketPriority}			= ' ALL')
 and RESPONSE_TARGET_IND = 'OUT'      
    </statement>




<statement code="HDDSLARepairGridQueryIN" clientObject="HelpDeskDashboard">
select /*+ parallel(a,6) */
TICKET_ID
,TO_CHAR(TO_DATE(OPEN_MONTH,'YYYYMM'),'MM-YYYY') OPEN_MONTH
,ASSIGN_GROUP
,TICKET_STATUS
,SUPPORT_CATEGORY
,to_char(SUBMITTED_DATE,'mm/dd/yyyy hh24:mi:ss') SUBMITTED_DATE 
,to_char(RESOLVED_DATE,'mm/dd/yyyy hh24:mi:ss') RESOLVED_DATE 
,(nvl(to_date(to_char(RESOLVED_DATE,'MMDDYYYY'),'MMDDYYYY'),to_date(to_char(sysdate,'MMDDYYYY'),'MMDDYYYY'))  
- to_date(to_char(SUBMITTED_DATE,'MMDDYYYY'),'MMDDYYYY')) TICKET_AGE
,ASSIGNEE
,LAST_MODIFIED_BY
,PRIORITY
,STATUS
,PENDING
,CATEGORY
,TYPE
,ITEM
,SUMMARY
,REPLACE(REPLACE(REPLACE(solution_summary, CHR(10), ''), CHR(13), ''), CHR(9), '') SOLUTION_SUMMARY
,ROOT_CAUSE
,REGION
,SITE
,ORIG_SUBMITTER
,SUBMITTER_NAME
,RESOLUTION_CATEGORY
,RESOLUTION_CATEGORY_TIER_2
,STATUS_REASON_DESC
,DEPARTMENT
,to_char(REPAIRED_TIME,'mm/dd/yyyy hh24:mi:ss') REPAIRED_TIME
,CUS_STATUS_REASON
,ASSIGNED_GROUP1
,to_char(START_ASSIGNED_TIME1,'mm/dd/yyyy hh24:mi:ss') START_ASSIGNED_TIME1
,TOTAL_TIME_SPENT_IN_ASSIGNED1
,to_char(END_ASSIGNED_TIME1,'mm/dd/yyyy hh24:mi:ss') END_ASSIGNED_TIME1
,to_char(CREATED_ON,'mm/dd/yyyy hh24:mi:ss') CREATED_ON
,RESOLUTION_CATEGORY_AUDIT
,GROUP_MANAGER
,GROUP_PM
,SLA_BYPASS_IND
,DESKTOP_IND
,RESPONSE_TARGET_IND
,REPAIR_TARGET_IND
,RESOLUTION_TARGET_IND
,REPORTED_SOURCE 
,REPORTED_SOURCE_AUDIT
from dash_helpdesk a
where (( 'emptyParam' = {month}
     or to_char(CREATED_ON,'mm-yyyy') = nvl({month},to_char(sysdate,'mm-yyyy')) )
      ) 
 and
 ( 'emptyParam' = {supportGroup}
     or assign_group = {supportGroup} or {supportGroup} = ' ALL')
     AND	(GROUP_MANAGER			= {director}
		OR	{director}			=  ' ALL')
		AND	(GROUP_PM			= {pm}
		OR	{pm}				=  ' ALL')		
		AND	(PRIORITY			= {ticketPriority}
		OR	{ticketPriority}			= ' ALL')
 and REPAIR_TARGET_IND = 'IN'   
ORDER BY 1  
    </statement>

<statement code="HDDSLARepairGridQueryRISK" clientObject="HelpDeskDashboard">
select /*+ parallel(a,6) */
TICKET_ID
,TO_CHAR(TO_DATE(OPEN_MONTH,'YYYYMM'),'MM-YYYY') OPEN_MONTH
,ASSIGN_GROUP
,TICKET_STATUS
,SUPPORT_CATEGORY
,to_char(SUBMITTED_DATE,'mm/dd/yyyy hh24:mi:ss') SUBMITTED_DATE 
,to_char(RESOLVED_DATE,'mm/dd/yyyy hh24:mi:ss') RESOLVED_DATE 
,(nvl(to_date(to_char(RESOLVED_DATE,'MMDDYYYY'),'MMDDYYYY'),to_date(to_char(sysdate,'MMDDYYYY'),'MMDDYYYY'))  
- to_date(to_char(SUBMITTED_DATE,'MMDDYYYY'),'MMDDYYYY')) TICKET_AGE
,ASSIGNEE
,LAST_MODIFIED_BY
,PRIORITY
,STATUS
,PENDING
,CATEGORY
,TYPE
,ITEM
,SUMMARY
,REPLACE(REPLACE(REPLACE(solution_summary, CHR(10), ''), CHR(13), ''), CHR(9), '') SOLUTION_SUMMARY
,ROOT_CAUSE
,REGION
,SITE
,ORIG_SUBMITTER
,SUBMITTER_NAME
,RESOLUTION_CATEGORY
,RESOLUTION_CATEGORY_TIER_2
,STATUS_REASON_DESC
,DEPARTMENT
,to_char(REPAIRED_TIME,'mm/dd/yyyy hh24:mi:ss') REPAIRED_TIME
,CUS_STATUS_REASON
,ASSIGNED_GROUP1
,to_char(START_ASSIGNED_TIME1,'mm/dd/yyyy hh24:mi:ss') START_ASSIGNED_TIME1
,TOTAL_TIME_SPENT_IN_ASSIGNED1
,to_char(END_ASSIGNED_TIME1,'mm/dd/yyyy hh24:mi:ss') END_ASSIGNED_TIME1
,to_char(CREATED_ON,'mm/dd/yyyy hh24:mi:ss') CREATED_ON
,RESOLUTION_CATEGORY_AUDIT
,GROUP_MANAGER
,GROUP_PM
,SLA_BYPASS_IND
,DESKTOP_IND
,RESPONSE_TARGET_IND
,REPAIR_TARGET_IND
,RESOLUTION_TARGET_IND
,REPORTED_SOURCE 
,REPORTED_SOURCE_AUDIT
from dash_helpdesk a
where (( 'emptyParam' = {month}
     or to_char(CREATED_ON,'mm-yyyy') = nvl({month},to_char(sysdate,'mm-yyyy')) )
      ) 
 and
 ( 'emptyParam' = {supportGroup}
     or assign_group = {supportGroup} or {supportGroup} = ' ALL')
     AND	(GROUP_MANAGER			= {director}
		OR	{director}			=  ' ALL')
		AND	(GROUP_PM			= {pm}
		OR	{pm}				=  ' ALL')		
		AND	(PRIORITY			= {ticketPriority}
		OR	{ticketPriority}			= ' ALL')
 and REPAIR_TARGET_IND = 'RISK'     
    </statement>


<statement code="HDDSLARepairGridQueryOUT" clientObject="HelpDeskDashboard">
select /*+ parallel(a,6) */
TICKET_ID
,TO_CHAR(TO_DATE(OPEN_MONTH,'YYYYMM'),'MM-YYYY') OPEN_MONTH
,ASSIGN_GROUP
,TICKET_STATUS
,SUPPORT_CATEGORY
,to_char(SUBMITTED_DATE,'mm/dd/yyyy hh24:mi:ss') SUBMITTED_DATE 
,to_char(RESOLVED_DATE,'mm/dd/yyyy hh24:mi:ss') RESOLVED_DATE 
,(nvl(to_date(to_char(RESOLVED_DATE,'MMDDYYYY'),'MMDDYYYY'),to_date(to_char(sysdate,'MMDDYYYY'),'MMDDYYYY'))  
- to_date(to_char(SUBMITTED_DATE,'MMDDYYYY'),'MMDDYYYY')) TICKET_AGE
,ASSIGNEE
,LAST_MODIFIED_BY
,PRIORITY
,STATUS
,PENDING
,CATEGORY
,TYPE
,ITEM
,SUMMARY
,REPLACE(REPLACE(REPLACE(solution_summary, CHR(10), ''), CHR(13), ''), CHR(9), '') SOLUTION_SUMMARY
,ROOT_CAUSE
,REGION
,SITE
,ORIG_SUBMITTER
,SUBMITTER_NAME
,RESOLUTION_CATEGORY
,RESOLUTION_CATEGORY_TIER_2
,STATUS_REASON_DESC
,DEPARTMENT
,to_char(REPAIRED_TIME,'mm/dd/yyyy hh24:mi:ss') REPAIRED_TIME
,CUS_STATUS_REASON
,ASSIGNED_GROUP1
,to_char(START_ASSIGNED_TIME1,'mm/dd/yyyy hh24:mi:ss') START_ASSIGNED_TIME1
,TOTAL_TIME_SPENT_IN_ASSIGNED1
,to_char(END_ASSIGNED_TIME1,'mm/dd/yyyy hh24:mi:ss') END_ASSIGNED_TIME1
,to_char(CREATED_ON,'mm/dd/yyyy hh24:mi:ss') CREATED_ON
,RESOLUTION_CATEGORY_AUDIT
,GROUP_MANAGER
,GROUP_PM
,SLA_BYPASS_IND
,DESKTOP_IND
,RESPONSE_TARGET_IND
,REPAIR_TARGET_IND
,RESOLUTION_TARGET_IND
,REPORTED_SOURCE 
,REPORTED_SOURCE_AUDIT
from dash_helpdesk a
where (( 'emptyParam' = {month}
     or to_char(CREATED_ON,'mm-yyyy') = nvl({month},to_char(sysdate,'mm-yyyy')) )
      ) 
 and
 ( 'emptyParam' = {supportGroup}
     or assign_group = {supportGroup} or {supportGroup} = ' ALL')
     AND	(GROUP_MANAGER			= {director}
		OR	{director}			=  ' ALL')
		AND	(GROUP_PM			= {pm}
		OR	{pm}				=  ' ALL')		
		AND	(PRIORITY			= {ticketPriority}
		OR	{ticketPriority}			= ' ALL')
 and REPAIR_TARGET_IND = 'OUT'     
    </statement>    




<statement code="HDDSLAResolutionGridQueryIN" clientObject="HelpDeskDashboard">
select /*+ parallel(a,6) */
TICKET_ID
,TO_CHAR(TO_DATE(OPEN_MONTH,'YYYYMM'),'MM-YYYY') OPEN_MONTH
,ASSIGN_GROUP
,TICKET_STATUS
,SUPPORT_CATEGORY
,to_char(SUBMITTED_DATE,'mm/dd/yyyy hh24:mi:ss') SUBMITTED_DATE 
,to_char(RESOLVED_DATE,'mm/dd/yyyy hh24:mi:ss') RESOLVED_DATE
,(nvl(to_date(to_char(RESOLVED_DATE,'MMDDYYYY'),'MMDDYYYY'),to_date(to_char(sysdate,'MMDDYYYY'),'MMDDYYYY'))  
- to_date(to_char(SUBMITTED_DATE,'MMDDYYYY'),'MMDDYYYY')) TICKET_AGE
,ASSIGNEE
,LAST_MODIFIED_BY
,PRIORITY
,STATUS
,PENDING
,CATEGORY
,TYPE
,ITEM
,SUMMARY
,REPLACE(REPLACE(REPLACE(solution_summary, CHR(10), ''), CHR(13), ''), CHR(9), '') SOLUTION_SUMMARY
,ROOT_CAUSE
,REGION
,SITE
,ORIG_SUBMITTER
,SUBMITTER_NAME
,RESOLUTION_CATEGORY
,RESOLUTION_CATEGORY_TIER_2
,STATUS_REASON_DESC
,DEPARTMENT
,to_char(REPAIRED_TIME,'mm/dd/yyyy hh24:mi:ss') REPAIRED_TIME
,CUS_STATUS_REASON
,ASSIGNED_GROUP1
,to_char(START_ASSIGNED_TIME1,'mm/dd/yyyy hh24:mi:ss') START_ASSIGNED_TIME1
,TOTAL_TIME_SPENT_IN_ASSIGNED1
,to_char(END_ASSIGNED_TIME1,'mm/dd/yyyy hh24:mi:ss') END_ASSIGNED_TIME1
,to_char(CREATED_ON,'mm/dd/yyyy hh24:mi:ss') CREATED_ON
,RESOLUTION_CATEGORY_AUDIT
,GROUP_MANAGER
,GROUP_PM
,SLA_BYPASS_IND
,DESKTOP_IND
,RESPONSE_TARGET_IND
,REPAIR_TARGET_IND
,RESOLUTION_TARGET_IND
,REPORTED_SOURCE 
,REPORTED_SOURCE_AUDIT
from dash_helpdesk a
where (( 'emptyParam' = {month}
     or to_char(CREATED_ON,'mm-yyyy') = nvl({month},to_char(sysdate,'mm-yyyy')) )
      ) 
 and
 ( 'emptyParam' = {supportGroup}
     or assign_group = {supportGroup} or {supportGroup} = ' ALL')
     AND	(GROUP_MANAGER			= {director}
		OR	{director}			=  ' ALL')
		AND	(GROUP_PM			= {pm}
		OR	{pm}				=  ' ALL')		
		AND	(PRIORITY			= {ticketPriority}
		OR	{ticketPriority}			= ' ALL')
 and RESOLUTION_TARGET_IND = 'IN'    
    </statement>

<statement code="HDDSLAResolutionGridQueryRISK" clientObject="HelpDeskDashboard">
select /*+ parallel(a,6) */
TICKET_ID
,TO_CHAR(TO_DATE(OPEN_MONTH,'YYYYMM'),'MM-YYYY') OPEN_MONTH
,ASSIGN_GROUP
,TICKET_STATUS
,SUPPORT_CATEGORY
,to_char(SUBMITTED_DATE,'mm/dd/yyyy hh24:mi:ss') SUBMITTED_DATE 
,to_char(RESOLVED_DATE,'mm/dd/yyyy hh24:mi:ss') RESOLVED_DATE 
,(nvl(to_date(to_char(RESOLVED_DATE,'MMDDYYYY'),'MMDDYYYY'),to_date(to_char(sysdate,'MMDDYYYY'),'MMDDYYYY'))  
- to_date(to_char(SUBMITTED_DATE,'MMDDYYYY'),'MMDDYYYY')) TICKET_AGE
,ASSIGNEE
,LAST_MODIFIED_BY
,PRIORITY
,STATUS
,PENDING
,CATEGORY
,TYPE
,ITEM
,SUMMARY
,REPLACE(REPLACE(REPLACE(solution_summary, CHR(10), ''), CHR(13), ''), CHR(9), '') SOLUTION_SUMMARY
,ROOT_CAUSE
,REGION
,SITE
,ORIG_SUBMITTER
,SUBMITTER_NAME
,RESOLUTION_CATEGORY
,RESOLUTION_CATEGORY_TIER_2
,STATUS_REASON_DESC
,DEPARTMENT
,to_char(REPAIRED_TIME,'mm/dd/yyyy hh24:mi:ss') REPAIRED_TIME
,CUS_STATUS_REASON
,ASSIGNED_GROUP1
,to_char(START_ASSIGNED_TIME1,'mm/dd/yyyy hh24:mi:ss') START_ASSIGNED_TIME1
,TOTAL_TIME_SPENT_IN_ASSIGNED1
,to_char(END_ASSIGNED_TIME1,'mm/dd/yyyy hh24:mi:ss') END_ASSIGNED_TIME1
,to_char(CREATED_ON,'mm/dd/yyyy hh24:mi:ss') CREATED_ON
,RESOLUTION_CATEGORY_AUDIT
,GROUP_MANAGER
,GROUP_PM
,SLA_BYPASS_IND
,DESKTOP_IND
,RESPONSE_TARGET_IND
,REPAIR_TARGET_IND
,RESOLUTION_TARGET_IND
,REPORTED_SOURCE 
,REPORTED_SOURCE_AUDIT
from dash_helpdesk a
where (( 'emptyParam' = {month}
     or to_char(CREATED_ON,'mm-yyyy') = nvl({month},to_char(sysdate,'mm-yyyy')) )
      ) 
 and
 ( 'emptyParam' = {supportGroup}
     or assign_group = {supportGroup} or {supportGroup} = ' ALL')
     AND	(GROUP_MANAGER			= {director}
		OR	{director}			=  ' ALL')
		AND	(GROUP_PM			= {pm}
		OR	{pm}				=  ' ALL')		
		AND	(PRIORITY			= {ticketPriority}
		OR	{ticketPriority}			= ' ALL')
 and RESOLUTION_TARGET_IND = 'RISK'     
    </statement>


<statement code="HDDSLAResolutionGridQueryOUT" clientObject="HelpDeskDashboard">
select /*+ parallel(a,6) */
TICKET_ID
,TO_CHAR(TO_DATE(OPEN_MONTH,'YYYYMM'),'MM-YYYY') OPEN_MONTH
,ASSIGN_GROUP
,TICKET_STATUS
,SUPPORT_CATEGORY
,to_char(SUBMITTED_DATE,'mm/dd/yyyy hh24:mi:ss') SUBMITTED_DATE 
,to_char(RESOLVED_DATE,'mm/dd/yyyy hh24:mi:ss') RESOLVED_DATE 
,(nvl(to_date(to_char(RESOLVED_DATE,'MMDDYYYY'),'MMDDYYYY'),to_date(to_char(sysdate,'MMDDYYYY'),'MMDDYYYY'))  
- to_date(to_char(SUBMITTED_DATE,'MMDDYYYY'),'MMDDYYYY')) TICKET_AGE
,ASSIGNEE
,LAST_MODIFIED_BY
,PRIORITY
,STATUS
,PENDING
,CATEGORY
,TYPE
,ITEM
,SUMMARY
,REPLACE(REPLACE(REPLACE(solution_summary, CHR(10), ''), CHR(13), ''), CHR(9), '') SOLUTION_SUMMARY
,ROOT_CAUSE
,REGION
,SITE
,ORIG_SUBMITTER
,SUBMITTER_NAME
,RESOLUTION_CATEGORY
,RESOLUTION_CATEGORY_TIER_2
,STATUS_REASON_DESC
,DEPARTMENT
,to_char(REPAIRED_TIME,'mm/dd/yyyy hh24:mi:ss') REPAIRED_TIME
,CUS_STATUS_REASON
,ASSIGNED_GROUP1
,to_char(START_ASSIGNED_TIME1,'mm/dd/yyyy hh24:mi:ss') START_ASSIGNED_TIME1
,TOTAL_TIME_SPENT_IN_ASSIGNED1
,to_char(END_ASSIGNED_TIME1,'mm/dd/yyyy hh24:mi:ss') END_ASSIGNED_TIME1
,to_char(CREATED_ON,'mm/dd/yyyy hh24:mi:ss') CREATED_ON
,RESOLUTION_CATEGORY_AUDIT
,GROUP_MANAGER
,GROUP_PM
,SLA_BYPASS_IND
,DESKTOP_IND
,RESPONSE_TARGET_IND
,REPAIR_TARGET_IND
,RESOLUTION_TARGET_IND
,REPORTED_SOURCE 
,REPORTED_SOURCE_AUDIT
from dash_helpdesk a
where (( 'emptyParam' = {month}
     or to_char(CREATED_ON,'mm-yyyy') = nvl({month},to_char(sysdate,'mm-yyyy')) )
      ) 
 and
 ( 'emptyParam' = {supportGroup}
     or assign_group = {supportGroup} or {supportGroup} = ' ALL')
     AND	(GROUP_MANAGER			= {director}
		OR	{director}			=  ' ALL')
		AND	(GROUP_PM			= {pm}
		OR	{pm}				=  ' ALL')		
		AND	(PRIORITY			= {ticketPriority}
		OR	{ticketPriority}			= ' ALL')
 and RESOLUTION_TARGET_IND = 'OUT'     
    </statement> 

    <statement code="HDDSLAResponseGridQuery" clientObject="HelpDeskDashboard">
select /*+ parallel(a,6) */
TICKET_ID
,TO_CHAR(TO_DATE(OPEN_MONTH,'YYYYMM'),'MM-YYYY') OPEN_MONTH
,ASSIGN_GROUP
,TICKET_STATUS
,SUPPORT_CATEGORY
,to_char(SUBMITTED_DATE,'mm/dd/yyyy hh24:mi:ss') SUBMITTED_DATE 
,to_char(RESOLVED_DATE,'mm/dd/yyyy hh24:mi:ss') RESOLVED_DATE 
,(nvl(to_date(to_char(RESOLVED_DATE,'MMDDYYYY'),'MMDDYYYY'),to_date(to_char(sysdate,'MMDDYYYY'),'MMDDYYYY'))  
- to_date(to_char(SUBMITTED_DATE,'MMDDYYYY'),'MMDDYYYY')) TICKET_AGE
,ASSIGNEE
,LAST_MODIFIED_BY
,PRIORITY
,STATUS
,PENDING
,CATEGORY
,TYPE
,ITEM
,SUMMARY
,REPLACE(REPLACE(REPLACE(solution_summary, CHR(10), ''), CHR(13), ''), CHR(9), '') SOLUTION_SUMMARY
,ROOT_CAUSE
,REGION
,SITE
,ORIG_SUBMITTER
,SUBMITTER_NAME
,RESOLUTION_CATEGORY
,RESOLUTION_CATEGORY_TIER_2
,STATUS_REASON_DESC
,DEPARTMENT
,to_char(REPAIRED_TIME,'mm/dd/yyyy hh24:mi:ss') REPAIRED_TIME
,CUS_STATUS_REASON
,ASSIGNED_GROUP1
,to_char(START_ASSIGNED_TIME1,'mm/dd/yyyy hh24:mi:ss') START_ASSIGNED_TIME1
,TOTAL_TIME_SPENT_IN_ASSIGNED1
,to_char(END_ASSIGNED_TIME1,'mm/dd/yyyy hh24:mi:ss') END_ASSIGNED_TIME1
,to_char(CREATED_ON,'mm/dd/yyyy hh24:mi:ss') CREATED_ON
,RESOLUTION_CATEGORY_AUDIT
,GROUP_MANAGER
,GROUP_PM
,SLA_BYPASS_IND
,DESKTOP_IND
,RESPONSE_TARGET_IND
,REPAIR_TARGET_IND
,RESOLUTION_TARGET_IND
,REPORTED_SOURCE 
,REPORTED_SOURCE_AUDIT
from dash_helpdesk a
where TO_CHAR(CREATED_ON,'YYYYMM')     = TO_CHAR(SYSDATE,'YYYYMM') 
 and
 ( 'emptyParam' = {supportGroup}
     or assign_group = {supportGroup} or {supportGroup} = ' ALL')
     AND	(GROUP_MANAGER			= {director}
		OR	{director}			=  ' ALL')
		AND	(GROUP_PM			= {pm}
		OR	{pm}				=  ' ALL')		
		AND	(PRIORITY			= {ticketPriority}
		OR	{ticketPriority}			= ' ALL')
 and RESPONSE_TARGET_IND IN ('IN','OUT','RISK')    
    </statement>
    




<statement code="HDDSLARepairGridQuery" clientObject="HelpDeskDashboard">
select /*+ parallel(a,6) */
TICKET_ID
,TO_CHAR(TO_DATE(OPEN_MONTH,'YYYYMM'),'MM-YYYY') OPEN_MONTH
,ASSIGN_GROUP
,TICKET_STATUS
,SUPPORT_CATEGORY
,to_char(SUBMITTED_DATE,'mm/dd/yyyy hh24:mi:ss') SUBMITTED_DATE 
,to_char(RESOLVED_DATE,'mm/dd/yyyy hh24:mi:ss') RESOLVED_DATE 
,(nvl(to_date(to_char(RESOLVED_DATE,'MMDDYYYY'),'MMDDYYYY'),to_date(to_char(sysdate,'MMDDYYYY'),'MMDDYYYY'))  
- to_date(to_char(SUBMITTED_DATE,'MMDDYYYY'),'MMDDYYYY')) TICKET_AGE
,ASSIGNEE
,LAST_MODIFIED_BY
,PRIORITY
,STATUS
,PENDING
,CATEGORY
,TYPE
,ITEM
,SUMMARY
,REPLACE(REPLACE(REPLACE(solution_summary, CHR(10), ''), CHR(13), ''), CHR(9), '') SOLUTION_SUMMARY
,ROOT_CAUSE
,REGION
,SITE
,ORIG_SUBMITTER
,SUBMITTER_NAME
,RESOLUTION_CATEGORY
,RESOLUTION_CATEGORY_TIER_2
,STATUS_REASON_DESC
,DEPARTMENT
,to_char(REPAIRED_TIME,'mm/dd/yyyy hh24:mi:ss') REPAIRED_TIME
,CUS_STATUS_REASON
,ASSIGNED_GROUP1
,to_char(START_ASSIGNED_TIME1,'mm/dd/yyyy hh24:mi:ss') START_ASSIGNED_TIME1
,TOTAL_TIME_SPENT_IN_ASSIGNED1
,to_char(END_ASSIGNED_TIME1,'mm/dd/yyyy hh24:mi:ss') END_ASSIGNED_TIME1
,to_char(CREATED_ON,'mm/dd/yyyy hh24:mi:ss') CREATED_ON
,RESOLUTION_CATEGORY_AUDIT
,GROUP_MANAGER
,GROUP_PM
,SLA_BYPASS_IND
,DESKTOP_IND
,RESPONSE_TARGET_IND
,REPAIR_TARGET_IND
,RESOLUTION_TARGET_IND
,REPORTED_SOURCE 
,REPORTED_SOURCE_AUDIT
from dash_helpdesk a
where TO_CHAR(CREATED_ON,'YYYYMM')     = TO_CHAR(SYSDATE,'YYYYMM') 
 and
 ( 'emptyParam' = {supportGroup}
     or assign_group = {supportGroup} or {supportGroup} = ' ALL')
     AND	(GROUP_MANAGER			= {director}
		OR	{director}			=  ' ALL')
		AND	(GROUP_PM			= {pm}
		OR	{pm}				=  ' ALL')		
		AND	(PRIORITY			= {ticketPriority}
		OR	{ticketPriority}			= ' ALL')
 and REPAIR_TARGET_IND IN ('IN','OUT','RISK')     
    </statement>





<statement code="HDDSLAResolutionGridQuery" clientObject="HelpDeskDashboard">
select /*+ parallel(a,6) */
TICKET_ID
,TO_CHAR(TO_DATE(OPEN_MONTH,'YYYYMM'),'MM-YYYY') OPEN_MONTH
,ASSIGN_GROUP
,TICKET_STATUS
,SUPPORT_CATEGORY
,to_char(SUBMITTED_DATE,'mm/dd/yyyy hh24:mi:ss') SUBMITTED_DATE 
,to_char(RESOLVED_DATE,'mm/dd/yyyy hh24:mi:ss') RESOLVED_DATE 
,(nvl(to_date(to_char(RESOLVED_DATE,'MMDDYYYY'),'MMDDYYYY'),to_date(to_char(sysdate,'MMDDYYYY'),'MMDDYYYY'))  
- to_date(to_char(SUBMITTED_DATE,'MMDDYYYY'),'MMDDYYYY')) TICKET_AGE
,ASSIGNEE
,LAST_MODIFIED_BY
,PRIORITY
,STATUS
,PENDING
,CATEGORY
,TYPE
,ITEM
,SUMMARY
,REPLACE(REPLACE(REPLACE(solution_summary, CHR(10), ''), CHR(13), ''), CHR(9), '') SOLUTION_SUMMARY
,ROOT_CAUSE
,REGION
,SITE
,ORIG_SUBMITTER
,SUBMITTER_NAME
,RESOLUTION_CATEGORY
,RESOLUTION_CATEGORY_TIER_2
,STATUS_REASON_DESC
,DEPARTMENT
,to_char(REPAIRED_TIME,'mm/dd/yyyy hh24:mi:ss') REPAIRED_TIME
,CUS_STATUS_REASON
,ASSIGNED_GROUP1
,to_char(START_ASSIGNED_TIME1,'mm/dd/yyyy hh24:mi:ss') START_ASSIGNED_TIME1
,TOTAL_TIME_SPENT_IN_ASSIGNED1
,to_char(END_ASSIGNED_TIME1,'mm/dd/yyyy hh24:mi:ss') END_ASSIGNED_TIME1
,to_char(CREATED_ON,'mm/dd/yyyy hh24:mi:ss') CREATED_ON
,RESOLUTION_CATEGORY_AUDIT
,GROUP_MANAGER
,GROUP_PM
,SLA_BYPASS_IND
,DESKTOP_IND
,RESPONSE_TARGET_IND
,REPAIR_TARGET_IND
,RESOLUTION_TARGET_IND
,REPORTED_SOURCE 
,REPORTED_SOURCE_AUDIT
from dash_helpdesk a
where TO_CHAR(CREATED_ON,'YYYYMM')     = TO_CHAR(SYSDATE,'YYYYMM') 
 and
 ( 'emptyParam' = {supportGroup}
     or assign_group = {supportGroup} or {supportGroup} = ' ALL')
     AND	(GROUP_MANAGER			= {director}
		OR	{director}			=  ' ALL')
		AND	(GROUP_PM			= {pm}
		OR	{pm}				=  ' ALL')		
		AND	(PRIORITY			= {ticketPriority}
		OR	{ticketPriority}			= ' ALL')
 and RESOLUTION_TARGET_IND IN ('IN','OUT','RISK')    
    </statement>  	
	
	<statement code="HDDSubmittedTktsGridQuery2" clientObject="HelpDeskDashboard">
select /*+ full(a) parallel(a,6) */
TICKET_ID
,TO_CHAR(TO_DATE(OPEN_MONTH,'YYYYMM'),'MM-YYYY') OPEN_MONTH
,ASSIGN_GROUP
,TICKET_STATUS
,SUPPORT_CATEGORY
,to_char(SUBMITTED_DATE,'mm/dd/yyyy hh24:mi:ss') SUBMITTED_DATE 
,to_char(RESOLVED_DATE,'mm/dd/yyyy hh24:mi:ss') RESOLVED_DATE
,(nvl(to_date(to_char(RESOLVED_DATE,'MMDDYYYY'),'MMDDYYYY'),to_date(to_char(sysdate,'MMDDYYYY'),'MMDDYYYY'))  
- to_date(to_char(SUBMITTED_DATE,'MMDDYYYY'),'MMDDYYYY')) TICKET_AGE
,ASSIGNEE
,LAST_MODIFIED_BY
,PRIORITY
,STATUS
,PENDING
,CATEGORY
,TYPE
,ITEM
,SUMMARY
,REPLACE(REPLACE(REPLACE(solution_summary, CHR(10), ''), CHR(13), ''), CHR(9), '') SOLUTION_SUMMARY
,ROOT_CAUSE
,REGION
,SITE
,ORIG_SUBMITTER
,SUBMITTER_NAME
,RESOLUTION_CATEGORY
,RESOLUTION_CATEGORY_TIER_2
,STATUS_REASON_DESC
,DEPARTMENT
,to_char(REPAIRED_TIME,'mm/dd/yyyy hh24:mi:ss') REPAIRED_TIME
,CUS_STATUS_REASON
,ASSIGNED_GROUP1
,to_char(START_ASSIGNED_TIME1,'mm/dd/yyyy hh24:mi:ss') START_ASSIGNED_TIME1
,TOTAL_TIME_SPENT_IN_ASSIGNED1
,to_char(END_ASSIGNED_TIME1,'mm/dd/yyyy hh24:mi:ss') END_ASSIGNED_TIME1
,to_char(CREATED_ON,'mm/dd/yyyy hh24:mi:ss') CREATED_ON
,RESOLUTION_CATEGORY_AUDIT
,GROUP_MANAGER
,GROUP_PM
,SLA_BYPASS_IND
,DESKTOP_IND
,RESPONSE_TARGET_IND
,REPAIR_TARGET_IND
,RESOLUTION_TARGET_IND
,REPORTED_SOURCE 
,REPORTED_SOURCE_AUDIT
from dash_helpdesk a
where (( 'emptyParam' = {month}
     or to_char(submitted_date,'mm-yyyy') = nvl({month},to_char(sysdate,'mm-yyyy')) )
      ) 
<!--  ( 'emptyParam' = {month}
     or open_month = {month} )--> 
 and
 ( 'emptyParam' = {supportGroup}
     or assign_group = {supportGroup} or {supportGroup} = ' ALL')
 AND	(GROUP_MANAGER			= {director}
		OR	{director}			=  ' ALL')
		AND	(GROUP_PM			= {pm}
		OR	{pm}				=  ' ALL')		
		AND	(PRIORITY			= {ticketPriority}
		OR	{ticketPriority}			= ' ALL')   
	</statement>
	
	<!--statement code="HDDSubmittedTktsGridQuery1" clientObject="HelpDeskDashboard">
	/*sub week view removed */
select /*+ full(a) parallel(a,6) */
TICKET_ID
,OPEN_MONTH
,ASSIGN_GROUP
,TICKET_STATUS
,SUPPORT_CATEGORY
,to_char(SUBMITTED_DATE,'MM/DD/YYYY') SUBMITTED_DATE 
,to_char(RESOLVED_DATE,'MM/DD/YYYY') RESOLVED_DATE 
,ASSIGNEE
,LAST_MODIFIED_BY
,PRIORITY
,STATUS
,PENDING
,CATEGORY
,TYPE
,ITEM
,SUMMARY
,SOLUTION_SUMMARY
,ROOT_CAUSE
,REGION
,SITE
from dash_helpdesk a
where ( 'emptyParam' = {week}
     or to_char(submitted_date,'yyyy-iw') = nvl(to_char(to_date({week},'MM/DD/YYYY'),'yyyy-iw'),to_char(sysdate,'yyyymm'))
      )  
 and 
( 'emptyParam' = {supportArea}
     or support_category = {supportArea} ) 
 and
 ( 'emptyParam' = {supportGroup}
     or assign_group = {supportGroup} or {supportGroup} = ' ALL')
	</statement-->	
	
	<statement code="HDDResolvedTktsGridQuery2" clientObject="HelpDeskDashboard">
select /*+ full(a) parallel(a,6) */
TICKET_ID
,TO_CHAR(TO_DATE(OPEN_MONTH,'YYYYMM'),'MM-YYYY') OPEN_MONTH
,ASSIGN_GROUP
,TICKET_STATUS
,SUPPORT_CATEGORY
,to_char(SUBMITTED_DATE,'mm/dd/yyyy hh24:mi:ss') SUBMITTED_DATE 
,to_char(RESOLVED_DATE,'mm/dd/yyyy hh24:mi:ss') RESOLVED_DATE 
,(nvl(to_date(to_char(RESOLVED_DATE,'MMDDYYYY'),'MMDDYYYY'),to_date(to_char(sysdate,'MMDDYYYY'),'MMDDYYYY'))  
- to_date(to_char(SUBMITTED_DATE,'MMDDYYYY'),'MMDDYYYY')) TICKET_AGE
,ASSIGNEE
,LAST_MODIFIED_BY
,PRIORITY
,STATUS
,PENDING
,CATEGORY
,TYPE
,ITEM
,SUMMARY
,REPLACE(REPLACE(REPLACE(solution_summary, CHR(10), ''), CHR(13), ''), CHR(9), '') SOLUTION_SUMMARY
,ROOT_CAUSE
,REGION
,SITE
,ORIG_SUBMITTER
,SUBMITTER_NAME
,RESOLUTION_CATEGORY
,RESOLUTION_CATEGORY_TIER_2
,STATUS_REASON_DESC
,DEPARTMENT
,to_char(REPAIRED_TIME,'mm/dd/yyyy hh24:mi:ss') REPAIRED_TIME
,CUS_STATUS_REASON
,ASSIGNED_GROUP1
,to_char(START_ASSIGNED_TIME1,'mm/dd/yyyy hh24:mi:ss') START_ASSIGNED_TIME1
,TOTAL_TIME_SPENT_IN_ASSIGNED1
,to_char(END_ASSIGNED_TIME1,'mm/dd/yyyy hh24:mi:ss') END_ASSIGNED_TIME1
,to_char(CREATED_ON,'mm/dd/yyyy hh24:mi:ss') CREATED_ON
,RESOLUTION_CATEGORY_AUDIT
,GROUP_MANAGER
,GROUP_PM
,SLA_BYPASS_IND
,DESKTOP_IND
,RESPONSE_TARGET_IND
,REPAIR_TARGET_IND
,RESOLUTION_TARGET_IND
,REPORTED_SOURCE 
,REPORTED_SOURCE_AUDIT
from dash_helpdesk a
where (
   ( 'emptyParam' = {month}
     or to_char(resolved_date,'mm-yyyy') = nvl({month},to_char(sysdate,'mm-yyyy')) ) ) 
<!--  ( 'emptyParam' = {month}
     or open_month = {month} )-->  
 and
 ( 'emptyParam' = {supportGroup}
     or assign_group = {supportGroup} or {supportGroup} = ' ALL')
     AND	(GROUP_MANAGER			= {director}
		OR	{director}			=  ' ALL')
		AND	(GROUP_PM			= {pm}
		OR	{pm}				=  ' ALL')		
		AND	(PRIORITY			= {ticketPriority}
		OR	{ticketPriority}			= ' ALL')
	</statement>
	
<!--statement code="HDDResolvedTktsGridQuery1" clientObject="HelpDeskDashboard">
/*sub week view removed */
select /*+ full(a) parallel(a,6) */
TICKET_ID
,OPEN_MONTH
,ASSIGN_GROUP
,TICKET_STATUS
,SUPPORT_CATEGORY
,to_char(SUBMITTED_DATE,'MM/DD/YYYY') SUBMITTED_DATE 
,to_char(RESOLVED_DATE,'MM/DD/YYYY') RESOLVED_DATE 
,ASSIGNEE
,LAST_MODIFIED_BY
,PRIORITY
,STATUS
,PENDING
,CATEGORY
,TYPE
,ITEM
,SUMMARY
,SOLUTION_SUMMARY
,ROOT_CAUSE
,REGION
,SITE
from dash_helpdesk a
where ( 'emptyParam' = {week}
     or to_char(resolved_date,'yyyy-iw') = nvl(to_char(to_date({week},'MM/DD/YYYY'),'yyyy-iw'),to_char(sysdate,'yyyymm'))
      )
 and 
( 'emptyParam' = {supportArea}
     or support_category = {supportArea} ) 
 and
 ( 'emptyParam' = {supportGroup}
     or assign_group = {supportGroup} or {supportGroup} = ' ALL')
	</statement-->	
	
	<statement code="HDDMonthlyChartQuery" clientObject="HelpDeskDashboard">
 	<!-- select 
	support_category,
	support_group,	
	submittedTickets,
	projSubmittedTickets,
	resolvedTickets,
	projResolvedTickets
	from hd_chart_temp -->
select 
sub_month
,open_ticket_count
,close_ticket_count resolvedTickets
,submitted_tickets submittedTickets
,open_ticket_wavg
,close_ticket_wavg projResolvedTickets
,submitted_tickets_wavg projSubmittedTickets
from
(
select
curr.support_category,
Initcap(curr.support_group) support_group,
curr.sub_month,
curr.open_ticket_count,
curr.close_ticket_count,
curr.submitted_tickets,
aver.open_ticket_count_6,
aver.close_ticket_count_6,
aver.submitted_tickets_6,
aver.open_ticket_avg op_6_avg,
aver.close_ticket_avg cl_6_avg,
aver.submitted_tickets_avg sb_6_avg,
aver.open_ticket_avg open_ticket_wavg,
aver.close_ticket_avg close_ticket_wavg,
aver.submitted_tickets_avg submitted_tickets_wavg,
curr.open_ticket_count - aver.open_ticket_avg open_ticket_diff,
curr.close_ticket_count - aver.close_ticket_avg close_ticket_diff,
curr.submitted_tickets - aver.submitted_tickets_avg submitted_tickets_diff
from
(select
ropen.support_category, 
ropen.support_group, 
--ropen.sub_month,
ropen.open_ticket_count open_ticket_count_6,
nvl(rclose.close_ticket_count,0) close_ticket_count_6,
ropen.submitted_tickets submitted_tickets_6,
round(ropen.open_ticket_count /6,1) open_ticket_avg,
round(nvl(rclose.close_ticket_count,0) /6,1) close_ticket_avg,
round(ropen.submitted_tickets /6,1) submitted_tickets_avg
from
(select /*+ full(a) parallel(a,6) */
a.SUPPORT_CATEGORY,
trim(a.ASSIGN_GROUP) support_group,
--to_char(a.submitted_date,'yyyymm') sub_month,
sum(case when a.RESOLVED_DATE is null then 1 else 0 end) open_ticket_count,
sum(case when a.RESOLVED_DATE is not null then 1 else 0 end) close_ticket_count,
count(*) submitted_tickets
from dash_helpdesk a,
(select nvl2({month}, to_date({month},'yyyymm'), trunc(sysdate,'MM')) month from dual) param
where
    to_char(a.submitted_date,'yyyymm') &gt;= to_char(add_months(param.month,-6),'yyyymm')
and to_char(a.submitted_date,'yyyymm') &lt;= to_char(param.month,'yyyymm')
group by
a.support_category,
trim(a.ASSIGN_GROUP)
) ropen,
(select /*+ full(a) parallel(a,6) */
a.SUPPORT_CATEGORY,
trim(a.ASSIGN_GROUP) support_group,
--to_char(a.resolved_date,'yyyymm') sub_month,
sum(case when a.RESOLVED_DATE is null then 1 else 0 end) open_ticket_count,
sum(case when a.RESOLVED_DATE is not null then 1 else 0 end) close_ticket_count,
count(*) submitted_tickets
from dash_helpdesk a,
(select nvl2({month}, to_date({month},'yyyymm'), trunc(sysdate,'MM')) month from dual) param
where
     to_char(a.resolved_date,'yyyymm') &gt;= to_char(add_months(param.month,-6),'yyyymm')
and  to_char(a.resolved_date,'yyyymm') &lt;= to_char(add_months(param.month,0),'yyyymm')   
group by
a.support_category,
trim(a.ASSIGN_GROUP)) rclose
where ropen.SUPPORT_CATEGORY = rclose.SUPPORT_CATEGORY (+)
and ropen.support_group = rclose.support_group (+)
) aver,
(select 
ropen.support_category, 
ropen.support_group,
ropen.sub_month, 
ropen.open_ticket_count,
nvl(rclose.close_ticket_count,0) close_ticket_count,
ropen.submitted_tickets
from
(select /*+ full(a) parallel(a,6) */
a.support_category,
trim(a.ASSIGN_GROUP) support_group,
to_char(a.submitted_date,'yyyymm') sub_month,
sum(case when a.resolved_date is null then 1 else 0 end) open_ticket_count,
sum(case when a.resolved_date is not null then 1 else 0 end) close_ticket_count,
count(*) submitted_tickets
from dash_helpdesk a,
(select nvl2({month}, to_date({month},'yyyymm'), trunc(sysdate,'MM')) month from dual) param
where to_char(a.submitted_date,'yyyymm') &gt;= to_char(add_months(param.month,-6),'yyyymm') 
and   to_char(a.submitted_date,'yyyymm') &lt;= to_char(param.month,'yyyymm')
group by 
a.support_category,
trim(a.ASSIGN_GROUP),
to_char(a.submitted_date,'yyyymm')) ropen,
(select /*+ full(a) parallel(a,6) */
a.support_category,
trim(a.ASSIGN_GROUP) support_group,
to_char(a.resolved_date,'yyyymm') sub_month,
sum(case when a.resolved_date is null then 1 else 0 end) open_ticket_count,
sum(case when a.resolved_date is not null then 1 else 0 end) close_ticket_count ,
count(*) submitted_tickets
from dash_helpdesk a,
(select nvl2({month}, to_date({month},'yyyymm'), trunc(sysdate,'MM')) month from dual) param
where to_char(a.resolved_date,'yyyymm') &gt;= to_char(add_months(param.month,-6),'yyyymm') 
and   to_char(a.resolved_date,'yyyymm') &lt;= to_char(param.month,'yyyymm')
group by 
a.support_category,
trim(a.ASSIGN_GROUP),
to_char(a.resolved_date,'yyyymm')) rclose
where ropen.support_category = rclose.support_category (+)
and ropen.support_group = rclose.support_group (+)
and ropen.sub_month = rclose.sub_month (+)) Curr,
(select nvl2({month}, to_date({month},'yyyymm'), trunc(sysdate,'MM')) month from dual) param
where
    curr.support_category = aver.support_category (+)
and curr.support_group    = aver.support_group (+)
--and curr.sub_month    = aver.sub_month (+)
and ( 'emptyParam' = {supportArea}
     or  curr.support_category = {supportArea} ) 
and ( 'emptyParam' = {supportGroup}
     or  curr.support_group = {supportGroup} ) 
and (substr(curr.sub_month,1,6) &gt;= to_char(add_months(param.month,-6),'yyyymm')
and substr(curr.sub_month,1,6) &lt;= to_char(param.month,'yyyymm'))
order by
    1, 14 desc, 3
 )
 --group by sub_month
 order by sub_month


	</statement>

<!--  select priv codes from CASS_EMP_PRIVS to be stored in the employee object -->
	<statement code="EmployeePrivCodesByEmployeeId" clientObject="None">
select distinct
       p.priv_code
from   (select     app_id
                 , employee_id
                 , priv_id
                 , null parent_priv_id
        from       caas_emp_privs
        where      app_id = 4
        and        employee_id = {employeeId}
        union
        select     p.app_id, p.employee_id, ip.inherited_priv_id, p.priv_id
        from       caas_inherited_privs ip
                 , (select ap.app_id, ep.employee_id, ep.priv_id
                    from   caas_app_privs ap
                         , caas_emp_privs ep
                    where  ap.app_id = ep.app_id
                    and    ap.priv_id = ep.priv_id
                    and    ap.app_id = 4
                    and    ep.employee_id = {employeeId}
                   ) p
        where      not exists 
                        (select 1
                         from   caas_emp_privs ep2
                         where  ep2.app_id = p.app_id
                         and    ep2.employee_id = p.employee_id
                         and    ep2.priv_id = ip.inherited_priv_id)
        start with p.app_id = ip.app_id
        and        p.priv_id = ip.priv_id
        connect by ip.app_id = prior ip.app_id
        and        ip.priv_id = prior ip.inherited_priv_id
       ) aep
     , caas_priv p
     , caas_app_privs ap
where  aep.priv_id = p.priv_id
and    aep.app_id = ap.app_id
and    aep.priv_id = ap.priv_id
	</statement>
	
  <!-- 
      DASH_EMPLOYEE table was created so that users *with*
      a Global Login account but *without* an EMPLOYEE record
      can be given access to the Dashboard
      
      EMPLOYEE will always be checked first!
    -->
  <statement code="DashEmployeeInfoByUserName">
SELECT login_name, security_profile, employee_id,
       emp_first_name first_name, employee_surname last_name,
       employee_short_name short_name, supervisor_id manager_id,
       e_mail_address, dash_employee.office_type office_type,
       dash_employee.office_code office_code, employee_position,
       home_db, region_code
  FROM dash_employee 
       LEFT OUTER JOIN office
         ON dash_employee.office_code = office.office_code
        AND dash_employee.office_type = office.office_type
 WHERE lower(login_name) = lower({username})  
  </statement>
  
 <statement code="BNI_chart_query"><![CDATA[
	select to_char(to_date(time_value,'yyyymm'),'Mon-yy') time_value,
	        superpges_count,
	        yellowpges_count,
	        yellowbook_count,
	        dexonline_count,
	        citysearch_count
	from (        
	select     time_value,
	       	   sum( case when provider = 'SUPERPAGES.COM' then rec_counts else 0 end ) superpges_count,
	           sum( case when provider = 'YELLOWPAGES.COM' then rec_counts else 0 end ) yellowpges_count,
	           sum( case when provider = 'YELLOWBOOK' then rec_counts else 0 end ) yellowbook_count,
	           sum( case when provider = 'DEXONLINE' then rec_counts else 0 end ) dexonline_count,
	           sum( case when provider = 'CITYSEARCH' then rec_counts else 0 end ) citysearch_count
	       from BNI_CHART_MV
	       group by time_value 
	       order by time_value      )
]]></statement>

	<statement code="BNI_pie_query"><![CDATA[
select 
       (case when  provider = 'SUPERPAGES.COM' then 'SUPERPAGES.COM'
            when  provider = 'YELLOWPAGES.COM' then 'YELLOWPAGES.COM'
            when  provider = 'YELLOWBOOK' then 'YELLOWBOOK'
            when  provider = 'DEXONLINE' then 'DEXONLINE'
            when  provider = 'CITYSEARCH' then 'CITYSEARCH'
end) provider ,
sum(rec_counts) rec_counts
       from BNI_PIE_MV
       group by provider    
]]></statement>

<statement code="BNI_details_query"><![CDATA[
		select  a.provider provider,
		        to_char(sum(a.AD_COST),'999,999,999.99') ad_cost,
		        to_char(sum(a.ACT_FREE_CALLS),'999,999,999') ACT_FREE_CALLS,
		        to_char(sum(a.ACT_LOCAL_CALLS),'999,999,999') ACT_LOCAL_CALLS,  
		        to_char(sum(a.IMPRESSIONS),'999,999,999') IMPRESSIONS, 
		        to_char(sum(a.CLICKS),'999,999,999') CLICKS, 
		        sum(a.COUPON_PRINTS) COUPON_PRINTS,
		        to_char(sum(a.COST_PER_CLICK),'00.00') COST_PER_CLICK,
		        to_char(sum(a.COST_PER_CALL),'00.00') COST_PER_CALL,
		        to_char(sum(a.COST_PER_PRINT),'00.00') COST_PER_PRINT,
		        to_char(sum(a.CLICK_THROUGH_RATE),'0.00') || '%' CLICK_THROUGH_RATE, 
		        case when sum(a.CLICK_TO_PRINT) is null then 'n/a' end CLICK_TO_PRINT
		from bni_detail a 
		where a.year = '2011' and a.month = '01'
        group by a.provider
]]></statement>

</sql>