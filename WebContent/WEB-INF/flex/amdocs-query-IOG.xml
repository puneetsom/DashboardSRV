<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sql SYSTEM "amdocs-query-config.dtd">
<sql type="CdwSQL">

<!--IOG Dashboard Page1 Queries Starts Here  -->
	<statement code="IOCT_InventoryIndex">
SELECT avg(priority_index) value
  FROM ioct_inv_item_all a
 WHERE udac_group_name = {udacGroupName}
   AND ( ('emptyParam') IN ({{regionCode}})  
      OR region IN ({{regionCode}}) )
	</statement>
	
      <statement code="IOCT_Cycle_Page_1">
select   c.*
from     IOCT_CYCLE_PAGE_1 c
         left outer join ioct_sort_order ug
           on c.product = ug.udac_group_name
          and c.workflow_type = ug.workflow_type
where    c.db_region = {regionsLabel}
and      c.cycle_year||lpad(c.cycle_month,2,'0') = {month}
and      c.workflow_type = {workflow}
order by ug.sort_order
          , c.product,c.change_level desc
      </statement>


      <statement code="IOCT_Cycle_Page_1_level"><![CDATA[
select   c.*
from     IOCT_CYCLE_PAGE_1 c
where    c.db_region = {regionsLabel}
and      c.cycle_year||lpad(c.cycle_month,2,'0') = {month}
and      c.workflow_type = {workflow}
and      c.udac_group_name = {udacGroupName}
and      c.change_level <> 'Total'
order by decode(change_level,'Simple',1,'Medium',2,3)
      ]]></statement>

<!--  Page 1 Drill Down Queries -->
<!-- used for total_volume -->
      <statement code="IOCT_CycleTime_DD_total_volume"><![CDATA[
select *
from   (select /*+ index (a ioct_cycle_time_all_4ix) parallel(a,4) */
               a.*
             , ROUND((CASE WHEN workflow_type = 'NEWITM' THEN a.LIVE_DATE - a.SIGNATURE_DATE ELSE a.IFULFILL_END_DATE - a.IFULFILL_START_DATE END),1) cycle_time_actual
             , row_number() over(partition by a.customer_id, a.product_code, a.product_issue_num, a.item_id, NVL(a.FEATURE_CODE,' '), a.css_product_id, a.IMV_ITEM_PROCESS_ID, a.COMPONENT_PROCESS_ID, a.WORKFLOW_TYPE
                                 order by a.process_start_time desc) rnum                                     
             , nvl(min(process_start_time) over(partition by a.customer_id, a.product_code, a.product_issue_num, a.item_id, NVL(a.FEATURE_CODE,' '), a.css_product_id, a.IMV_ITEM_PROCESS_ID, a.COMPONENT_PROCESS_ID, a.WORKFLOW_TYPE)
                 , open_date) min_process_start_time
             , nvl(max(process_end_time)   over(partition by a.customer_id, a.product_code, a.product_issue_num, a.item_id, NVL(a.FEATURE_CODE,' '), a.css_product_id, a.IMV_ITEM_PROCESS_ID, a.COMPONENT_PROCESS_ID, a.WORKFLOW_TYPE)
                 , live_date) max_process_end_time
        from   ioct_cycle_time_all a
        where  rec_type in ('LIV','LNF','CHG')
        and    PRODUCT_TARGET IS NOT NULL
        and    ( ('emptyParam') IN ({{regionCode}}) or region IN ({{regionCode}}) )
        and  (({workflow} = 'NEWITM' and    to_char(live_date,'yyyymm') = {month})
        or    ({workflow} <> 'NEWITM' and    to_char(ifulfill_end_date,'yyyymm') = {month}))
        and ( 'emptyParam' = {udacGroupName} or udac_group_name = {udacGroupName} )
        and    workflow_type = {workflow}
        and    (change_level = CASE WHEN {workflow} = 'NEWITM' THEN 'Simple' ELSE {changelevel} end 
        or     {changelevel} in ('All','Total'))
)
where  rnum = 1
       ]]></statement>
      
<!-- used for cycle_time_volume, bill_sig, and variance -->
      <statement code="IOCT_CycleTime_DD_cycle_time_volume"><![CDATA[
select *
from   (select /*+ index (a ioct_cycle_time_all_4ix) parallel(a,4) */
			  a.*	
             , ROUND((CASE WHEN workflow_type = 'NEWITM' THEN a.LIVE_DATE - a.SIGNATURE_DATE ELSE a.IFULFILL_END_DATE - a.IFULFILL_START_DATE END),1) cycle_time_actual
             , row_number() over(partition by a.customer_id, a.product_code, a.product_issue_num, a.item_id, NVL(a.FEATURE_CODE,' '), a.css_product_id, a.IMV_ITEM_PROCESS_ID, a.COMPONENT_PROCESS_ID, a.WORKFLOW_TYPE
                                 order by a.process_start_time desc) rnum                                     
             , nvl(min(process_start_time) over(partition by a.customer_id, a.product_code, a.product_issue_num, a.item_id, NVL(a.FEATURE_CODE,' '), a.css_product_id, a.IMV_ITEM_PROCESS_ID, a.COMPONENT_PROCESS_ID, a.WORKFLOW_TYPE)
                 , open_date) min_process_start_time
             , nvl(max(process_end_time)   over(partition by a.customer_id, a.product_code, a.product_issue_num, a.item_id, NVL(a.FEATURE_CODE,' '), a.css_product_id, a.IMV_ITEM_PROCESS_ID, a.COMPONENT_PROCESS_ID, a.WORKFLOW_TYPE)
                 , live_date) max_process_end_time
        from   ioct_cycle_time_all a
        where  rec_type in ('LIV','LNF','CHG')
        and    PRODUCT_TARGET IS NOT NULL 
        and    ((dep_prod_ind = 'N' and eue_normal_ind = 'Normal' and workflow_type = 'NEWITM') or ({workflow} <> 'NEWITM'))
        and    ( ('emptyParam') IN ({{regionCode}}) or region IN ({{regionCode}}) )
        and  (({workflow} = 'NEWITM' and    to_char(live_date,'yyyymm') = {month})
        or    ({workflow} <> 'NEWITM' and    to_char(ifulfill_end_date,'yyyymm') = {month}))
        and ( 'emptyParam' = {udacGroupName} or udac_group_name = {udacGroupName} )
        and    workflow_type = {workflow}
        and    (change_level = CASE WHEN {workflow} = 'NEWITM' THEN 'Simple' ELSE {changelevel} end 
        or     {changelevel} in ('All','Total'))
)
where  rnum = 1
      ]]></statement>
      
<!-- used in_target -->
      <statement code="IOCT_CycleTime_DD_in_target"><![CDATA[
select * 
from   (select /*+ index (a ioct_cycle_time_all_4ix) parallel(a,4) */
             a.*
             , ROUND((CASE WHEN workflow_type = 'NEWITM' THEN a.LIVE_DATE - a.SIGNATURE_DATE ELSE a.IFULFILL_END_DATE - a.IFULFILL_START_DATE END),1) cycle_time_actual
             , row_number() over(partition by a.customer_id, a.product_code, a.product_issue_num, a.item_id, NVL(a.FEATURE_CODE,' '), a.css_product_id, a.IMV_ITEM_PROCESS_ID, a.COMPONENT_PROCESS_ID, a.WORKFLOW_TYPE
                                 order by a.process_start_time desc) rnum                                     
             , nvl(min(process_start_time) over(partition by a.customer_id, a.product_code, a.product_issue_num, a.item_id, NVL(a.FEATURE_CODE,' '), a.css_product_id, a.IMV_ITEM_PROCESS_ID, a.COMPONENT_PROCESS_ID, a.WORKFLOW_TYPE)
                 , open_date) min_process_start_time
             , nvl(max(process_end_time)   over(partition by a.customer_id, a.product_code, a.product_issue_num, a.item_id, NVL(a.FEATURE_CODE,' '), a.css_product_id, a.IMV_ITEM_PROCESS_ID, a.COMPONENT_PROCESS_ID, a.WORKFLOW_TYPE)
                 , live_date) max_process_end_time
        from   ioct_cycle_time_all a
        where  a.rec_type in ('LIV','LNF','CHG')
        and    PRODUCT_TARGET IS NOT NULL
        and    a.udac_group_name = b.udac_group_name 
        and    ((dep_prod_ind = 'N' and eue_normal_ind = 'Normal' and workflow_type = 'NEWITM') or ({workflow} <> 'NEWITM'))
        and    (a.live_date - a.signature_date) <= a.product_target
        and    ( ('emptyParam') IN ({{regionCode}}) or a.region IN ({{regionCode}}) )
        and  (({workflow} = 'NEWITM' and    to_char(live_date,'yyyymm') = {month})
        or    ({workflow} <> 'NEWITM' and    to_char(ifulfill_end_date,'yyyymm') = {month}))
        and    a.udac_group_name = {udacGroupName}
        and    workflow_type = {workflow}
        and    (change_level = CASE WHEN {workflow} = 'NEWITM' THEN 'Simple' ELSE {changelevel} end 
        or     {changelevel} in ('All','Total'))
)
where  rnum = 1
      ]]></statement>
      
<!-- used for out_target -->
      <statement code="IOCT_CycleTime_DD_out_target"><![CDATA[
select * 
from   (select /*+ index (a ioct_cycle_time_all_4ix) parallel(a,4) */
             a.*
             , ROUND((CASE WHEN workflow_type = 'NEWITM' THEN a.LIVE_DATE - a.SIGNATURE_DATE ELSE a.IFULFILL_END_DATE - a.IFULFILL_START_DATE END),1) cycle_time_actual
             , row_number() over(partition by a.customer_id, a.product_code, a.product_issue_num, a.item_id, NVL(a.FEATURE_CODE,' '), a.css_product_id, a.IMV_ITEM_PROCESS_ID, a.COMPONENT_PROCESS_ID, a.WORKFLOW_TYPE
                                 order by a.process_start_time desc) rnum                                     
             , nvl(min(process_start_time) over(partition by a.customer_id, a.product_code, a.product_issue_num, a.item_id, NVL(a.FEATURE_CODE,' '), a.css_product_id, a.IMV_ITEM_PROCESS_ID, a.COMPONENT_PROCESS_ID, a.WORKFLOW_TYPE)
                 , open_date) min_process_start_time
             , nvl(max(process_end_time)   over(partition by a.customer_id, a.product_code, a.product_issue_num, a.item_id, NVL(a.FEATURE_CODE,' '), a.css_product_id, a.IMV_ITEM_PROCESS_ID, a.COMPONENT_PROCESS_ID, a.WORKFLOW_TYPE)
                 , live_date) max_process_end_time
        from   ioct_cycle_time_all a
        where  rec_type in ('LIV','LNF','CHG')
        and    PRODUCT_TARGET IS NOT NULL 
        and    ((dep_prod_ind = 'N' and eue_normal_ind = 'Normal' and workflow_type = 'NEWITM') or ({workflow} <> 'NEWITM'))
        and    a.udac_group_name = b.udac_group_name
        and    (a.live_date - a.signature_date) > a.product_target
        and    ( ('emptyParam') IN ({{regionCode}}) or a.region IN ({{regionCode}}) )
        and  (({workflow} = 'NEWITM' and    to_char(live_date,'yyyymm') = {month})
        or    ({workflow} <> 'NEWITM' and    to_char(ifulfill_end_date,'yyyymm') = {month}))
        and    a.udac_group_name = {udacGroupName}
        and    workflow_type = {workflow}
        and    (change_level = CASE WHEN {workflow} = 'NEWITM' THEN 'Simple' ELSE {changelevel} end 
        or     {changelevel} in ('All','Total'))
)
where  rnum = 1
      ]]></statement>
      
<!-- used for open_sig, process_open, end_start, and live_end -->
      <statement code="IOCT_CycleTime_DD_open_sig"><![CDATA[
select * 
from   (select /*+ index (a ioct_cycle_time_all_4ix) parallel(a,4) */
             a.*
             , ROUND((CASE WHEN workflow_type = 'NEWITM' THEN a.LIVE_DATE - a.SIGNATURE_DATE ELSE a.IFULFILL_END_DATE - a.IFULFILL_START_DATE END),1) cycle_time_actual
             , row_number() over(partition by a.customer_id, a.product_code, a.product_issue_num, a.item_id, NVL(a.FEATURE_CODE,' '), a.css_product_id, a.IMV_ITEM_PROCESS_ID, a.COMPONENT_PROCESS_ID, a.WORKFLOW_TYPE
                                 order by a.process_start_time desc) rnum                                     
             , nvl(min(process_start_time) over(partition by a.customer_id, a.product_code, a.product_issue_num, a.item_id, NVL(a.FEATURE_CODE,' '), a.css_product_id, a.IMV_ITEM_PROCESS_ID, a.COMPONENT_PROCESS_ID, a.WORKFLOW_TYPE)
                 , open_date) min_process_start_time
             , nvl(max(process_end_time)   over(partition by a.customer_id, a.product_code, a.product_issue_num, a.item_id, NVL(a.FEATURE_CODE,' '), a.css_product_id, a.IMV_ITEM_PROCESS_ID, a.COMPONENT_PROCESS_ID, a.WORKFLOW_TYPE)
                 , live_date) max_process_end_time
        from   ioct_cycle_time_all a
       where  rec_type in ('LIV','LNF','CHG')
        and    PRODUCT_TARGET IS NOT NULL
        and    ((dep_prod_ind = 'N' and eue_normal_ind = 'Normal' and workflow_type = 'NEWITM') or ({workflow} <> 'NEWITM'))
        and    ( ('emptyParam') IN ({{regionCode}}) or region IN ({{regionCode}}) )
        and  (({workflow} = 'NEWITM' and    to_char(live_date,'yyyymm') = {month})
        or    ({workflow} <> 'NEWITM' and    to_char(ifulfill_end_date,'yyyymm') = {month}))
        and    udac_group_name = {udacGroupName}
        and    workflow_type = {workflow}
        and    (change_level = CASE WHEN {workflow} = 'NEWITM' THEN 'Simple' ELSE {changelevel} end 
        or     {changelevel} in ('All','Total'))
)
where  rnum = 1
      ]]></statement>
      
<!-- used for top_25 -->
      <statement code="IOCT_CycleTime_DD_top_25"><![CDATA[
      select * from 
(select b.* , NTILE(4) OVER (ORDER BY (b.LIVE_DATE - b.SIGNATURE_DATE) DESC) AS QUARTILE
from   (select /*+ index (a ioct_cycle_time_all_4ix) parallel(a,4) */ 
             a.*
             , ROUND((CASE WHEN workflow_type = 'NEWITM' THEN a.LIVE_DATE - a.SIGNATURE_DATE ELSE a.IFULFILL_END_DATE - a.IFULFILL_START_DATE END),1) cycle_time_actual
             , row_number() over(partition by a.customer_id, a.product_code, a.product_issue_num, a.item_id, NVL(a.FEATURE_CODE,' '), a.css_product_id, a.IMV_ITEM_PROCESS_ID, a.COMPONENT_PROCESS_ID, a.WORKFLOW_TYPE
                                 order by a.process_start_time desc) rnum                                     
             , nvl(min(process_start_time) over(partition by a.customer_id, a.product_code, a.product_issue_num, a.item_id, NVL(a.FEATURE_CODE,' '), a.css_product_id, a.IMV_ITEM_PROCESS_ID, a.COMPONENT_PROCESS_ID, a.WORKFLOW_TYPE)
                 , open_date) min_process_start_time
             , nvl(max(process_end_time)   over(partition by a.customer_id, a.product_code, a.product_issue_num, a.item_id, NVL(a.FEATURE_CODE,' '), a.css_product_id, a.IMV_ITEM_PROCESS_ID, a.COMPONENT_PROCESS_ID, a.WORKFLOW_TYPE)
                 , live_date) max_process_end_time
        from   ioct_cycle_time_all a
        where  rec_type in ('LIV','LNF','CHG')
        and    PRODUCT_TARGET IS NOT NULL
        and dep_prod_ind = 'N'
        and    ((eue_normal_ind = 'Normal' and workflow_type = 'NEWITM') or ({workflow} <> 'NEWITM'))
        and    ( ('emptyParam') IN ({{regionCode}}) or region IN ({{regionCode}}) )
        and  (({workflow} = 'NEWITM' and    to_char(live_date,'yyyymm') = {month})
        or    ({workflow} <> 'NEWITM' and    to_char(ifulfill_end_date,'yyyymm') = {month}))
        and    udac_group_name = {udacGroupName}
        and    workflow_type = {workflow}
        and    (change_level = CASE WHEN {workflow} = 'NEWITM' THEN 'Simple' ELSE {changelevel} end 
        or     {changelevel} in ('All','Total'))
) b
where  rnum = 1) 
where  QUARTILE = 4
      ]]></statement>
      
<!-- used for top_75 -->
      <statement code="IOCT_CycleTime_DD_top_75"><![CDATA[
      select * from
(select b.* , NTILE(4) OVER (ORDER BY (b.LIVE_DATE - b.SIGNATURE_DATE) DESC) AS QUARTILE
from   (select /*+ index (a ioct_cycle_time_all_4ix) parallel(a,4) */ 
             a.*
             , ROUND((CASE WHEN workflow_type = 'NEWITM' THEN a.LIVE_DATE - a.SIGNATURE_DATE ELSE a.IFULFILL_END_DATE - a.IFULFILL_START_DATE END),1) cycle_time_actual
             , row_number() over(partition by a.customer_id, a.product_code, a.product_issue_num, a.item_id, NVL(a.FEATURE_CODE,' '), a.css_product_id, a.IMV_ITEM_PROCESS_ID, a.COMPONENT_PROCESS_ID, a.WORKFLOW_TYPE
                                 order by a.process_start_time desc) rnum                                     
             , nvl(min(process_start_time) over(partition by a.customer_id, a.product_code, a.product_issue_num, a.item_id, NVL(a.FEATURE_CODE,' '), a.css_product_id, a.IMV_ITEM_PROCESS_ID, a.COMPONENT_PROCESS_ID, a.WORKFLOW_TYPE)
                 , open_date) min_process_start_time
             , nvl(max(process_end_time)   over(partition by a.customer_id, a.product_code, a.product_issue_num, a.item_id, NVL(a.FEATURE_CODE,' '), a.css_product_id, a.IMV_ITEM_PROCESS_ID, a.COMPONENT_PROCESS_ID, a.WORKFLOW_TYPE)
                 , live_date) max_process_end_time
        from   ioct_cycle_time_all a
        where  rec_type in ('LIV','LNF','CHG')
        and    PRODUCT_TARGET IS NOT NULL
        and dep_prod_ind = 'N'
        and    ((eue_normal_ind = 'Normal' and workflow_type = 'NEWITM') or ({workflow} <> 'NEWITM'))
        and    ( ('emptyParam') IN ({{regionCode}}) or region IN ({{regionCode}}) )
        and  (({workflow} = 'NEWITM' and    to_char(live_date,'yyyymm') = {month})
        or    ({workflow} <> 'NEWITM' and    to_char(ifulfill_end_date,'yyyymm') = {month}))
        and    udac_group_name = {udacGroupName}
        and    workflow_type = {workflow}
        and    (change_level = CASE WHEN {workflow} = 'NEWITM' THEN 'Simple' ELSE {changelevel} end 
        or     {changelevel} in ('All','Total'))
) b
where  rnum = 1) 
where  QUARTILE > 1
      ]]></statement>
      
<!-- used for bottom_25 --> 
      <statement code="IOCT_CycleTime_DD_bottom_25"><![CDATA[
      select * from 
(select b.* , NTILE(4) OVER (ORDER BY (b.LIVE_DATE - b.SIGNATURE_DATE) DESC) AS QUARTILE
from   (select /*+ index (a ioct_cycle_time_all_4ix) parallel(a,4) */ 
             a.*
             , ROUND((CASE WHEN workflow_type = 'NEWITM' THEN a.LIVE_DATE - a.SIGNATURE_DATE ELSE a.IFULFILL_END_DATE - a.IFULFILL_START_DATE END),1) cycle_time_actual
             , row_number() over(partition by a.customer_id, a.product_code, a.product_issue_num, a.item_id, NVL(a.FEATURE_CODE,' '), a.css_product_id, a.IMV_ITEM_PROCESS_ID, a.COMPONENT_PROCESS_ID, a.WORKFLOW_TYPE
                                 order by a.process_start_time desc) rnum                                     
             , nvl(min(process_start_time) over(partition by a.customer_id, a.product_code, a.product_issue_num, a.item_id, NVL(a.FEATURE_CODE,' '), a.css_product_id, a.IMV_ITEM_PROCESS_ID, a.COMPONENT_PROCESS_ID, a.WORKFLOW_TYPE)
                 , open_date) min_process_start_time
             , nvl(max(process_end_time)   over(partition by a.customer_id, a.product_code, a.product_issue_num, a.item_id, NVL(a.FEATURE_CODE,' '), a.css_product_id, a.IMV_ITEM_PROCESS_ID, a.COMPONENT_PROCESS_ID, a.WORKFLOW_TYPE)
                 , live_date) max_process_end_time
        from   ioct_cycle_time_all a
        where  rec_type in ('LIV','LNF','CHG')
        and    PRODUCT_TARGET IS NOT NULL
        and dep_prod_ind = 'N'
        and    ((eue_normal_ind = 'Normal' and workflow_type = 'NEWITM') or ({workflow} <> 'NEWITM'))
        and    ( ('emptyParam') IN ({{regionCode}}) or region IN ({{regionCode}}) )
        and  (({workflow} = 'NEWITM' and    to_char(live_date,'yyyymm') = {month})
        or    ({workflow} <> 'NEWITM' and    to_char(ifulfill_end_date,'yyyymm') = {month}))
        and    udac_group_name = {udacGroupName}
        and    workflow_type = {workflow}
        and    (change_level = CASE WHEN {workflow} = 'NEWITM' THEN 'Simple' ELSE {changelevel} end 
        or     {changelevel} in ('All','Total'))
) b
where  rnum = 1)
where  QUARTILE = 1
      ]]></statement>
      
 <statement code="IOCT_Cycle_Page_2"><![CDATA[
select  b.rec_label rec_type
      , b.date_label date_type
      , a.rec_yyyy
      , a.rec_ww
      , a.rec_mm
      , to_char(a.date_value,'YYYYMMDD') rec_date
      , a.total_volume 
      , a.open_sig_avg briefcase_time_avg
      , a.open_sig_cnt briefcase_time_cnt
      , a.open_sig_pct_in briefcase_time_in_pct
      , a.open_sig_pct_out briefcase_time_out_pct
      , nvl(a.open_sig_target,c.open_sig_target) open_sig_target
      , a.process_open_avg contract_approval_age
      , a.process_open_cnt contract_approval_cnt
      , a.process_open_pct_in contract_approval_in_pct
      , a.process_open_pct_out contract_approval_out_pct
      , nvl(a.process_open_target,c.process_open_target) process_open_target
      , c.function_1_name function1_name
      , a.function1_cnt
      , a.function1_avg
      , a.function1_pct_in
      , a.function1_pct_out
      , case when a.workflow_type <> 'NEWITM' and a.change_level = 'Total' then a.function1_target
             else nvl(a.function1_target,c.target_1_days) end function1_target
      , c.function_2_name function2_name
      , a.function2_cnt
      , a.function2_avg
      , a.function2_pct_in
      , a.function2_pct_out
      , case when a.workflow_type <> 'NEWITM' and a.change_level = 'Total' then a.function2_target
             else nvl(a.function2_target,c.target_2_days) end function2_target
      , c.function_3_name function3_name
      , a.function3_cnt
      , a.function3_avg
      , a.function3_pct_in
      , a.function3_pct_out
      , case when a.workflow_type <> 'NEWITM' and a.change_level = 'Total' then a.function3_target
             else nvl(a.function3_target,c.target_3_days) end function3_target
      , c.function_4_name function4_name
      , a.function4_cnt
      , a.function4_avg
      , a.function4_pct_in
      , a.function4_pct_out
      , case when a.workflow_type <> 'NEWITM' and a.change_level = 'Total' then a.function4_target
             else nvl(a.function4_target,c.target_4_days) end function4_target
      , c.function_5_name function5_name
      , a.function5_cnt
      , a.function5_avg
      , a.function5_pct_in
      , a.function5_pct_out
      , case when a.workflow_type <> 'NEWITM' and a.change_level = 'Total' then a.function5_target
             else nvl(a.function5_target,c.target_5_days) end function5_target
      , c.function_6_name function6_name
      , a.function6_cnt
      , a.function6_avg
      , a.function6_pct_in
      , a.function6_pct_out
      , case when a.workflow_type <> 'NEWITM' and a.change_level = 'Total' then a.function6_target
             else nvl(a.function6_target,c.target_6_days) end function6_target
      , c.function_7_name function7_name
      , a.function7_cnt
      , a.function7_avg
      , a.function7_pct_in
      , a.function7_pct_out
      , case when a.workflow_type <> 'NEWITM' and a.change_level = 'Total' then a.function7_target
             else nvl(a.function7_target,c.target_7_days) end function7_target
      , c.function_8_name function8_name
      , a.function8_cnt
      , a.function8_avg
      , a.function8_pct_in
      , a.function8_pct_out
      , case when a.workflow_type <> 'NEWITM' and a.change_level = 'Total' then a.function8_target
             else nvl(a.function8_target,c.target_8_days) end function8_target
      , c.function_9_name function9_name
      , a.function9_cnt
      , a.function9_avg
      , a.function9_pct_in
      , a.function9_pct_out
      , case when a.workflow_type <> 'NEWITM' and a.change_level = 'Total' then a.function9_target
             else nvl(a.function9_target,c.target_9_days) end function9_target
      , c.function_10_name function10_name
      , a.function10_cnt
      , a.function10_avg
      , a.function10_pct_in
      , a.function10_pct_out
      , case when a.workflow_type <> 'NEWITM' and a.change_level = 'Total' then a.function10_target
             else nvl(a.function10_target,c.target_10_days) end function10_target
      , a.fulfill_bill_avg
      , a.fulfill_bill_cnt
      , a.fulfill_bill_pct_in
      , a.fulfill_bill_pct_out 
      , nvl(c.fulfill_bill_target,a.fulfill_bill_target) fulfill_bill_target
from    (select   rec_level rec_order
                , (case when rec_level = 1                            then 'T' 
                        when rec_level = 2 and {workflow}  = 'NEWITM' then 'N' 
                        when rec_level = 2 and {workflow} <> 'NEWITM' then 'S' 
                        when rec_level = 3 and {workflow}  = 'NEWITM' then 'E' 
                        when rec_level = 3 and {workflow} <> 'NEWITM' then 'M' 
                        else 'C' end) rec_type
                , (case when rec_level = 1                            then 'Total' 
                        when rec_level = 2 and {workflow}  = 'NEWITM' then 'Normal' 
                        when rec_level = 2 and {workflow} <> 'NEWITM' then 'Simple' 
                        when rec_level = 3 and {workflow}  = 'NEWITM' then 'EUE' 
                        when rec_level = 3 and {workflow} <> 'NEWITM' then 'Medium' 
                        else 'Complex' end) rec_label
                , date_level date_order
                , (case date_level when 1 then 'W' when 2 then 'M' when 3 then 'Y' end) date_type
                , (case date_level when 1 then 'Last Week' when 2 then 'MTD' when 3 then 'YTD' end) date_label
          from    (select level rec_level from dual connect by level < CASE WHEN {workflow} = 'NEWITM' THEN 4 ELSE 5 END)
                , (select level date_level from dual connect by level < 4)
         ) b
         left outer join ioct_cycle_page_2 a
           on a.rec_type = b.rec_type
          and a.date_type = b.date_type
          and ( ('emptyParam') IN ({{regionCode}}) OR a.db_region IN ({{regionCode}}) )
          and ( ('emptyParam') IN ({{product}}) OR a.product IN ({{product}}) )
          and ( (b.date_type = 'M' and rec_yyyy||lpad(rec_mm, 2,'0') = {month}) 
           or   (b.date_type = 'Y' and rec_yyyy = substr({month},1,4)) 
           or    b.date_type = 'W' )
          and a.workflow_type = {workflow}
         left outer join
      (select   ugn.udac_group_name
              , ft.change_level
              , function_1_name
                    , function_2_name
                    , function_3_name
                    , function_4_name
                    , function_5_name
                    , function_6_name
                    , function_7_name
                    , function_8_name
                    , function_9_name
                    , function_10_name
                    , target_1_days
                    , target_2_days
                    , target_3_days
                    , target_4_days
                    , target_5_days
                    , target_6_days
                    , target_7_days
                    , target_8_days
                    , target_9_days
                    , target_10_days
                    , open_sig_target
                    , process_open_target
                    , fulfill_bill_target
        from     
             (select   udac_group, change_level
                 , max(case when function_order = 1 then function_name end) function_1_name
                 , max(case when function_order = 2 then function_name end) function_2_name
                 , max(case when function_order = 3 then function_name end) function_3_name
                 , max(case when function_order = 4 then function_name end) function_4_name
                 , max(case when function_order = 5 then function_name end) function_5_name
                 , max(case when function_order = 6 then function_name end) function_6_name
                 , max(case when function_order = 7 then function_name end) function_7_name
                 , max(case when function_order = 8 then function_name end) function_8_name
                 , max(case when function_order = 9 then function_name end) function_9_name
                 , max(case when function_order = 10 then function_name end) function_10_name
                 , max(case when function_order = 1 then target_days end) target_1_days
                 , max(case when function_order = 2 then target_days end) target_2_days
                 , max(case when function_order = 3 then target_days end) target_3_days
                 , max(case when function_order = 4 then target_days end) target_4_days
                 , max(case when function_order = 5 then target_days end) target_5_days
                 , max(case when function_order = 6 then target_days end) target_6_days
                 , max(case when function_order = 7 then target_days end) target_7_days
                 , max(case when function_order = 8 then target_days end) target_8_days
                 , max(case when function_order = 9 then target_days end) target_9_days
                 , max(case when function_order = 10 then target_days end) target_10_days
              from     ioct_function_target
              where (case when to_char(sysdate,'yyyymm') = {month}
                          then trunc(sysdate) 
                          else add_months(to_date({month},'yyyymm'),1)-1 end)
                    between effective_from_date and effective_to_date
		and db_region = CASE WHEN {{regionCode}} IN ('ALL','IR') THEN 'EAST' ELSE {{regionCode}} END
                and workflow_type = {workflow}
              group by udac_group, change_level) ft
        join
        udac_group_name_ca ugn
        on ft.udac_group = ugn.udac_group
        join
        (select udac_group, change_level, open_sig_target, process_open_target, fulfill_bill_target
        from    ioct_other_target
        where (case when to_char(sysdate,'yyyymm') = {month}
                    then trunc(sysdate) 
                    else add_months(to_date({month},'yyyymm'),1)-1 end)
              between effective_from_date and effective_to_date
          and db_region = CASE WHEN {{regionCode}} IN ('ALL','IR') THEN 'EAST' ELSE {{regionCode}} END
          and workflow_type = {workflow} ) ot
        on ft.udac_group = ot.udac_group
	and ft.change_level = ot.change_level) c
        on a.product = c.udac_group_name
	and (a.change_level = c.change_level or (a.change_level = 'Total' and c.change_level = 'Simple'))
order by b.rec_order
       , b.date_order
     ]]></statement>
      
      
<statement code="IOCT_Cycle_Page_2_temp"><![CDATA[
select  b.rec_label rec_type
      , b.date_label date_type
      , a.rec_yyyy
      , a.rec_ww
      , a.rec_mm
      , to_char(a.date_value,'YYYYMMDD') rec_date
      , a.total_volume 
      , a.open_sig_cnt briefcase_time_cnt
      , a.open_sig_pct_in briefcase_time_in_pct
      , a.open_sig_pct_out briefcase_time_out_pct
      , nvl(c.open_sig_target,a.open_sig_target) open_sig_target
      , a.process_open_cnt contract_approval_cnt
      , a.process_open_pct_in contract_approval_in_pct
      , a.process_open_pct_out contract_approval_out_pct
      , nvl(c.process_open_target,a.process_open_target) process_open_target
      , c.function_1_name function1_name
      , a.function1_cnt
      , a.function1_avg
      , a.function1_pct_in
      , a.function1_pct_out
      , nvl(c.target_1_days,a.function1_target) function1_target
      , c.function_2_name function2_name
      , a.function2_cnt
      , a.function2_avg
      , a.function2_pct_in
      , a.function2_pct_out
      , nvl(c.target_2_days,a.function2_target) function2_target
      , c.function_3_name function3_name
      , a.function3_cnt
      , a.function3_avg
      , a.function3_pct_in
      , a.function3_pct_out
      , nvl(c.target_3_days,a.function3_target) function3_target
      , c.function_4_name function4_name
      , a.function4_cnt
      , a.function4_avg
      , a.function4_pct_in
      , a.function4_pct_out
      , nvl(c.target_4_days,a.function4_target) function4_target
      , c.function_5_name function5_name
      , a.function5_cnt
      , a.function5_avg
      , a.function5_pct_in
      , a.function5_pct_out
      , nvl(c.target_5_days,a.function5_target) function5_target
      , c.function_6_name function6_name
      , a.function6_cnt
      , a.function6_avg
      , a.function6_pct_in
      , a.function6_pct_out
      , nvl(c.target_6_days,a.function6_target) function6_target
      , c.function_7_name function7_name
      , a.function7_cnt
      , a.function7_avg
      , a.function7_pct_in
      , a.function7_pct_out
      , nvl(c.target_7_days,a.function7_target) function7_target
      , c.function_8_name function8_name
      , a.function8_cnt
      , a.function8_avg
      , a.function8_pct_in
      , a.function8_pct_out
      , nvl(c.target_8_days,a.function8_target) function8_target
      , c.function_9_name function9_name
      , a.function9_cnt
      , a.function9_avg
      , a.function9_pct_in
      , a.function9_pct_out
      , nvl(c.target_9_days,a.function9_target) function9_target
      , c.function_10_name function10_name
      , a.function10_cnt
      , a.function10_avg
      , a.function10_pct_in
      , a.function10_pct_out
      , nvl(c.target_10_days,a.function10_target) function10_target
      , a.fulfill_bill_cnt
      , a.fulfill_bill_pct_in
      , a.fulfill_bill_pct_out 
      , nvl(c.fulfill_bill_target,a.fulfill_bill_target) fulfill_bill_target
from    (select * from (select   'ESCL_CHG' workflow_type,
                rec_level rec_order
                , (case rec_level when 1 then 'T' when 2 then 'S' when 3 then 'M' when 4 then 'C' end) rec_type
                , (case rec_level when 1 then 'Total' when 2 then 'Simple' when 3 then 'Medium' when 4 then 'Complex' end) rec_label
                , date_level date_order
                , (case date_level when 1 then 'W' when 2 then 'M' when 3 then 'Y' end) date_type
                , (case date_level when 1 then 'Last Week' when 2 then 'MTD' when 3 then 'YTD' end) date_label
          from    (select level rec_level from dual connect by level < 5)
                , (select level date_level from dual connect by level < 4)
         UNION ALL           
        select   'NEWITM' workflow_type,
                rec_level rec_order
                , (case rec_level when 1 then 'T' when 2 then 'N' when 3 then 'E' end) rec_type
                , (case rec_level when 1 then 'Total' when 2 then 'Normal' when 3 then 'EUE' end) rec_label
                , date_level date_order
                , (case date_level when 1 then 'W' when 2 then 'M' when 3 then 'Y' end) date_type
                , (case date_level when 1 then 'Last Week' when 2 then 'MTD' when 3 then 'YTD' end) date_label
          from    (select level rec_level from dual connect by level < 4)
                , (select level date_level from dual connect by level < 4)) bb                 
          where (case when {workflow}= 'NEWITM'  then 'NEWITM' else 'ESCL_CHG' end) = bb.workflow_type) b
         left outer join ioct_cycle_page_2 a
           on a.rec_type = b.rec_type
          and a.date_type = b.date_type
          and ( ('emptyParam') IN ({{regionCode}}) OR a.db_region IN ({{regionCode}}) )
          and ( ('emptyParam') IN ({{product}}) OR a.product IN ({{product}}) )
          and a.workflow_type = {workflow}
          and ( (b.date_type = 'M' and rec_yyyy||lpad(rec_mm, 2,'0') = {month}) 
          		OR (b.date_type = 'Y' and rec_yyyy = substr({month},0,4)) OR b.date_type in ('W') )
         left outer join
	(select   distinct ugn.udac_group_name, ft.workflow_type , ft.db_region
	        , function_1_name
       	        , function_2_name
       	        , function_3_name
       	        , function_4_name
       	        , function_5_name
       	        , function_6_name
       	        , function_7_name
       	        , function_8_name
       	        , function_9_name
       	        , function_10_name
       	        , target_1_days
       	        , target_2_days
       	        , target_3_days
       	        , target_4_days
       	        , target_5_days
       	        , target_6_days
       	        , target_7_days
       	        , target_8_days
       	        , target_9_days
       	        , target_10_days
       	        , open_sig_target
       	        , process_open_target
       	        , fulfill_bill_target
	  from     
             (select   udac_group , workflow_type , db_region
                 , max(case when function_order = 1 then function_name end) function_1_name
                 , max(case when function_order = 2 then function_name end) function_2_name
                 , max(case when function_order = 3 then function_name end) function_3_name
                 , max(case when function_order = 4 then function_name end) function_4_name
                 , max(case when function_order = 5 then function_name end) function_5_name
                 , max(case when function_order = 6 then function_name end) function_6_name
                 , max(case when function_order = 7 then function_name end) function_7_name
                 , max(case when function_order = 8 then function_name end) function_8_name
                 , max(case when function_order = 9 then function_name end) function_9_name
                 , max(case when function_order = 10 then function_name end) function_10_name
                 , max(case when function_order = 1 then target_days end) target_1_days
                 , max(case when function_order = 2 then target_days end) target_2_days
                 , max(case when function_order = 3 then target_days end) target_3_days
                 , max(case when function_order = 4 then target_days end) target_4_days
                 , max(case when function_order = 5 then target_days end) target_5_days
                 , max(case when function_order = 6 then target_days end) target_6_days
                 , max(case when function_order = 7 then target_days end) target_7_days
                 , max(case when function_order = 8 then target_days end) target_8_days
                 , max(case when function_order = 9 then target_days end) target_9_days
                 , max(case when function_order = 10 then target_days end) target_10_days
              from     ioct_function_target
              where (case when to_char(sysdate,'yyyymm') = {month}
                          then trunc(sysdate) 
                          else to_date({month},'yyyymm') end)
                    between effective_from_date and effective_to_date
                    and workflow_type = {workflow}
              group by udac_group, workflow_type , db_region) ft
        join
        udac_group_name_ca ugn
        on ft.udac_group = ugn.udac_group
        join
        (select udac_group, open_sig_target, process_open_target, fulfill_bill_target, workflow_type , db_region
        from    ioct_other_target
        where (case when to_char(sysdate,'yyyymm') = {month}
                    then trunc(sysdate) 
                    else to_date({month},'yyyymm') end)
              between effective_from_date and effective_to_date
              and workflow_type = {workflow}) ot
        on ft.udac_group = ot.udac_group
        and ft.workflow_type = ot.workflow_type
        and ft.db_region = ot.db_region) c
        on a.product = c.udac_group_name
        and a.workflow_type = c.workflow_type
        and (a.db_region = c.db_region or (a.db_region = 'ALL' and c.db_region = 'EAST'))
order by b.rec_order
       , b.date_order
 	]]></statement>		
	
<!--
  used for total_volume, briefcase_time_cnt, briefcase_time_in_pct, briefcase_time_out_pct, 
  contract_approval_cnt, contract_approval_in_pct and contract_approval_out_pct 
 -->
	<statement code="IOCT_Cycle_Page_2_DD"><![CDATA[
select *
from   (select /*+ index (a ioct_cycle_time_all_2ix) parallel(a,4) */
               a.*
             , ROUND( (case when a.workflow_type = 'NEWITM' then a.LIVE_DATE  - a.SIGNATURE_DATE 
                else a.IFULFILL_END_DATE - a.IFULFILL_START_DATE  end),1) cycle_time_actual
             , row_number() over(partition by a.customer_id, a.product_code, a.product_issue_num, a.item_id, NVL(a.FEATURE_CODE,' '), a.css_product_id, a.IMV_ITEM_PROCESS_ID, a.COMPONENT_PROCESS_ID, a.WORKFLOW_TYPE
                                 order by     a.process_start_time desc) rnum
             , process_start_time min_process_start_time
             , process_end_time   max_process_end_time
        from   ioct_cycle_time_all a , ioct_other_target b
        where   a.udac_group = b.udac_group
        and 	a.workflow_type = b.workflow_type
        and 	a.db_region = b.db_region
        and 	a.change_level = b.change_level
        and     (({workflow} = 'NEWITM' and a.open_date between b.effective_from_date and b.effective_to_date) 
             or ({workflow} != 'NEWITM' and a.ifulfill_start_date between b.effective_from_date and b.effective_to_date))
        and    ( ('emptyParam') IN ({{regionCode}}) OR region IN ({{regionCode}}) )
        and    ( ({dateType} = 'Y' and rec_yyyy = {recYyyy} )
              or ({dateType} = 'M' and rec_yyyy = {recYyyy} and rec_mm = {recMm} )
              or ({dateType} = 'W' and TRUNC(REC_DATE,'D') =  TRUNC(SYSDATE-7,'D') )
               )
        and   a.udac_group_name = {udacGroupName}
        and   a.workflow_type = {workflow} 
        and EXCLUDE_INDICATOR   <> 'Y'
        and   ( {eue} = 'emptyParam' or (case when {workflow} = 'NEWITM' then a.eue_normal_ind else a.change_level end) = {eue} )
       and   ( {column} = 'total_volume'
           or   ( {column} = 'briefcase_time_cnt'
                  and ( (dep_prod_ind = 'N' and {workflow} = 'NEWITM') OR ({workflow} <> 'NEWITM') ))
           or   ( {column} = 'briefcase_time_in_pct'
                  and ( (dep_prod_ind = 'N' and {workflow} = 'NEWITM') OR ({workflow} <> 'NEWITM') )
                  and open_date - signature_date <= b.OPEN_SIG_TARGET )
           or   ( {column} = 'briefcase_time_out_pct'
                  and ( (dep_prod_ind = 'N' and {workflow} = 'NEWITM') OR ({workflow} <> 'NEWITM') )
                  and open_date - signature_date > b.OPEN_SIG_TARGET )
           or   ( {column} = 'contract_approval_cnt'
                  and ( (dep_prod_ind = 'N' and {workflow} = 'NEWITM') OR ({workflow} <> 'NEWITM') ))
           or   ( {column} = 'contract_approval_in_pct'
                  and ( (dep_prod_ind = 'N' and {workflow} = 'NEWITM') OR ({workflow} <> 'NEWITM') )
                  and process_start_time - open_date  <= B.PROCESS_OPEN_TARGET )
           or   ( {column} = 'contract_approval_out_pct'
                  and ( (dep_prod_ind = 'N' and {workflow} = 'NEWITM') OR ({workflow} <> 'NEWITM') )
                  and process_start_time - open_date  > B.PROCESS_OPEN_TARGET )
                     or   ( {column} = 'fulfill_bill_pct_in'
                  and ( (dep_prod_ind = 'N' and {workflow} = 'NEWITM') OR ({workflow} <> 'NEWITM') )
                  and live_date - process_end_time  <= B.FULFILL_BILL_TARGET )
           or   ( {column} = 'fulfill_bill_pct_out'
                  and ( (dep_prod_ind = 'N' and {workflow} = 'NEWITM') OR ({workflow} <> 'NEWITM') )
                  and live_date - process_end_time  > B.FULFILL_BILL_TARGET )
            or   ( {column} = 'fulfill_bill_cnt'
                  )
              )
       )
where rnum = 1
and (( {column} = 'fulfill_bill_cnt'
and ( (dep_prod_ind = 'N' and {workflow} = 'NEWITM') OR ({workflow} <> 'NEWITM') )
)
OR ( {column} <> 'fulfill_bill_cnt'))
        ]]></statement>


	
<!-- used for assignee group volumes -->
	<statement code="IOCT_Cycle_Page_2_DD_assignee"><![CDATA[
select *
from   (select /*+ index (a ioct_cycle_time_all_2ix) parallel(a,4) */
               a.*
             , ROUND( (case when a.workflow_type = 'NEWITM' then a.LIVE_DATE  - a.SIGNATURE_DATE 
                else a.IFULFILL_END_DATE - a.IFULFILL_START_DATE  end),1) cycle_time_actual
             , row_number() over(partition by a.customer_id, a.product_code, a.product_issue_num, a.item_id, NVL(a.FEATURE_CODE,' '), a.css_product_id, a.IMV_ITEM_PROCESS_ID, a.COMPONENT_PROCESS_ID, a.WORKFLOW_TYPE
                                 order by     a.process_start_time desc) rnum
             , process_start_time min_process_start_time
             , process_end_time   max_process_end_time
        from   ioct_cycle_time_all a, 
        (select function_order from 
                  (select  A.*, 
                   ROW_NUMBER() OVER(PARTITION BY udac_group_name
                   order by effective_from_date DESC,function_order DESC ) RNUM
                   FROM ioct_function_target a
                   where udac_group_name =  {udacGroupName}
                   and function_name = {assigneeGroup} )
        where rnum = 1) b
        where  ( (dep_prod_ind = 'N' and {workflow} = 'NEWITM') OR ({workflow} <> 'NEWITM') )  
        and EXCLUDE_INDICATOR   <> 'Y' and FUNCTION_TARGET IS NOT NULL
        and   a.workflow_type = {workflow} 
        and    ( ('emptyParam') IN ({{regionCode}}) OR region IN ({{regionCode}}) )
        and    ( ({dateType} = 'Y' and rec_yyyy = {recYyyy} )
              or ({dateType} = 'M' and rec_yyyy = {recYyyy} and rec_mm = {recMm} )
              or ({dateType} = 'W' and rec_yyyy = {recYyyy} and rec_ww = {recWw} )
               )
        and   udac_group_name = {udacGroupName}
        and   ( {eue} = 'emptyParam' or (case when {workflow} = 'NEWITM' then a.eue_normal_ind else a.change_level end) = {eue} )
        and   ( a.assignee_group_seq = b.function_order )
       )
where  rnum = 1
      ]]></statement>

	
	<statement code="IOCT_Inv_UdacGroupDetails"><![CDATA[
select   distinct i.udac_group
       , i.udac_group_name
       , i.product_type
       , i.workflow_type
       , db_region
       , ab.bucket_1_value
       , ab.bucket_2_value
       , ab.bucket_3_value
       , ab.bucket_4_value
       , ab.bucket_5_value
       , ab.high_bucket
       , function_1_name
       , function_2_name
       , function_3_name
       , function_4_name
       , function_5_name
       , function_6_name
       , function_7_name
       , function_8_name
       , function_9_name
       , function_10_name
       , target_1_days
       , target_2_days
       , target_3_days
       , target_4_days
       , target_5_days
       , target_6_days
       , target_7_days
       , target_8_days
       , target_9_days
       , target_10_days
       , open_sig_target
       , process_open_target
       , fulfill_bill_target
from     (select distinct u.udac_group, n.udac_group_name,u.udac_ind4 product_type, 'CHGFCLTR' workflow_type
            from udac_group_ca u, udac_group_name_ca n
            where u.udac_ind4 in ('C','P')
            and u.udac_group = n.udac_group
          union all
          select distinct u.udac_group, n.udac_group_name,u.udac_ind4 product_type, 'NEWITM' workflow_type
            from udac_group_ca u, udac_group_name_ca n
            where u.udac_ind4 in ('C','P')
            and u.udac_group = n.udac_group 
          union all
          select distinct u.udac_group, n.udac_group_name,u.udac_ind4 product_type, 'ESCAL' workflow_type
            from udac_group_ca u, udac_group_name_ca n
            where u.udac_ind4 in ('C','P')
            and u.udac_group = n.udac_group 
            ) i
         join ioct_inv_aging_buckets ab
           on i.udac_group = ab.udac_group
           and i.workflow_type = ab.workflow_type
         join
         (select   udac_group, workflow_type, db_region
                 , max(case when function_order = 1 then function_name end) function_1_name
                 , max(case when function_order = 2 then function_name end) function_2_name
                 , max(case when function_order = 3 then function_name end) function_3_name
                 , max(case when function_order = 4 then function_name end) function_4_name
                 , max(case when function_order = 5 then function_name end) function_5_name
                 , max(case when function_order = 6 then function_name end) function_6_name
                 , max(case when function_order = 7 then function_name end) function_7_name
                 , max(case when function_order = 8 then function_name end) function_8_name
                 , max(case when function_order = 9 then function_name end) function_9_name
                 , max(case when function_order = 10 then function_name end) function_10_name
                 , max(case when function_order = 1 then target_days end) target_1_days
                 , max(case when function_order = 2 then target_days end) target_2_days
                 , max(case when function_order = 3 then target_days end) target_3_days
                 , max(case when function_order = 4 then target_days end) target_4_days
                 , max(case when function_order = 5 then target_days end) target_5_days
                 , max(case when function_order = 6 then target_days end) target_6_days
                 , max(case when function_order = 7 then target_days end) target_7_days
                 , max(case when function_order = 8 then target_days end) target_8_days
                 , max(case when function_order = 9 then target_days end) target_9_days
                 , max(case when function_order = 10 then target_days end) target_10_days
          from     ioct_function_target
          where trunc(sysdate) between effective_from_date and effective_to_date
          group by udac_group, workflow_type, db_region
         ) ft
           on i.udac_group = ft.udac_group
           and i.workflow_type = ft.workflow_type           
    join
    (select udac_group, open_sig_target, process_open_target, fulfill_bill_target, workflow_type , change_level
    from    ioct_other_target
    where trunc(sysdate) between effective_from_date and effective_to_date) ot
    on i.udac_group = ot.udac_group
    and i.workflow_type = ot.workflow_type    
order by i.udac_group_name
 	]]></statement>
		
	<statement code="IOCT_Inv_Index"><![CDATA[
select   round(avg(priority_index),2) inventory_index
       , to_char(new_time(max((select  max(run_date)
              from    ca_process_control
              where   process_name = 'CADBIV')),'PST','EST'),'MM/DD/YYYY HH:MI AM')||' ET' run_date
from     ioct_inv_item_all
where    udac_group_name = {udacGroupName}
and      ( ('emptyParam') IN ({{regionCode}}) OR region IN ({{regionCode}}) )
 	]]></statement>
		
	<statement code="IOCT_CycleTime_Index"><![CDATA[
select   round(avg(case when db_region != 'OOR' then priority_index end), 2) cycle_time_index
from     ioct_cycle_time_all
where    udac_group_name = {udacGroupName}
and      ( ('emptyParam') IN ({{regionCode}}) OR region IN ({{regionCode}}) )
and      rec_yyyy||lpad(rec_mm,2,'0') = {month}
and      rec_type <> 'LNF'
 	]]></statement>

<!-- Inventory Page 2 Summary Grid -->


<statement code="IOCT_Inv_Page2"><![CDATA[
SELECT * FROM
(SELECT
	SOC,
	FUNCTION_TYPE,
	TOTAL_VOLUME,
	ROUND(CASE WHEN TOTAL_VOLUME > 0 THEN BRIEFCASE_AMT / TOTAL_VOLUME ELSE 0 END,1) BRIEFCASE_AGE,
	ROUND(CASE WHEN TOTAL_VOLUME > 0 THEN BRIEFCASE_IN_CNT / TOTAL_VOLUME ELSE 0 END * 100,1) BRIEFCASE_IN_PCT,
	ROUND(100 - ROUND(CASE WHEN TOTAL_VOLUME > 0 THEN BRIEFCASE_IN_CNT / TOTAL_VOLUME ELSE 0 END * 100,1),1) BRIEFCASE_OUT_PCT,
	ROUND(CASE WHEN TOTAL_VOLUME > 0 THEN CONTRACT_APPROVAL_AMT / TOTAL_VOLUME ELSE 0 END,1) CONTRACT_APPROVAL_AGE,
	ROUND(CASE WHEN TOTAL_VOLUME > 0 THEN CONTRACT_APPROVAL_IN_CNT / TOTAL_VOLUME ELSE 0 END * 100,1) CONTRACT_APPROVAL_IN_PCT,
	ROUND(100 - ROUND(CASE WHEN TOTAL_VOLUME > 0 THEN CONTRACT_APPROVAL_IN_CNT / TOTAL_VOLUME ELSE 0 END * 100,1),1) CONTRACT_APPROVAL_OUT_PCT,
	--ROUND(CASE WHEN TOTAL_VOLUME > 0 THEN INVENTORY_AMT / TOTAL_VOLUME ELSE 0 END,2) INVENTORY_INDEX,
	--TO_CHAR(NEW_TIME(RUN_DATE,'PST','EST'),'MM/DD/YYYY HH:MI AM')||' ET' RUN_DATE,
--
	FUNCTION1_NAME,
	CASE WHEN {workflow} = 'NEWITM' or FUNCTION1_CNT = 0 THEN FUNCTION1_TARGET ELSE ROUND(FUNCTION1_SUM/FUNCTION1_CNT,1) END FUNCTION1_TARGET,
	FUNCTION1_CNT,
	ROUND(CASE WHEN FUNCTION1_CNT > 0 THEN FUNCTION1_AMT / FUNCTION1_CNT ELSE 0 END,1) FUNCTION1_AGE,
	ROUND(CASE WHEN FUNCTION1_CNT > 0 THEN FUNCTION1_CNT_IN / FUNCTION1_CNT ELSE 0 END * 100,1) FUNCTION1_IN_PCT,
	ROUND(100 - ROUND(CASE WHEN FUNCTION1_CNT > 0 THEN FUNCTION1_CNT_IN / FUNCTION1_CNT ELSE 0 END * 100,1),1) FUNCTION1_OUT_PCT,
--
	FUNCTION2_NAME,
	CASE WHEN {workflow} = 'NEWITM' or FUNCTION2_CNT = 0 THEN FUNCTION2_TARGET ELSE ROUND(FUNCTION2_SUM/FUNCTION2_CNT,1) END FUNCTION2_TARGET,
	FUNCTION2_CNT,
	ROUND(CASE WHEN FUNCTION2_CNT > 0 THEN FUNCTION2_AMT / FUNCTION2_CNT ELSE 0 END,1) FUNCTION2_AGE,
	ROUND(CASE WHEN FUNCTION2_CNT > 0 THEN FUNCTION2_CNT_IN / FUNCTION2_CNT ELSE 0 END * 100,1) FUNCTION2_IN_PCT,
	ROUND(100 - ROUND(CASE WHEN FUNCTION2_CNT > 0 THEN FUNCTION2_CNT_IN / FUNCTION2_CNT ELSE 0 END * 100,1),1) FUNCTION2_OUT_PCT,
--
	FUNCTION3_NAME,
	CASE WHEN {workflow} = 'NEWITM' or FUNCTION3_CNT = 0 THEN FUNCTION3_TARGET ELSE ROUND(FUNCTION3_SUM/FUNCTION3_CNT,1) END FUNCTION3_TARGET,
	FUNCTION3_CNT,
	ROUND(CASE WHEN FUNCTION3_CNT > 0 THEN FUNCTION3_AMT / FUNCTION3_CNT ELSE 0 END,1) FUNCTION3_AGE,
	ROUND(CASE WHEN FUNCTION3_CNT > 0 THEN FUNCTION3_CNT_IN / FUNCTION3_CNT ELSE 0 END * 100,1) FUNCTION3_IN_PCT,
	ROUND(100 - ROUND(CASE WHEN FUNCTION3_CNT > 0 THEN FUNCTION3_CNT_IN / FUNCTION3_CNT ELSE 0 END * 100,1),1) FUNCTION3_OUT_PCT,
--
	FUNCTION4_NAME,
	CASE WHEN {workflow} = 'NEWITM' or FUNCTION4_CNT = 0 THEN FUNCTION4_TARGET ELSE ROUND(FUNCTION4_SUM/FUNCTION4_CNT,1) END FUNCTION4_TARGET,
	FUNCTION4_CNT,
	ROUND(CASE WHEN FUNCTION4_CNT > 0 THEN FUNCTION4_AMT / FUNCTION4_CNT ELSE 0 END,1) FUNCTION4_AGE,
	ROUND(CASE WHEN FUNCTION4_CNT > 0 THEN FUNCTION4_CNT_IN / FUNCTION4_CNT ELSE 0 END * 100,1) FUNCTION4_IN_PCT,
	ROUND(100 - ROUND(CASE WHEN FUNCTION4_CNT > 0 THEN FUNCTION4_CNT_IN / FUNCTION4_CNT ELSE 0 END * 100,1),1) FUNCTION4_OUT_PCT,
--
	FUNCTION5_NAME,
	CASE WHEN {workflow} = 'NEWITM' or FUNCTION5_CNT = 0 THEN FUNCTION5_TARGET ELSE ROUND(FUNCTION5_SUM/FUNCTION5_CNT,1) END FUNCTION5_TARGET,
	FUNCTION5_CNT,
	ROUND(CASE WHEN FUNCTION5_CNT > 0 THEN FUNCTION5_AMT / FUNCTION5_CNT ELSE 0 END,1) FUNCTION5_AGE,
	ROUND(CASE WHEN FUNCTION5_CNT > 0 THEN FUNCTION5_CNT_IN / FUNCTION5_CNT ELSE 0 END * 100,1) FUNCTION5_IN_PCT,
	ROUND(100 - ROUND(CASE WHEN FUNCTION5_CNT > 0 THEN FUNCTION5_CNT_IN / FUNCTION5_CNT ELSE 0 END * 100,1),1) FUNCTION5_OUT_PCT,
--
	FUNCTION6_NAME,
	CASE WHEN {workflow} = 'NEWITM' or FUNCTION6_CNT = 0 THEN FUNCTION6_TARGET ELSE ROUND(FUNCTION6_SUM/FUNCTION6_CNT,1) END FUNCTION6_TARGET,
	FUNCTION6_CNT,
	ROUND(CASE WHEN FUNCTION6_CNT > 0 THEN FUNCTION6_AMT / FUNCTION6_CNT ELSE 0 END,1) FUNCTION6_AGE,
	ROUND(CASE WHEN FUNCTION6_CNT > 0 THEN FUNCTION6_CNT_IN / FUNCTION6_CNT ELSE 0 END * 100,1) FUNCTION6_IN_PCT,
	ROUND(100 - ROUND(CASE WHEN FUNCTION6_CNT > 0 THEN FUNCTION6_CNT_IN / FUNCTION6_CNT ELSE 0 END * 100,1),1) FUNCTION6_OUT_PCT,
--
	FUNCTION7_NAME,
	CASE WHEN {workflow} = 'NEWITM' or FUNCTION7_CNT = 0 THEN FUNCTION7_TARGET ELSE ROUND(FUNCTION7_SUM/FUNCTION7_CNT,1) END FUNCTION7_TARGET,
	FUNCTION7_CNT,
	ROUND(CASE WHEN FUNCTION7_CNT > 0 THEN FUNCTION7_AMT / FUNCTION7_CNT ELSE 0 END,1) FUNCTION7_AGE,
	ROUND(CASE WHEN FUNCTION7_CNT > 0 THEN FUNCTION7_CNT_IN / FUNCTION7_CNT ELSE 0 END * 100,1) FUNCTION7_IN_PCT,
	ROUND(100 - ROUND(CASE WHEN FUNCTION7_CNT > 0 THEN FUNCTION7_CNT_IN / FUNCTION7_CNT ELSE 0 END * 100,1),1) FUNCTION7_OUT_PCT,
--
	FUNCTION8_NAME,
	CASE WHEN {workflow} = 'NEWITM' or FUNCTION8_CNT = 0 THEN FUNCTION8_TARGET ELSE ROUND(FUNCTION8_SUM/FUNCTION8_CNT,1) END FUNCTION8_TARGET,
	FUNCTION8_CNT,
	ROUND(CASE WHEN FUNCTION8_CNT > 0 THEN FUNCTION8_AMT / FUNCTION8_CNT ELSE 0 END,1) FUNCTION8_AGE,
	ROUND(CASE WHEN FUNCTION8_CNT > 0 THEN FUNCTION8_CNT_IN / FUNCTION8_CNT ELSE 0 END * 100,1) FUNCTION8_IN_PCT,
	ROUND(100 - ROUND(CASE WHEN FUNCTION8_CNT > 0 THEN FUNCTION8_CNT_IN / FUNCTION8_CNT ELSE 0 END * 100,1),1) FUNCTION8_OUT_PCT,
--
	FUNCTION9_NAME,
	CASE WHEN {workflow} = 'NEWITM' or FUNCTION9_CNT = 0 THEN FUNCTION9_TARGET ELSE ROUND(FUNCTION9_SUM/FUNCTION9_CNT,1) END FUNCTION9_TARGET,
	FUNCTION9_CNT,
	ROUND(CASE WHEN FUNCTION9_CNT > 0 THEN FUNCTION9_AMT / FUNCTION9_CNT ELSE 0 END,1) FUNCTION9_AGE,
	ROUND(CASE WHEN FUNCTION9_CNT > 0 THEN FUNCTION9_CNT_IN / FUNCTION9_CNT ELSE 0 END * 100,1) FUNCTION9_IN_PCT,
	ROUND(100 - ROUND(CASE WHEN FUNCTION9_CNT > 0 THEN FUNCTION9_CNT_IN / FUNCTION9_CNT ELSE 0 END * 100,1),1) FUNCTION9_OUT_PCT,
--
	FUNCTION10_NAME,
	CASE WHEN {workflow} = 'NEWITM' or FUNCTION10_CNT = 0 THEN FUNCTION10_TARGET ELSE ROUND(FUNCTION10_SUM/FUNCTION10_CNT,1) END FUNCTION10_TARGET,
	FUNCTION10_CNT,
	ROUND(CASE WHEN FUNCTION10_CNT > 0 THEN FUNCTION10_AMT / FUNCTION10_CNT ELSE 0 END,1) FUNCTION10_AGE,
	ROUND(CASE WHEN FUNCTION10_CNT > 0 THEN FUNCTION10_CNT_IN / FUNCTION10_CNT ELSE 0 END * 100,1) FUNCTION10_IN_PCT,
	ROUND(100 - ROUND(CASE WHEN FUNCTION10_CNT > 0 THEN FUNCTION10_CNT_IN / FUNCTION10_CNT ELSE 0 END * 100,1),1) FUNCTION10_OUT_PCT
--
FROM
(SELECT
	II.UDAC_GROUP_NAME SOC,
	'Total' FUNCTION_TYPE,
	COUNT(*) TOTAL_VOLUME,
	SUM(II.OPEN_SIG) BRIEFCASE_AMT,
	SUM(CASE WHEN II.OPEN_SIG <= II.OPEN_SIG_TARGET THEN 1 ELSE 0 END) BRIEFCASE_IN_CNT,
	SUM(II.KEY_OPEN) CONTRACT_APPROVAL_AMT,
	SUM(CASE WHEN II.KEY_OPEN <= II.PROCESS_OPEN_TARGET THEN 1 ELSE 0 END) CONTRACT_APPROVAL_IN_CNT,
	--SUM(II.PRIORITY_INDEX) INVENTORY_AMT,
	--MAX(PC.RUN_DATE) RUN_DATE,
--
	SUM(CASE WHEN II.ASSIGNEE_GROUP_SEQ = 1 THEN 1 ELSE 0 END) FUNCTION1_CNT,
	SUM(CASE WHEN II.ASSIGNEE_GROUP_SEQ = 1 AND {agingBucketType} = 'SigDate'  THEN II.SIG_AGE
		 WHEN II.ASSIGNEE_GROUP_SEQ = 1 AND {agingBucketType} = 'OpenDate' THEN II.OPEN_AGE
		 WHEN II.ASSIGNEE_GROUP_SEQ = 1 AND {agingBucketType} = 'EfsDate'  THEN II.EFS_AGE
		 WHEN II.ASSIGNEE_GROUP_SEQ = 1                                    THEN II.FUNCTION_AGE
									       ELSE 0 END) FUNCTION1_AMT,
	SUM(CASE WHEN II.ASSIGNEE_GROUP_SEQ = 1 AND {agingBucketType} = 'SigDate'  AND II.SIG_AGE      < II.FUNCTION_TARGET THEN 1
		 WHEN II.ASSIGNEE_GROUP_SEQ = 1 AND {agingBucketType} = 'OpenDate' AND II.OPEN_AGE     < II.FUNCTION_TARGET THEN 1
		 WHEN II.ASSIGNEE_GROUP_SEQ = 1 AND {agingBucketType} = 'EfsDate'  AND II.EFS_AGE      < II.FUNCTION_TARGET THEN 1
		 WHEN II.ASSIGNEE_GROUP_SEQ = 1                                    AND II.FUNCTION_AGE < II.FUNCTION_TARGET THEN 1
									       ELSE 0 END) FUNCTION1_CNT_IN,
	MAX(CASE WHEN II.ASSIGNEE_GROUP_SEQ = 1 THEN II.FUNCTION_TARGET ELSE 0 END) FUNCTION1_TARGET,
	SUM(CASE WHEN II.ASSIGNEE_GROUP_SEQ = 1 THEN II.FUNCTION_TARGET ELSE 0 END) FUNCTION1_SUM,
	MAX(CASE WHEN II.ASSIGNEE_GROUP_SEQ = 1 THEN II.ASSIGNEE_GROUP ELSE '' END) FUNCTION1_NAME,
--
	SUM(CASE WHEN II.ASSIGNEE_GROUP_SEQ = 2 THEN 1 ELSE 0 END) FUNCTION2_CNT,
	SUM(CASE WHEN II.ASSIGNEE_GROUP_SEQ = 2 AND {agingBucketType} = 'SigDate'  THEN II.SIG_AGE
		 WHEN II.ASSIGNEE_GROUP_SEQ = 2 AND {agingBucketType} = 'OpenDate' THEN II.OPEN_AGE
		 WHEN II.ASSIGNEE_GROUP_SEQ = 2 AND {agingBucketType} = 'EfsDate'  THEN II.EFS_AGE
		 WHEN II.ASSIGNEE_GROUP_SEQ = 2                                    THEN II.FUNCTION_AGE
									       ELSE 0 END) FUNCTION2_AMT,
	SUM(CASE WHEN II.ASSIGNEE_GROUP_SEQ = 2 AND {agingBucketType} = 'SigDate'  AND II.SIG_AGE      < II.FUNCTION_TARGET THEN 1
		 WHEN II.ASSIGNEE_GROUP_SEQ = 2 AND {agingBucketType} = 'OpenDate' AND II.OPEN_AGE     < II.FUNCTION_TARGET THEN 1
		 WHEN II.ASSIGNEE_GROUP_SEQ = 2 AND {agingBucketType} = 'EfsDate'  AND II.EFS_AGE      < II.FUNCTION_TARGET THEN 1
		 WHEN II.ASSIGNEE_GROUP_SEQ = 2                                    AND II.FUNCTION_AGE < II.FUNCTION_TARGET THEN 1
									       ELSE 0 END) FUNCTION2_CNT_IN,
	MAX(CASE WHEN II.ASSIGNEE_GROUP_SEQ = 2 THEN II.FUNCTION_TARGET ELSE 0 END) FUNCTION2_TARGET,
	SUM(CASE WHEN II.ASSIGNEE_GROUP_SEQ = 2 THEN II.FUNCTION_TARGET ELSE 0 END) FUNCTION2_SUM,
	MAX(CASE WHEN II.ASSIGNEE_GROUP_SEQ = 2 THEN II.ASSIGNEE_GROUP ELSE '' END) FUNCTION2_NAME,
--
	SUM(CASE WHEN II.ASSIGNEE_GROUP_SEQ = 3 THEN 1 ELSE 0 END) FUNCTION3_CNT,
	SUM(CASE WHEN II.ASSIGNEE_GROUP_SEQ = 3 AND {agingBucketType} = 'SigDate'  THEN II.SIG_AGE
		 WHEN II.ASSIGNEE_GROUP_SEQ = 3 AND {agingBucketType} = 'OpenDate' THEN II.OPEN_AGE
		 WHEN II.ASSIGNEE_GROUP_SEQ = 3 AND {agingBucketType} = 'EfsDate'  THEN II.EFS_AGE
		 WHEN II.ASSIGNEE_GROUP_SEQ = 3                                    THEN II.FUNCTION_AGE
									       ELSE 0 END) FUNCTION3_AMT,
	SUM(CASE WHEN II.ASSIGNEE_GROUP_SEQ = 3 AND {agingBucketType} = 'SigDate'  AND II.SIG_AGE      < II.FUNCTION_TARGET THEN 1
		 WHEN II.ASSIGNEE_GROUP_SEQ = 3 AND {agingBucketType} = 'OpenDate' AND II.OPEN_AGE     < II.FUNCTION_TARGET THEN 1
		 WHEN II.ASSIGNEE_GROUP_SEQ = 3 AND {agingBucketType} = 'EfsDate'  AND II.EFS_AGE      < II.FUNCTION_TARGET THEN 1
		 WHEN II.ASSIGNEE_GROUP_SEQ = 3                                    AND II.FUNCTION_AGE < II.FUNCTION_TARGET THEN 1
									       ELSE 0 END) FUNCTION3_CNT_IN,
	MAX(CASE WHEN II.ASSIGNEE_GROUP_SEQ = 3 THEN II.FUNCTION_TARGET ELSE 0 END) FUNCTION3_TARGET,
	SUM(CASE WHEN II.ASSIGNEE_GROUP_SEQ = 3 THEN II.FUNCTION_TARGET ELSE 0 END) FUNCTION3_SUM,
	MAX(CASE WHEN II.ASSIGNEE_GROUP_SEQ = 3 THEN II.ASSIGNEE_GROUP ELSE '' END) FUNCTION3_NAME,
--
	SUM(CASE WHEN II.ASSIGNEE_GROUP_SEQ = 4 THEN 1 ELSE 0 END) FUNCTION4_CNT,
	SUM(CASE WHEN II.ASSIGNEE_GROUP_SEQ = 4 AND {agingBucketType} = 'SigDate'  THEN II.SIG_AGE
		 WHEN II.ASSIGNEE_GROUP_SEQ = 4 AND {agingBucketType} = 'OpenDate' THEN II.OPEN_AGE
		 WHEN II.ASSIGNEE_GROUP_SEQ = 4 AND {agingBucketType} = 'EfsDate'  THEN II.EFS_AGE
		 WHEN II.ASSIGNEE_GROUP_SEQ = 4                                    THEN II.FUNCTION_AGE
									       ELSE 0 END) FUNCTION4_AMT,
	SUM(CASE WHEN II.ASSIGNEE_GROUP_SEQ = 4 AND {agingBucketType} = 'SigDate'  AND II.SIG_AGE      < II.FUNCTION_TARGET THEN 1
		 WHEN II.ASSIGNEE_GROUP_SEQ = 4 AND {agingBucketType} = 'OpenDate' AND II.OPEN_AGE     < II.FUNCTION_TARGET THEN 1
		 WHEN II.ASSIGNEE_GROUP_SEQ = 4 AND {agingBucketType} = 'EfsDate'  AND II.EFS_AGE      < II.FUNCTION_TARGET THEN 1
		 WHEN II.ASSIGNEE_GROUP_SEQ = 4                                    AND II.FUNCTION_AGE < II.FUNCTION_TARGET THEN 1
									       ELSE 0 END) FUNCTION4_CNT_IN,
	MAX(CASE WHEN II.ASSIGNEE_GROUP_SEQ = 4 THEN II.FUNCTION_TARGET ELSE 0 END) FUNCTION4_TARGET,
	SUM(CASE WHEN II.ASSIGNEE_GROUP_SEQ = 4 THEN II.FUNCTION_TARGET ELSE 0 END) FUNCTION4_SUM,
	MAX(CASE WHEN II.ASSIGNEE_GROUP_SEQ = 4 THEN II.ASSIGNEE_GROUP ELSE '' END) FUNCTION4_NAME,
--
	SUM(CASE WHEN II.ASSIGNEE_GROUP_SEQ = 5 THEN 1 ELSE 0 END) FUNCTION5_CNT,
	SUM(CASE WHEN II.ASSIGNEE_GROUP_SEQ = 5 AND {agingBucketType} = 'SigDate'  THEN II.SIG_AGE
		 WHEN II.ASSIGNEE_GROUP_SEQ = 5 AND {agingBucketType} = 'OpenDate' THEN II.OPEN_AGE
		 WHEN II.ASSIGNEE_GROUP_SEQ = 5 AND {agingBucketType} = 'EfsDate'  THEN II.EFS_AGE
		 WHEN II.ASSIGNEE_GROUP_SEQ = 5                                    THEN II.FUNCTION_AGE
									       ELSE 0 END) FUNCTION5_AMT,
	SUM(CASE WHEN II.ASSIGNEE_GROUP_SEQ = 5 AND {agingBucketType} = 'SigDate'  AND II.SIG_AGE      < II.FUNCTION_TARGET THEN 1
		 WHEN II.ASSIGNEE_GROUP_SEQ = 5 AND {agingBucketType} = 'OpenDate' AND II.OPEN_AGE     < II.FUNCTION_TARGET THEN 1
		 WHEN II.ASSIGNEE_GROUP_SEQ = 5 AND {agingBucketType} = 'EfsDate'  AND II.EFS_AGE      < II.FUNCTION_TARGET THEN 1
		 WHEN II.ASSIGNEE_GROUP_SEQ = 5                                    AND II.FUNCTION_AGE < II.FUNCTION_TARGET THEN 1
									       ELSE 0 END) FUNCTION5_CNT_IN,
	MAX(CASE WHEN II.ASSIGNEE_GROUP_SEQ = 5 THEN II.FUNCTION_TARGET ELSE 0 END) FUNCTION5_TARGET,
	SUM(CASE WHEN II.ASSIGNEE_GROUP_SEQ = 5 THEN II.FUNCTION_TARGET ELSE 0 END) FUNCTION5_SUM,
	MAX(CASE WHEN II.ASSIGNEE_GROUP_SEQ = 5 THEN II.ASSIGNEE_GROUP ELSE '' END) FUNCTION5_NAME,
--
	SUM(CASE WHEN II.ASSIGNEE_GROUP_SEQ = 6 THEN 1 ELSE 0 END) FUNCTION6_CNT,
	SUM(CASE WHEN II.ASSIGNEE_GROUP_SEQ = 6 AND {agingBucketType} = 'SigDate'  THEN II.SIG_AGE
		 WHEN II.ASSIGNEE_GROUP_SEQ = 6 AND {agingBucketType} = 'OpenDate' THEN II.OPEN_AGE
		 WHEN II.ASSIGNEE_GROUP_SEQ = 6 AND {agingBucketType} = 'EfsDate'  THEN II.EFS_AGE
		 WHEN II.ASSIGNEE_GROUP_SEQ = 6                                    THEN II.FUNCTION_AGE
									       ELSE 0 END) FUNCTION6_AMT,
	SUM(CASE WHEN II.ASSIGNEE_GROUP_SEQ = 6 AND {agingBucketType} = 'SigDate'  AND II.SIG_AGE      < II.FUNCTION_TARGET THEN 1
		 WHEN II.ASSIGNEE_GROUP_SEQ = 6 AND {agingBucketType} = 'OpenDate' AND II.OPEN_AGE     < II.FUNCTION_TARGET THEN 1
		 WHEN II.ASSIGNEE_GROUP_SEQ = 6 AND {agingBucketType} = 'EfsDate'  AND II.EFS_AGE      < II.FUNCTION_TARGET THEN 1
		 WHEN II.ASSIGNEE_GROUP_SEQ = 6                                    AND II.FUNCTION_AGE < II.FUNCTION_TARGET THEN 1
									       ELSE 0 END) FUNCTION6_CNT_IN,
	MAX(CASE WHEN II.ASSIGNEE_GROUP_SEQ = 6 THEN II.FUNCTION_TARGET ELSE 0 END) FUNCTION6_TARGET,
	SUM(CASE WHEN II.ASSIGNEE_GROUP_SEQ = 6 THEN II.FUNCTION_TARGET ELSE 0 END) FUNCTION6_SUM,
	MAX(CASE WHEN II.ASSIGNEE_GROUP_SEQ = 6 THEN II.ASSIGNEE_GROUP ELSE '' END) FUNCTION6_NAME,
--
	SUM(CASE WHEN II.ASSIGNEE_GROUP_SEQ = 7 THEN 1 ELSE 0 END) FUNCTION7_CNT,
	SUM(CASE WHEN II.ASSIGNEE_GROUP_SEQ = 7 AND {agingBucketType} = 'SigDate'  THEN II.SIG_AGE
		 WHEN II.ASSIGNEE_GROUP_SEQ = 7 AND {agingBucketType} = 'OpenDate' THEN II.OPEN_AGE
		 WHEN II.ASSIGNEE_GROUP_SEQ = 7 AND {agingBucketType} = 'EfsDate'  THEN II.EFS_AGE
		 WHEN II.ASSIGNEE_GROUP_SEQ = 7                                    THEN II.FUNCTION_AGE
									       ELSE 0 END) FUNCTION7_AMT,
	SUM(CASE WHEN II.ASSIGNEE_GROUP_SEQ = 7 AND {agingBucketType} = 'SigDate'  AND II.SIG_AGE      < II.FUNCTION_TARGET THEN 1
		 WHEN II.ASSIGNEE_GROUP_SEQ = 7 AND {agingBucketType} = 'OpenDate' AND II.OPEN_AGE     < II.FUNCTION_TARGET THEN 1
		 WHEN II.ASSIGNEE_GROUP_SEQ = 7 AND {agingBucketType} = 'EfsDate'  AND II.EFS_AGE      < II.FUNCTION_TARGET THEN 1
		 WHEN II.ASSIGNEE_GROUP_SEQ = 7                                    AND II.FUNCTION_AGE < II.FUNCTION_TARGET THEN 1
									       ELSE 0 END) FUNCTION7_CNT_IN,
	MAX(CASE WHEN II.ASSIGNEE_GROUP_SEQ = 7 THEN II.FUNCTION_TARGET ELSE 0 END) FUNCTION7_TARGET,
	SUM(CASE WHEN II.ASSIGNEE_GROUP_SEQ = 7 THEN II.FUNCTION_TARGET ELSE 0 END) FUNCTION7_SUM,
	MAX(CASE WHEN II.ASSIGNEE_GROUP_SEQ = 7 THEN II.ASSIGNEE_GROUP ELSE '' END) FUNCTION7_NAME,
--
	SUM(CASE WHEN II.ASSIGNEE_GROUP_SEQ = 8 THEN 1 ELSE 0 END) FUNCTION8_CNT,
	SUM(CASE WHEN II.ASSIGNEE_GROUP_SEQ = 8 AND {agingBucketType} = 'SigDate'  THEN II.SIG_AGE
		 WHEN II.ASSIGNEE_GROUP_SEQ = 8 AND {agingBucketType} = 'OpenDate' THEN II.OPEN_AGE
		 WHEN II.ASSIGNEE_GROUP_SEQ = 8 AND {agingBucketType} = 'EfsDate'  THEN II.EFS_AGE
		 WHEN II.ASSIGNEE_GROUP_SEQ = 8                                    THEN II.FUNCTION_AGE
									       ELSE 0 END) FUNCTION8_AMT,
	SUM(CASE WHEN II.ASSIGNEE_GROUP_SEQ = 8 AND {agingBucketType} = 'SigDate'  AND II.SIG_AGE      < II.FUNCTION_TARGET THEN 1
		 WHEN II.ASSIGNEE_GROUP_SEQ = 8 AND {agingBucketType} = 'OpenDate' AND II.OPEN_AGE     < II.FUNCTION_TARGET THEN 1
		 WHEN II.ASSIGNEE_GROUP_SEQ = 8 AND {agingBucketType} = 'EfsDate'  AND II.EFS_AGE      < II.FUNCTION_TARGET THEN 1
		 WHEN II.ASSIGNEE_GROUP_SEQ = 8                                    AND II.FUNCTION_AGE < II.FUNCTION_TARGET THEN 1
									       ELSE 0 END) FUNCTION8_CNT_IN,
	MAX(CASE WHEN II.ASSIGNEE_GROUP_SEQ = 8 THEN II.FUNCTION_TARGET ELSE 0 END) FUNCTION8_TARGET,
	SUM(CASE WHEN II.ASSIGNEE_GROUP_SEQ = 8 THEN II.FUNCTION_TARGET ELSE 0 END) FUNCTION8_SUM,
	MAX(CASE WHEN II.ASSIGNEE_GROUP_SEQ = 8 THEN II.ASSIGNEE_GROUP ELSE '' END) FUNCTION8_NAME,
--
	SUM(CASE WHEN II.ASSIGNEE_GROUP_SEQ = 9 THEN 1 ELSE 0 END) FUNCTION9_CNT,
	SUM(CASE WHEN II.ASSIGNEE_GROUP_SEQ = 9 AND {agingBucketType} = 'SigDate'  THEN II.SIG_AGE
		 WHEN II.ASSIGNEE_GROUP_SEQ = 9 AND {agingBucketType} = 'OpenDate' THEN II.OPEN_AGE
		 WHEN II.ASSIGNEE_GROUP_SEQ = 9 AND {agingBucketType} = 'EfsDate'  THEN II.EFS_AGE
		 WHEN II.ASSIGNEE_GROUP_SEQ = 9                                    THEN II.FUNCTION_AGE
									       ELSE 0 END) FUNCTION9_AMT,
	SUM(CASE WHEN II.ASSIGNEE_GROUP_SEQ = 9 AND {agingBucketType} = 'SigDate'  AND II.SIG_AGE      < II.FUNCTION_TARGET THEN 1
		 WHEN II.ASSIGNEE_GROUP_SEQ = 9 AND {agingBucketType} = 'OpenDate' AND II.OPEN_AGE     < II.FUNCTION_TARGET THEN 1
		 WHEN II.ASSIGNEE_GROUP_SEQ = 9 AND {agingBucketType} = 'EfsDate'  AND II.EFS_AGE      < II.FUNCTION_TARGET THEN 1
		 WHEN II.ASSIGNEE_GROUP_SEQ = 9                                    AND II.FUNCTION_AGE < II.FUNCTION_TARGET THEN 1
									       ELSE 0 END) FUNCTION9_CNT_IN,
	MAX(CASE WHEN II.ASSIGNEE_GROUP_SEQ = 9 THEN II.FUNCTION_TARGET ELSE 0 END) FUNCTION9_TARGET,
	SUM(CASE WHEN II.ASSIGNEE_GROUP_SEQ = 9 THEN II.FUNCTION_TARGET ELSE 0 END) FUNCTION9_SUM,
	MAX(CASE WHEN II.ASSIGNEE_GROUP_SEQ = 9 THEN II.ASSIGNEE_GROUP ELSE '' END) FUNCTION9_NAME,
--
	SUM(CASE WHEN II.ASSIGNEE_GROUP_SEQ = 10 THEN 1 ELSE 0 END) FUNCTION10_CNT,
	SUM(CASE WHEN II.ASSIGNEE_GROUP_SEQ = 10 AND {agingBucketType} = 'SigDate'  THEN II.SIG_AGE
		 WHEN II.ASSIGNEE_GROUP_SEQ = 10 AND {agingBucketType} = 'OpenDate' THEN II.OPEN_AGE
		 WHEN II.ASSIGNEE_GROUP_SEQ = 10 AND {agingBucketType} = 'EfsDate'  THEN II.EFS_AGE
		 WHEN II.ASSIGNEE_GROUP_SEQ = 10                                    THEN II.FUNCTION_AGE
									       ELSE 0 END) FUNCTION10_AMT,
	SUM(CASE WHEN II.ASSIGNEE_GROUP_SEQ = 10 AND {agingBucketType} = 'SigDate'  AND II.SIG_AGE      < II.FUNCTION_TARGET THEN 1
		 WHEN II.ASSIGNEE_GROUP_SEQ = 10 AND {agingBucketType} = 'OpenDate' AND II.OPEN_AGE     < II.FUNCTION_TARGET THEN 1
		 WHEN II.ASSIGNEE_GROUP_SEQ = 10 AND {agingBucketType} = 'EfsDate'  AND II.EFS_AGE      < II.FUNCTION_TARGET THEN 1
		 WHEN II.ASSIGNEE_GROUP_SEQ = 10                                    AND II.FUNCTION_AGE < II.FUNCTION_TARGET THEN 1
									       ELSE 0 END) FUNCTION10_CNT_IN,
	MAX(CASE WHEN II.ASSIGNEE_GROUP_SEQ = 10 THEN II.FUNCTION_TARGET ELSE 0 END) FUNCTION10_TARGET,
	SUM(CASE WHEN II.ASSIGNEE_GROUP_SEQ = 10 THEN II.FUNCTION_TARGET ELSE 0 END) FUNCTION10_SUM,
	MAX(CASE WHEN II.ASSIGNEE_GROUP_SEQ = 10 THEN II.ASSIGNEE_GROUP ELSE '' END) FUNCTION10_NAME
--
FROM
	IOCT_INV_ITEM_ALL    II
	--(SELECT  MAX(RUN_DATE) RUN_DATE
		--FROM CA_PROCESS_CONTROL
		--WHERE PROCESS_NAME = 'CADBIV') PC
WHERE   II.UDAC_GROUP_NAME		= {udacGroupName}
AND     II.WORKFLOW_TYPE                = {workflow}
AND	(('emptyParam') 		IN ({{regionCode}})
OR 	II.REGION			IN ({{regionCode}}))
GROUP BY 
	II.UDAC_GROUP_NAME)
UNION ALL
SELECT
	SOC,
	FUNCTION_TYPE,
	TOTAL_VOLUME,
	ROUND(CASE WHEN TOTAL_VOLUME > 0 THEN BRIEFCASE_AMT / TOTAL_VOLUME ELSE 0 END,1) BRIEFCASE_AGE,
	ROUND(CASE WHEN TOTAL_VOLUME > 0 THEN BRIEFCASE_IN_CNT / TOTAL_VOLUME ELSE 0 END * 100,1) BRIEFCASE_IN_PCT,
	ROUND(100 - ROUND(CASE WHEN TOTAL_VOLUME > 0 THEN BRIEFCASE_IN_CNT / TOTAL_VOLUME ELSE 0 END * 100,1),1) BRIEFCASE_OUT_PCT,
	ROUND(CASE WHEN TOTAL_VOLUME > 0 THEN CONTRACT_APPROVAL_AMT / TOTAL_VOLUME ELSE 0 END,1) CONTRACT_APPROVAL_AGE,
	ROUND(CASE WHEN TOTAL_VOLUME > 0 THEN CONTRACT_APPROVAL_IN_CNT / TOTAL_VOLUME ELSE 0 END * 100,1) CONTRACT_APPROVAL_IN_PCT,
	ROUND(100 - ROUND(CASE WHEN TOTAL_VOLUME > 0 THEN CONTRACT_APPROVAL_IN_CNT / TOTAL_VOLUME ELSE 0 END * 100,1),1) CONTRACT_APPROVAL_OUT_PCT,
	--ROUND(CASE WHEN TOTAL_VOLUME > 0 THEN INVENTORY_AMT / TOTAL_VOLUME ELSE 0 END,2) INVENTORY_INDEX,
	--TO_CHAR(NEW_TIME(RUN_DATE,'PST','EST'),'MM/DD/YYYY HH:MI AM')||' ET' RUN_DATE,
--
	FUNCTION1_NAME,
	FUNCTION1_TARGET,
	FUNCTION1_CNT,
	ROUND(CASE WHEN FUNCTION1_CNT > 0 THEN FUNCTION1_AMT / FUNCTION1_CNT ELSE 0 END,1) FUNCTION1_AGE,
	ROUND(CASE WHEN FUNCTION1_CNT > 0 THEN FUNCTION1_CNT_IN / FUNCTION1_CNT ELSE 0 END * 100,1) FUNCTION1_IN_PCT,
	ROUND(100 - ROUND(CASE WHEN FUNCTION1_CNT > 0 THEN FUNCTION1_CNT_IN / FUNCTION1_CNT ELSE 0 END * 100,1),1) FUNCTION1_OUT_PCT,
--
	FUNCTION2_NAME,
	FUNCTION2_TARGET,
	FUNCTION2_CNT,
	ROUND(CASE WHEN FUNCTION2_CNT > 0 THEN FUNCTION2_AMT / FUNCTION2_CNT ELSE 0 END,1) FUNCTION2_AGE,
	ROUND(CASE WHEN FUNCTION2_CNT > 0 THEN FUNCTION2_CNT_IN / FUNCTION2_CNT ELSE 0 END * 100,1) FUNCTION2_IN_PCT,
	ROUND(100 - ROUND(CASE WHEN FUNCTION2_CNT > 0 THEN FUNCTION2_CNT_IN / FUNCTION2_CNT ELSE 0 END * 100,1),1) FUNCTION2_OUT_PCT,
--
	FUNCTION3_NAME,
	FUNCTION3_TARGET,
	FUNCTION3_CNT,
	ROUND(CASE WHEN FUNCTION3_CNT > 0 THEN FUNCTION3_AMT / FUNCTION3_CNT ELSE 0 END,1) FUNCTION3_AGE,
	ROUND(CASE WHEN FUNCTION3_CNT > 0 THEN FUNCTION3_CNT_IN / FUNCTION3_CNT ELSE 0 END * 100,1) FUNCTION3_IN_PCT,
	ROUND(100 - ROUND(CASE WHEN FUNCTION3_CNT > 0 THEN FUNCTION3_CNT_IN / FUNCTION3_CNT ELSE 0 END * 100,1),1) FUNCTION3_OUT_PCT,
--
	FUNCTION4_NAME,
	FUNCTION4_TARGET,
	FUNCTION4_CNT,
	ROUND(CASE WHEN FUNCTION4_CNT > 0 THEN FUNCTION4_AMT / FUNCTION4_CNT ELSE 0 END,1) FUNCTION4_AGE,
	ROUND(CASE WHEN FUNCTION4_CNT > 0 THEN FUNCTION4_CNT_IN / FUNCTION4_CNT ELSE 0 END * 100,1) FUNCTION4_IN_PCT,
	ROUND(100 - ROUND(CASE WHEN FUNCTION4_CNT > 0 THEN FUNCTION4_CNT_IN / FUNCTION4_CNT ELSE 0 END * 100,1),1) FUNCTION4_OUT_PCT,
--
	FUNCTION5_NAME,
	FUNCTION5_TARGET,
	FUNCTION5_CNT,
	ROUND(CASE WHEN FUNCTION5_CNT > 0 THEN FUNCTION5_AMT / FUNCTION5_CNT ELSE 0 END,1) FUNCTION5_AGE,
	ROUND(CASE WHEN FUNCTION5_CNT > 0 THEN FUNCTION5_CNT_IN / FUNCTION5_CNT ELSE 0 END * 100,1) FUNCTION5_IN_PCT,
	ROUND(100 - ROUND(CASE WHEN FUNCTION5_CNT > 0 THEN FUNCTION5_CNT_IN / FUNCTION5_CNT ELSE 0 END * 100,1),1) FUNCTION5_OUT_PCT,
--
	FUNCTION6_NAME,
	FUNCTION6_TARGET,
	FUNCTION6_CNT,
	ROUND(CASE WHEN FUNCTION6_CNT > 0 THEN FUNCTION6_AMT / FUNCTION6_CNT ELSE 0 END,1) FUNCTION6_AGE,
	ROUND(CASE WHEN FUNCTION6_CNT > 0 THEN FUNCTION6_CNT_IN / FUNCTION6_CNT ELSE 0 END * 100,1) FUNCTION6_IN_PCT,
	ROUND(100 - ROUND(CASE WHEN FUNCTION6_CNT > 0 THEN FUNCTION6_CNT_IN / FUNCTION6_CNT ELSE 0 END * 100,1),1) FUNCTION6_OUT_PCT,
--
	FUNCTION7_NAME,
	FUNCTION7_TARGET,
	FUNCTION7_CNT,
	ROUND(CASE WHEN FUNCTION7_CNT > 0 THEN FUNCTION7_AMT / FUNCTION7_CNT ELSE 0 END,1) FUNCTION7_AGE,
	ROUND(CASE WHEN FUNCTION7_CNT > 0 THEN FUNCTION7_CNT_IN / FUNCTION7_CNT ELSE 0 END * 100,1) FUNCTION7_IN_PCT,
	ROUND(100 - ROUND(CASE WHEN FUNCTION7_CNT > 0 THEN FUNCTION7_CNT_IN / FUNCTION7_CNT ELSE 0 END * 100,1),1) FUNCTION7_OUT_PCT,
--
	FUNCTION8_NAME,
	FUNCTION8_TARGET,
	FUNCTION8_CNT,
	ROUND(CASE WHEN FUNCTION8_CNT > 0 THEN FUNCTION8_AMT / FUNCTION8_CNT ELSE 0 END,1) FUNCTION8_AGE,
	ROUND(CASE WHEN FUNCTION8_CNT > 0 THEN FUNCTION8_CNT_IN / FUNCTION8_CNT ELSE 0 END * 100,1) FUNCTION8_IN_PCT,
	ROUND(100 - ROUND(CASE WHEN FUNCTION8_CNT > 0 THEN FUNCTION8_CNT_IN / FUNCTION8_CNT ELSE 0 END * 100,1),1) FUNCTION8_OUT_PCT,
--
	FUNCTION9_NAME,
	FUNCTION9_TARGET,
	FUNCTION9_CNT,
	ROUND(CASE WHEN FUNCTION9_CNT > 0 THEN FUNCTION9_AMT / FUNCTION9_CNT ELSE 0 END,1) FUNCTION9_AGE,
	ROUND(CASE WHEN FUNCTION9_CNT > 0 THEN FUNCTION9_CNT_IN / FUNCTION9_CNT ELSE 0 END * 100,1) FUNCTION9_IN_PCT,
	ROUND(100 - ROUND(CASE WHEN FUNCTION9_CNT > 0 THEN FUNCTION9_CNT_IN / FUNCTION9_CNT ELSE 0 END * 100,1),1) FUNCTION9_OUT_PCT,
--
	FUNCTION10_NAME,
	FUNCTION10_TARGET,
	FUNCTION10_CNT,
	ROUND(CASE WHEN FUNCTION10_CNT > 0 THEN FUNCTION10_AMT / FUNCTION10_CNT ELSE 0 END,1) FUNCTION10_AGE,
	ROUND(CASE WHEN FUNCTION10_CNT > 0 THEN FUNCTION10_CNT_IN / FUNCTION10_CNT ELSE 0 END * 100,1) FUNCTION10_IN_PCT,
	ROUND(100 - ROUND(CASE WHEN FUNCTION10_CNT > 0 THEN FUNCTION10_CNT_IN / FUNCTION10_CNT ELSE 0 END * 100,1),1) FUNCTION10_OUT_PCT
--
FROM
(SELECT
	II.UDAC_GROUP_NAME SOC,
	(CASE WHEN II.WORKFLOW_TYPE = 'NEWITM' THEN II.EUE_NORMAL_IND ELSE II.CHANGE_LEVEL END) FUNCTION_TYPE,
	COUNT(*) TOTAL_VOLUME,
	SUM(II.OPEN_SIG) BRIEFCASE_AMT,
	SUM(CASE WHEN II.OPEN_SIG <= II.OPEN_SIG_TARGET THEN 1 ELSE 0 END) BRIEFCASE_IN_CNT,
	SUM(II.KEY_OPEN) CONTRACT_APPROVAL_AMT,
	SUM(CASE WHEN II.KEY_OPEN <= II.PROCESS_OPEN_TARGET THEN 1 ELSE 0 END) CONTRACT_APPROVAL_IN_CNT,
	--SUM(II.PRIORITY_INDEX) INVENTORY_AMT,
	--MAX(PC.RUN_DATE) RUN_DATE,
--
	SUM(CASE WHEN II.ASSIGNEE_GROUP_SEQ = 1 THEN 1 ELSE 0 END) FUNCTION1_CNT,
	SUM(CASE WHEN II.ASSIGNEE_GROUP_SEQ = 1 AND {agingBucketType} = 'SigDate'  THEN II.SIG_AGE
		 WHEN II.ASSIGNEE_GROUP_SEQ = 1 AND {agingBucketType} = 'OpenDate' THEN II.OPEN_AGE
		 WHEN II.ASSIGNEE_GROUP_SEQ = 1 AND {agingBucketType} = 'EfsDate'  THEN II.EFS_AGE
		 WHEN II.ASSIGNEE_GROUP_SEQ = 1                                    THEN II.FUNCTION_AGE
									       ELSE 0 END) FUNCTION1_AMT,
	SUM(CASE WHEN II.ASSIGNEE_GROUP_SEQ = 1 AND {agingBucketType} = 'SigDate'  AND II.SIG_AGE      < II.FUNCTION_TARGET THEN 1
		 WHEN II.ASSIGNEE_GROUP_SEQ = 1 AND {agingBucketType} = 'OpenDate' AND II.OPEN_AGE     < II.FUNCTION_TARGET THEN 1
		 WHEN II.ASSIGNEE_GROUP_SEQ = 1 AND {agingBucketType} = 'EfsDate'  AND II.EFS_AGE      < II.FUNCTION_TARGET THEN 1
		 WHEN II.ASSIGNEE_GROUP_SEQ = 1                                    AND II.FUNCTION_AGE < II.FUNCTION_TARGET THEN 1
									       ELSE 0 END) FUNCTION1_CNT_IN,
	MAX(CASE WHEN II.ASSIGNEE_GROUP_SEQ = 1 THEN II.FUNCTION_TARGET ELSE 0 END) FUNCTION1_TARGET,
	MAX(CASE WHEN II.ASSIGNEE_GROUP_SEQ = 1 THEN II.ASSIGNEE_GROUP ELSE '' END) FUNCTION1_NAME,
--
	SUM(CASE WHEN II.ASSIGNEE_GROUP_SEQ = 2 THEN 1 ELSE 0 END) FUNCTION2_CNT,
	SUM(CASE WHEN II.ASSIGNEE_GROUP_SEQ = 2 AND {agingBucketType} = 'SigDate'  THEN II.SIG_AGE
		 WHEN II.ASSIGNEE_GROUP_SEQ = 2 AND {agingBucketType} = 'OpenDate' THEN II.OPEN_AGE
		 WHEN II.ASSIGNEE_GROUP_SEQ = 2 AND {agingBucketType} = 'EfsDate'  THEN II.EFS_AGE
		 WHEN II.ASSIGNEE_GROUP_SEQ = 2                                    THEN II.FUNCTION_AGE
									       ELSE 0 END) FUNCTION2_AMT,
	SUM(CASE WHEN II.ASSIGNEE_GROUP_SEQ = 2 AND {agingBucketType} = 'SigDate'  AND II.SIG_AGE      < II.FUNCTION_TARGET THEN 1
		 WHEN II.ASSIGNEE_GROUP_SEQ = 2 AND {agingBucketType} = 'OpenDate' AND II.OPEN_AGE     < II.FUNCTION_TARGET THEN 1
		 WHEN II.ASSIGNEE_GROUP_SEQ = 2 AND {agingBucketType} = 'EfsDate'  AND II.EFS_AGE      < II.FUNCTION_TARGET THEN 1
		 WHEN II.ASSIGNEE_GROUP_SEQ = 2                                    AND II.FUNCTION_AGE < II.FUNCTION_TARGET THEN 1
									       ELSE 0 END) FUNCTION2_CNT_IN,
	MAX(CASE WHEN II.ASSIGNEE_GROUP_SEQ = 2 THEN II.FUNCTION_TARGET ELSE 0 END) FUNCTION2_TARGET,
	MAX(CASE WHEN II.ASSIGNEE_GROUP_SEQ = 2 THEN II.ASSIGNEE_GROUP ELSE '' END) FUNCTION2_NAME,
--
	SUM(CASE WHEN II.ASSIGNEE_GROUP_SEQ = 3 THEN 1 ELSE 0 END) FUNCTION3_CNT,
	SUM(CASE WHEN II.ASSIGNEE_GROUP_SEQ = 3 AND {agingBucketType} = 'SigDate'  THEN II.SIG_AGE
		 WHEN II.ASSIGNEE_GROUP_SEQ = 3 AND {agingBucketType} = 'OpenDate' THEN II.OPEN_AGE
		 WHEN II.ASSIGNEE_GROUP_SEQ = 3 AND {agingBucketType} = 'EfsDate'  THEN II.EFS_AGE
		 WHEN II.ASSIGNEE_GROUP_SEQ = 3                                    THEN II.FUNCTION_AGE
									       ELSE 0 END) FUNCTION3_AMT,
	SUM(CASE WHEN II.ASSIGNEE_GROUP_SEQ = 3 AND {agingBucketType} = 'SigDate'  AND II.SIG_AGE      < II.FUNCTION_TARGET THEN 1
		 WHEN II.ASSIGNEE_GROUP_SEQ = 3 AND {agingBucketType} = 'OpenDate' AND II.OPEN_AGE     < II.FUNCTION_TARGET THEN 1
		 WHEN II.ASSIGNEE_GROUP_SEQ = 3 AND {agingBucketType} = 'EfsDate'  AND II.EFS_AGE      < II.FUNCTION_TARGET THEN 1
		 WHEN II.ASSIGNEE_GROUP_SEQ = 3                                    AND II.FUNCTION_AGE < II.FUNCTION_TARGET THEN 1
									       ELSE 0 END) FUNCTION3_CNT_IN,
	MAX(CASE WHEN II.ASSIGNEE_GROUP_SEQ = 3 THEN II.FUNCTION_TARGET ELSE 0 END) FUNCTION3_TARGET,
	MAX(CASE WHEN II.ASSIGNEE_GROUP_SEQ = 3 THEN II.ASSIGNEE_GROUP ELSE '' END) FUNCTION3_NAME,
--
	SUM(CASE WHEN II.ASSIGNEE_GROUP_SEQ = 4 THEN 1 ELSE 0 END) FUNCTION4_CNT,
	SUM(CASE WHEN II.ASSIGNEE_GROUP_SEQ = 4 AND {agingBucketType} = 'SigDate'  THEN II.SIG_AGE
		 WHEN II.ASSIGNEE_GROUP_SEQ = 4 AND {agingBucketType} = 'OpenDate' THEN II.OPEN_AGE
		 WHEN II.ASSIGNEE_GROUP_SEQ = 4 AND {agingBucketType} = 'EfsDate'  THEN II.EFS_AGE
		 WHEN II.ASSIGNEE_GROUP_SEQ = 4                                    THEN II.FUNCTION_AGE
									       ELSE 0 END) FUNCTION4_AMT,
	SUM(CASE WHEN II.ASSIGNEE_GROUP_SEQ = 4 AND {agingBucketType} = 'SigDate'  AND II.SIG_AGE      < II.FUNCTION_TARGET THEN 1
		 WHEN II.ASSIGNEE_GROUP_SEQ = 4 AND {agingBucketType} = 'OpenDate' AND II.OPEN_AGE     < II.FUNCTION_TARGET THEN 1
		 WHEN II.ASSIGNEE_GROUP_SEQ = 4 AND {agingBucketType} = 'EfsDate'  AND II.EFS_AGE      < II.FUNCTION_TARGET THEN 1
		 WHEN II.ASSIGNEE_GROUP_SEQ = 4                                    AND II.FUNCTION_AGE < II.FUNCTION_TARGET THEN 1
									       ELSE 0 END) FUNCTION4_CNT_IN,
	MAX(CASE WHEN II.ASSIGNEE_GROUP_SEQ = 4 THEN II.FUNCTION_TARGET ELSE 0 END) FUNCTION4_TARGET,
	MAX(CASE WHEN II.ASSIGNEE_GROUP_SEQ = 4 THEN II.ASSIGNEE_GROUP ELSE '' END) FUNCTION4_NAME,
--
	SUM(CASE WHEN II.ASSIGNEE_GROUP_SEQ = 5 THEN 1 ELSE 0 END) FUNCTION5_CNT,
	SUM(CASE WHEN II.ASSIGNEE_GROUP_SEQ = 5 AND {agingBucketType} = 'SigDate'  THEN II.SIG_AGE
		 WHEN II.ASSIGNEE_GROUP_SEQ = 5 AND {agingBucketType} = 'OpenDate' THEN II.OPEN_AGE
		 WHEN II.ASSIGNEE_GROUP_SEQ = 5 AND {agingBucketType} = 'EfsDate'  THEN II.EFS_AGE
		 WHEN II.ASSIGNEE_GROUP_SEQ = 5                                    THEN II.FUNCTION_AGE
									       ELSE 0 END) FUNCTION5_AMT,
	SUM(CASE WHEN II.ASSIGNEE_GROUP_SEQ = 5 AND {agingBucketType} = 'SigDate'  AND II.SIG_AGE      < II.FUNCTION_TARGET THEN 1
		 WHEN II.ASSIGNEE_GROUP_SEQ = 5 AND {agingBucketType} = 'OpenDate' AND II.OPEN_AGE     < II.FUNCTION_TARGET THEN 1
		 WHEN II.ASSIGNEE_GROUP_SEQ = 5 AND {agingBucketType} = 'EfsDate'  AND II.EFS_AGE      < II.FUNCTION_TARGET THEN 1
		 WHEN II.ASSIGNEE_GROUP_SEQ = 5                                    AND II.FUNCTION_AGE < II.FUNCTION_TARGET THEN 1
									       ELSE 0 END) FUNCTION5_CNT_IN,
	MAX(CASE WHEN II.ASSIGNEE_GROUP_SEQ = 5 THEN II.FUNCTION_TARGET ELSE 0 END) FUNCTION5_TARGET,
	MAX(CASE WHEN II.ASSIGNEE_GROUP_SEQ = 5 THEN II.ASSIGNEE_GROUP ELSE '' END) FUNCTION5_NAME,
--
	SUM(CASE WHEN II.ASSIGNEE_GROUP_SEQ = 6 THEN 1 ELSE 0 END) FUNCTION6_CNT,
	SUM(CASE WHEN II.ASSIGNEE_GROUP_SEQ = 6 AND {agingBucketType} = 'SigDate'  THEN II.SIG_AGE
		 WHEN II.ASSIGNEE_GROUP_SEQ = 6 AND {agingBucketType} = 'OpenDate' THEN II.OPEN_AGE
		 WHEN II.ASSIGNEE_GROUP_SEQ = 6 AND {agingBucketType} = 'EfsDate'  THEN II.EFS_AGE
		 WHEN II.ASSIGNEE_GROUP_SEQ = 6                                    THEN II.FUNCTION_AGE
									       ELSE 0 END) FUNCTION6_AMT,
	SUM(CASE WHEN II.ASSIGNEE_GROUP_SEQ = 6 AND {agingBucketType} = 'SigDate'  AND II.SIG_AGE      < II.FUNCTION_TARGET THEN 1
		 WHEN II.ASSIGNEE_GROUP_SEQ = 6 AND {agingBucketType} = 'OpenDate' AND II.OPEN_AGE     < II.FUNCTION_TARGET THEN 1
		 WHEN II.ASSIGNEE_GROUP_SEQ = 6 AND {agingBucketType} = 'EfsDate'  AND II.EFS_AGE      < II.FUNCTION_TARGET THEN 1
		 WHEN II.ASSIGNEE_GROUP_SEQ = 6                                    AND II.FUNCTION_AGE < II.FUNCTION_TARGET THEN 1
									       ELSE 0 END) FUNCTION6_CNT_IN,
	MAX(CASE WHEN II.ASSIGNEE_GROUP_SEQ = 6 THEN II.FUNCTION_TARGET ELSE 0 END) FUNCTION6_TARGET,
	MAX(CASE WHEN II.ASSIGNEE_GROUP_SEQ = 6 THEN II.ASSIGNEE_GROUP ELSE '' END) FUNCTION6_NAME,
--
	SUM(CASE WHEN II.ASSIGNEE_GROUP_SEQ = 7 THEN 1 ELSE 0 END) FUNCTION7_CNT,
	SUM(CASE WHEN II.ASSIGNEE_GROUP_SEQ = 7 AND {agingBucketType} = 'SigDate'  THEN II.SIG_AGE
		 WHEN II.ASSIGNEE_GROUP_SEQ = 7 AND {agingBucketType} = 'OpenDate' THEN II.OPEN_AGE
		 WHEN II.ASSIGNEE_GROUP_SEQ = 7 AND {agingBucketType} = 'EfsDate'  THEN II.EFS_AGE
		 WHEN II.ASSIGNEE_GROUP_SEQ = 7                                    THEN II.FUNCTION_AGE
									       ELSE 0 END) FUNCTION7_AMT,
	SUM(CASE WHEN II.ASSIGNEE_GROUP_SEQ = 7 AND {agingBucketType} = 'SigDate'  AND II.SIG_AGE      < II.FUNCTION_TARGET THEN 1
		 WHEN II.ASSIGNEE_GROUP_SEQ = 7 AND {agingBucketType} = 'OpenDate' AND II.OPEN_AGE     < II.FUNCTION_TARGET THEN 1
		 WHEN II.ASSIGNEE_GROUP_SEQ = 7 AND {agingBucketType} = 'EfsDate'  AND II.EFS_AGE      < II.FUNCTION_TARGET THEN 1
		 WHEN II.ASSIGNEE_GROUP_SEQ = 7                                    AND II.FUNCTION_AGE < II.FUNCTION_TARGET THEN 1
									       ELSE 0 END) FUNCTION7_CNT_IN,
	MAX(CASE WHEN II.ASSIGNEE_GROUP_SEQ = 7 THEN II.FUNCTION_TARGET ELSE 0 END) FUNCTION7_TARGET,
	MAX(CASE WHEN II.ASSIGNEE_GROUP_SEQ = 7 THEN II.ASSIGNEE_GROUP ELSE '' END) FUNCTION7_NAME,
--
	SUM(CASE WHEN II.ASSIGNEE_GROUP_SEQ = 8 THEN 1 ELSE 0 END) FUNCTION8_CNT,
	SUM(CASE WHEN II.ASSIGNEE_GROUP_SEQ = 8 AND {agingBucketType} = 'SigDate'  THEN II.SIG_AGE
		 WHEN II.ASSIGNEE_GROUP_SEQ = 8 AND {agingBucketType} = 'OpenDate' THEN II.OPEN_AGE
		 WHEN II.ASSIGNEE_GROUP_SEQ = 8 AND {agingBucketType} = 'EfsDate'  THEN II.EFS_AGE
		 WHEN II.ASSIGNEE_GROUP_SEQ = 8                                    THEN II.FUNCTION_AGE
									       ELSE 0 END) FUNCTION8_AMT,
	SUM(CASE WHEN II.ASSIGNEE_GROUP_SEQ = 8 AND {agingBucketType} = 'SigDate'  AND II.SIG_AGE      < II.FUNCTION_TARGET THEN 1
		 WHEN II.ASSIGNEE_GROUP_SEQ = 8 AND {agingBucketType} = 'OpenDate' AND II.OPEN_AGE     < II.FUNCTION_TARGET THEN 1
		 WHEN II.ASSIGNEE_GROUP_SEQ = 8 AND {agingBucketType} = 'EfsDate'  AND II.EFS_AGE      < II.FUNCTION_TARGET THEN 1
		 WHEN II.ASSIGNEE_GROUP_SEQ = 8                                    AND II.FUNCTION_AGE < II.FUNCTION_TARGET THEN 1
									       ELSE 0 END) FUNCTION8_CNT_IN,
	MAX(CASE WHEN II.ASSIGNEE_GROUP_SEQ = 8 THEN II.FUNCTION_TARGET ELSE 0 END) FUNCTION8_TARGET,
	MAX(CASE WHEN II.ASSIGNEE_GROUP_SEQ = 8 THEN II.ASSIGNEE_GROUP ELSE '' END) FUNCTION8_NAME,
--
	SUM(CASE WHEN II.ASSIGNEE_GROUP_SEQ = 9 THEN 1 ELSE 0 END) FUNCTION9_CNT,
	SUM(CASE WHEN II.ASSIGNEE_GROUP_SEQ = 9 AND {agingBucketType} = 'SigDate'  THEN II.SIG_AGE
		 WHEN II.ASSIGNEE_GROUP_SEQ = 9 AND {agingBucketType} = 'OpenDate' THEN II.OPEN_AGE
		 WHEN II.ASSIGNEE_GROUP_SEQ = 9 AND {agingBucketType} = 'EfsDate'  THEN II.EFS_AGE
		 WHEN II.ASSIGNEE_GROUP_SEQ = 9                                    THEN II.FUNCTION_AGE
									       ELSE 0 END) FUNCTION9_AMT,
	SUM(CASE WHEN II.ASSIGNEE_GROUP_SEQ = 9 AND {agingBucketType} = 'SigDate'  AND II.SIG_AGE      < II.FUNCTION_TARGET THEN 1
		 WHEN II.ASSIGNEE_GROUP_SEQ = 9 AND {agingBucketType} = 'OpenDate' AND II.OPEN_AGE     < II.FUNCTION_TARGET THEN 1
		 WHEN II.ASSIGNEE_GROUP_SEQ = 9 AND {agingBucketType} = 'EfsDate'  AND II.EFS_AGE      < II.FUNCTION_TARGET THEN 1
		 WHEN II.ASSIGNEE_GROUP_SEQ = 9                                    AND II.FUNCTION_AGE < II.FUNCTION_TARGET THEN 1
									       ELSE 0 END) FUNCTION9_CNT_IN,
	MAX(CASE WHEN II.ASSIGNEE_GROUP_SEQ = 9 THEN II.FUNCTION_TARGET ELSE 0 END) FUNCTION9_TARGET,
	MAX(CASE WHEN II.ASSIGNEE_GROUP_SEQ = 9 THEN II.ASSIGNEE_GROUP ELSE '' END) FUNCTION9_NAME,
--
	SUM(CASE WHEN II.ASSIGNEE_GROUP_SEQ = 10 THEN 1 ELSE 0 END) FUNCTION10_CNT,
	SUM(CASE WHEN II.ASSIGNEE_GROUP_SEQ = 10 AND {agingBucketType} = 'SigDate'  THEN II.SIG_AGE
		 WHEN II.ASSIGNEE_GROUP_SEQ = 10 AND {agingBucketType} = 'OpenDate' THEN II.OPEN_AGE
		 WHEN II.ASSIGNEE_GROUP_SEQ = 10 AND {agingBucketType} = 'EfsDate'  THEN II.EFS_AGE
		 WHEN II.ASSIGNEE_GROUP_SEQ = 10                                    THEN II.FUNCTION_AGE
									       ELSE 0 END) FUNCTION10_AMT,
	SUM(CASE WHEN II.ASSIGNEE_GROUP_SEQ = 10 AND {agingBucketType} = 'SigDate'  AND II.SIG_AGE      < II.FUNCTION_TARGET THEN 1
		 WHEN II.ASSIGNEE_GROUP_SEQ = 10 AND {agingBucketType} = 'OpenDate' AND II.OPEN_AGE     < II.FUNCTION_TARGET THEN 1
		 WHEN II.ASSIGNEE_GROUP_SEQ = 10 AND {agingBucketType} = 'EfsDate'  AND II.EFS_AGE      < II.FUNCTION_TARGET THEN 1
		 WHEN II.ASSIGNEE_GROUP_SEQ = 10                                    AND II.FUNCTION_AGE < II.FUNCTION_TARGET THEN 1
									       ELSE 0 END) FUNCTION10_CNT_IN,
	MAX(CASE WHEN II.ASSIGNEE_GROUP_SEQ = 10 THEN II.FUNCTION_TARGET ELSE 0 END) FUNCTION10_TARGET,
	MAX(CASE WHEN II.ASSIGNEE_GROUP_SEQ = 10 THEN II.ASSIGNEE_GROUP ELSE '' END) FUNCTION10_NAME
--
FROM
	IOCT_INV_ITEM_ALL    II
	--(SELECT  MAX(RUN_DATE) RUN_DATE
		--FROM CA_PROCESS_CONTROL
		--WHERE PROCESS_NAME = 'CADBIV') PC
WHERE
	II.UDAC_GROUP_NAME		= {udacGroupName}
AND     II.WORKFLOW_TYPE                = {workflow}
AND	(('emptyParam') 		IN ({{regionCode}})
OR 	II.REGION			IN ({{regionCode}}))
GROUP BY 
	II.UDAC_GROUP_NAME,
	(CASE WHEN II.WORKFLOW_TYPE = 'NEWITM' THEN II.EUE_NORMAL_IND ELSE II.CHANGE_LEVEL END))
)	
 	]]></statement>

<!-- Inventory Page 2 Drill Down -->
	<statement code="IOCT_Inv_DD">
select a.* 
from   ioct_inv_item_all a, 
(select udac_group_name, function_order , db_region, workflow_type, change_level
 from ioct_function_target 
 where udac_group_name = {udacGroupName} 
 and function_name = {assigneeGroup} 
 and workflow_type = {workflow} 
 and ('emptyParam' = {eue} or ({workflow} != 'NEWITM' AND change_level = {eue}) or ({workflow} = 'NEWITM' and change_level = 'Simple') )
 and sysdate between effective_from_date and effective_to_date ) b 
where  a.udac_group_name = {udacGroupName}
and a.workflow_type = {workflow} 
and a.DB_REGION = b.db_region (+)
and a.workflow_type = b.workflow_type (+)
and a.udac_group_name = b.udac_group_name (+) 
and a.change_level = b.change_level (+)
and    ('emptyParam' = {eue} OR ({workflow} = 'NEWITM' AND a.eue_normal_ind = {eue}) OR ({workflow} != 'NEWITM' AND a.change_level = {eue}) )
and    (('emptyParam') IN ({{regionCode}}) OR a.region IN ({{regionCode}})) 
and ({assigneeGroup} = 'emptyParam' 
    OR (b.function_order is not null and a.assignee_group_seq = b.function_order) 
    OR (b.function_order is null and {assigneeGroup} =  'emptyParam') 
	)
 	</statement>
 	
<!-- Inventory Page 2 Drill Down for export all-->
	<statement code="IOCT_Inv_Export_All">
select *
from   ioct_inv_item_all a
where (('emptyParam') IN ({{regionCode}}) OR region IN ({{regionCode}}))
and workflow_type = {workflow}
 	</statement>

<!-- Aging Bucket Page 2 Summary Grid -->

<statement code="IOCT_Inv_AgingBucket"><![CDATA[
select   ft.aging_bucket label
       , max(case when ft.function_order = 1 then ft.function_name end) function1_name
       , max(case when ft.function_order = 1 then ii.normal_cnt end) function1_normal
       , max(case when ft.function_order = 1 then ii.eue_cnt end) function1_eue
       , max(case when ft.function_order = 1 then ii.simple_cnt end) function1_simple
       , max(case when ft.function_order = 1 then ii.medium_cnt end) function1_medium
       , max(case when ft.function_order = 1 then ii.complex_cnt end) function1_complex
       , max(case when ft.function_order = 2 then ft.function_name end) function2_name
       , max(case when ft.function_order = 2 then ii.normal_cnt end) function2_normal
       , max(case when ft.function_order = 2 then ii.eue_cnt end) function2_eue
       , max(case when ft.function_order = 2 then ii.simple_cnt end) function2_simple
       , max(case when ft.function_order = 2 then ii.medium_cnt end) function2_medium
       , max(case when ft.function_order = 2 then ii.complex_cnt end) function2_complex
       , max(case when ft.function_order = 3 then ft.function_name end) function3_name
       , max(case when ft.function_order = 3 then ii.normal_cnt end) function3_normal
       , max(case when ft.function_order = 3 then ii.eue_cnt end) function3_eue
       , max(case when ft.function_order = 3 then ii.simple_cnt end) function3_simple
       , max(case when ft.function_order = 3 then ii.medium_cnt end) function3_medium
       , max(case when ft.function_order = 3 then ii.complex_cnt end) function3_complex
       , max(case when ft.function_order = 4 then ft.function_name end) function4_name
       , max(case when ft.function_order = 4 then ii.normal_cnt end) function4_normal
       , max(case when ft.function_order = 4 then ii.eue_cnt end) function4_eue
       , max(case when ft.function_order = 4 then ii.simple_cnt end) function4_simple
       , max(case when ft.function_order = 4 then ii.medium_cnt end) function4_medium
       , max(case when ft.function_order = 4 then ii.complex_cnt end) function4_complex
       , max(case when ft.function_order = 5 then ft.function_name end) function5_name
       , max(case when ft.function_order = 5 then ii.normal_cnt end) function5_normal
       , max(case when ft.function_order = 5 then ii.eue_cnt end) function5_eue
       , max(case when ft.function_order = 5 then ii.simple_cnt end) function5_simple
       , max(case when ft.function_order = 5 then ii.medium_cnt end) function5_medium
       , max(case when ft.function_order = 5 then ii.complex_cnt end) function5_complex
       , max(case when ft.function_order = 6 then ft.function_name end) function6_name
       , max(case when ft.function_order = 6 then ii.normal_cnt end) function6_normal
       , max(case when ft.function_order = 6 then ii.eue_cnt end) function6_eue
       , max(case when ft.function_order = 6 then ii.simple_cnt end) function6_simple
       , max(case when ft.function_order = 6 then ii.medium_cnt end) function6_medium
       , max(case when ft.function_order = 6 then ii.complex_cnt end) function6_complex
       , max(case when ft.function_order = 7 then ft.function_name end) function7_name
       , max(case when ft.function_order = 7 then ii.normal_cnt end) function7_normal
       , max(case when ft.function_order = 7 then ii.eue_cnt end) function7_eue
       , max(case when ft.function_order = 7 then ii.simple_cnt end) function7_simple
       , max(case when ft.function_order = 7 then ii.medium_cnt end) function7_medium
       , max(case when ft.function_order = 7 then ii.complex_cnt end) function7_complex
       , max(case when ft.function_order = 8 then ft.function_name end) function8_name
       , max(case when ft.function_order = 8 then ii.normal_cnt end) function8_normal
       , max(case when ft.function_order = 8 then ii.eue_cnt end) function8_eue
       , max(case when ft.function_order = 8 then ii.simple_cnt end) function8_simple
       , max(case when ft.function_order = 8 then ii.medium_cnt end) function8_medium
       , max(case when ft.function_order = 8 then ii.complex_cnt end) function8_complex
       , max(case when ft.function_order = 9 then ft.function_name end) function9_name
       , max(case when ft.function_order = 9 then ii.normal_cnt end) function9_normal
       , max(case when ft.function_order = 9 then ii.eue_cnt end) function9_eue
       , max(case when ft.function_order = 9 then ii.simple_cnt end) function9_simple
       , max(case when ft.function_order = 9 then ii.medium_cnt end) function9_medium
       , max(case when ft.function_order = 9 then ii.complex_cnt end) function9_complex
       , max(case when ft.function_order = 10 then ft.function_name end) function10_name
       , max(case when ft.function_order = 10 then ii.normal_cnt end) function10_normal
       , max(case when ft.function_order = 10 then ii.eue_cnt end) function10_eue
       , max(case when ft.function_order = 10 then ii.simple_cnt end) function10_simple
       , max(case when ft.function_order = 10 then ii.medium_cnt end) function10_medium
       , max(case when ft.function_order = 10 then ii.complex_cnt end) function10_complex
from     (select  ft.udac_group
                , ft.udac_group_name
                , ft.function_name
                , ft.function_order
                , bucket_index
                , (case bucket_index
                      when 1 then bucket_1_value 
                      when 2 then bucket_2_value 
                      when 3 then bucket_3_value 
                      when 4 then bucket_4_value 
                      when 5 then bucket_5_value 
                      when 6 then high_bucket 
                   end) aging_bucket
          from     (select  A.*, 
                   ROW_NUMBER() OVER(PARTITION BY udac_group_name, function_order , workflow_type
                   order by effective_from_date DESC) RNUM
                   FROM ioct_function_target a)  ft
                  join ioct_inv_aging_buckets bv
                    on ft.udac_group_name = bv.udac_group_name
                    and ft.workflow_type = bv.workflow_type
                , (select level bucket_index from dual connect by level <= 6)
          where   ft.udac_group_name = {udacGroupName} 
          and ft.workflow_type = {workflow} 
          and ft.rnum = 1
         ) ft
         left outer join   
         (select   ii.assignee_group_seq
                 , (case when param.aging_bucket_type = 'SigDate'  then ii.aging_bucket_sig_date
                         when param.aging_bucket_type = 'OpenDate' then ii.aging_bucket_open_date
                         when param.aging_bucket_type = 'EfsDate'  then ii.aging_bucket_efs_date
                         else ii.aging_bucket
                    end) aging_bucket
                 , nullif(sum(case when ii.eue_normal_ind = 'Normal' then 1 else 0 end), 0) normal_cnt
                 , nullif(sum(case when ii.eue_normal_ind = 'EUE'    then 1 else 0 end), 0) eue_cnt
                 , nullif(sum(case when ii.change_level = 'Simple'    then 1 else 0 end), 0) simple_cnt
                 , nullif(sum(case when ii.change_level = 'Medium'    then 1 else 0 end), 0) medium_cnt
                 , nullif(sum(case when ii.change_level = 'Complex'    then 1 else 0 end), 0) complex_cnt
          from     ioct_inv_item_all ii
                 , (select {agingBucketType} aging_bucket_type from dual) param
          where    ii.udac_group_name = {udacGroupName}
          and	   ii.workflow_type = {workflow}
          and      (('emptyParam') in ({{regionCode}}) or ii.region in ({{regionCode}}))
          group by ii.assignee_group_seq
                 , (case when param.aging_bucket_type = 'SigDate'  then ii.aging_bucket_sig_date
                         when param.aging_bucket_type = 'OpenDate' then ii.aging_bucket_open_date
                         when param.aging_bucket_type = 'EfsDate'  then ii.aging_bucket_efs_date
                         else ii.aging_bucket
                    end)  ) ii
           on ft.function_order = ii.assignee_group_seq
          and ft.aging_bucket = ii.aging_bucket
group by ft.aging_bucket
       , ft.bucket_index
order by ft.bucket_index
     ]]></statement>


<!-- Aging Bucket Drill Down -->
<!--{eue} input parameter values can be Simple , Midium, Complex , NORMAL , EUE and 'emptyParam'( for Total Row)-->

	<statement code="IOCT_Inv_AgingBucket_DD"><![CDATA[
select a.*
from   ioct_inv_item_all a, ioct_function_target b

where  a.udac_group_name = {udacGroupName}
and a.udac_group_name = b.udac_group_name
and a.assignee_group_seq = b.function_order
and a.workflow_type = b.workflow_type
and a.db_region = b.db_region
and a.change_level = b.change_level
and sysdate between b.effective_from_date and b.effective_to_date
and    ('emptyParam' = {eue} OR ('NEWITM' = {workflow} and a.eue_normal_ind = {eue}) OR ('NEWITM' != {workflow} and a.change_level = {eue}))
and    b.function_name = {assigneeGroup}
and    a.workflow_type = {workflow}
and    (('emptyParam') IN ({{regionCode}}) OR a.region IN ({{regionCode}}))
and    (
        ({agingBucketType} is null and a.aging_bucket = {agingBucket}) Or
        ({agingBucketType} = 'SigDate' and a.aging_bucket_sig_date = {agingBucket}) Or
        ({agingBucketType} = 'OpenDate' and a.aging_bucket_open_date = {agingBucket}) Or
        ({agingBucketType} = 'EfsDate' and a.aging_bucket_efs_date = {agingBucket}) 
       )
 	]]></statement>
 	
 	<statement code="IOCT_Productivity_Udacgroup_Query"><![CDATA[
 	select * from 
 	(
select  (case param.lvl when 'MGR2'  then amgr3_first_name||' '||amgr3_last_name 
                       		when 'MGR'   then amgr2_first_name||' '||amgr2_last_name 
                       		when 'AGENT' then amgr_first_name||' '||amgr_last_name 
        end) mgr_name
       , (case param.lvl when 'MGR2'  then assigned_mgr3
                         when 'MGR'   then assigned_mgr2
                         when 'AGENT' then assigned_mgr
        end) mgr_id
       , udac_group , product , rec_mm , rec_ww , rec_yyyy , date_type
       , row_number() over(partition by  (case param.lvl when 'MGR2'  then amgr3_first_name||' '||amgr3_last_name 
                       		when 'MGR'   then amgr2_first_name||' '||amgr2_last_name 
                       		when 'AGENT' then amgr_first_name||' '||amgr_last_name 
        end),
        (case param.lvl when 'MGR2'  then assigned_mgr3
                         when 'MGR'   then assigned_mgr2
                         when 'AGENT' then assigned_mgr
        end),
        udac_group , product 
                                 order by product,rec_ww desc) rnum
        from ioct_productivity_page_3 ,(select {LEVEL} lvl from dual) param
where( (param.lvl = 'MGR3' 
     and assigned_mgr3 <> 0
     and assigned_mgr2 = 0
     and assigned_mgr  = 0
     and assigned_agent= 0 )
      or (param.lvl = 'MGR2' 
     and assigned_mgr3 = {assignedMgr3}
     and assigned_mgr2 <> 0
     and assigned_mgr  = 0
     and assigned_agent= 0 )
      or (param.lvl = 'MGR' 
     and assigned_mgr3 = {assignedMgr3}
     and assigned_mgr2 = {assignedMgr2}
     and assigned_mgr <> 0
     and assigned_agent= 0 )
     or (param.lvl = 'AGENT'
     and assigned_mgr3 = {assignedMgr3}
     and assigned_mgr2 = {assignedMgr2}
     and assigned_mgr = {assignedMgr} 
     and assigned_agent <> 0 ))
  and ( (date_type = 'M' and rec_yyyy||lpad(rec_mm, 2,'0') = {month}) OR date_type = 'W' )  
order by 4 asc
)
where rnum = 1
 	]]></statement>
 	
 	<statement code="IOCT_Productivity_Subname_Query"><![CDATA[
 	select * from (
select  (case param.lvl when 'MGR3' then amgr3_first_name||' '||amgr3_last_name 
                       when 'MGR2' then amgr2_first_name||' '||amgr2_last_name 
                       when 'MGR' then amgr_first_name||' '||amgr_last_name 
                       when 'AGENT' then agent_first_name||' '||agent_last_name 
        end) sub_name,
        (case param.lvl when 'MGR3' then assigned_mgr3 
                       when 'MGR2' then assigned_mgr2 
                       when 'MGR' then assigned_mgr 
                       when 'AGENT' then assigned_agent 
        end) sub_id,
        rec_mm,
        rec_yyyy,
        rec_ww,
        date_type,
         row_number() over(partition by (case param.lvl when 'MGR3' then amgr3_first_name||' '||amgr3_last_name 
                       when 'MGR2' then amgr2_first_name||' '||amgr2_last_name 
                       when 'MGR' then amgr_first_name||' '||amgr_last_name 
                       when 'AGENT' then agent_first_name||' '||agent_last_name 
        end), 
        (case param.lvl when 'MGR3' then assigned_mgr3 
                       when 'MGR2' then assigned_mgr2 
                       when 'MGR' then assigned_mgr 
                       when 'AGENT' then assigned_agent 
        end)
         order by (case param.lvl when 'MGR3' then amgr3_first_name||' '||amgr3_last_name 
                       when 'MGR2' then amgr2_first_name||' '||amgr2_last_name 
                       when 'MGR' then amgr_first_name||' '||amgr_last_name 
                       when 'AGENT' then agent_first_name||' '||agent_last_name 
        end),rec_ww desc) rnum
from IOCT_PRODUCTIVITY_PAGE_3, (select {LEVEL} lvl from dual) param
where ( (param.lvl = 'MGR3' 
     and assigned_mgr3 <> 0
     and assigned_mgr2 = 0
     and assigned_mgr  = 0
     and assigned_agent= 0 )
      or (param.lvl = 'MGR2' 
     and assigned_mgr3 = {assignedMgr3}
     and assigned_mgr2 <> 0
     and assigned_mgr  = 0
     and assigned_agent= 0 )
      or (param.lvl = 'MGR' 
     and assigned_mgr3 = {assignedMgr3}
     and assigned_mgr2 = {assignedMgr2}
     and assigned_mgr <> 0
     and assigned_agent= 0 )
     or (param.lvl = 'AGENT'
     and assigned_mgr3 = {assignedMgr3}
     and assigned_mgr2 = {assignedMgr2}
     and assigned_mgr = {assignedMgr} 
     and assigned_agent <> 0))
and assigned_mgr3 <> 0
and ( (date_type = 'M' and rec_yyyy||lpad(rec_mm, 2,'0') = {month}) OR date_type = 'W' )
order by 1)
where rnum = 1

 	]]></statement>
 	
 	<statement code="IOCT_Productivity_Results_Query"><![CDATA[
select {product_index} product_index
     , date_value
     , date_type
     , assigned_agent
     , assigned_mgr
     , assigned_mgr2
     , assigned_mgr3
     , product_cnt 
     , product_target 
     , product_target_pct
     ,rec_yyyy
     ,rec_mm
     ,rec_ww
from   IOCT_PRODUCTIVITY_PAGE_3
where  ( (date_type = 'M' and rec_yyyy||lpad(rec_mm, 2,'0') = {month}) OR date_type = 'W' )
and   ( ({LEVEL} = 'MGR3' 
     and assigned_mgr3 <> 0
     and assigned_mgr2 = 0
     and assigned_mgr  = 0
     and assigned_agent= 0 )
      or ({LEVEL} = 'MGR2' 
     and assigned_mgr3 = {assignedMgr3}
     and assigned_mgr  = 0
     and assigned_agent= 0 )
      or ({LEVEL} = 'MGR' 
     and assigned_mgr3 = {assignedMgr3}
     and assigned_mgr2 = {assignedMgr2}
     and assigned_agent = 0 )
     or ({LEVEL} = 'AGENT'
     and assigned_mgr3 = {assignedMgr3}
     and assigned_mgr2 = {assignedMgr2}
     and assigned_mgr = {assignedMgr}))
and assigned_mgr3 <> 0
and udac_group = {udacGroup}
order by (case when assigned_mgr2 = 0 then 1 else 0 end)
       , (case when assigned_mgr = 0 then 1 else 0 end)
       , (case when assigned_agent = 0 then 1 else 0 end)
 	]]></statement>

<!-- and    ( ('emptyParam') IN ({{regionCode}}) or region IN ({{regionCode}}) ) -->
 	
 	<statement code="IOCT_Productivity_DD"><![CDATA[
select * 
from   (select a.*
             , ROUND((a.LIVE_DATE - a.SIGNATURE_DATE),1) cycle_time_actual
             , row_number() over(partition by a.customer_id, a.product_code, a.product_issue_num, a.item_id, a.css_product_id, a.assignee_group 
                                 order by     a.process_start_time desc) rnum
             , process_start_time min_process_start_time
             , process_end_time max_process_end_time
        from   ioct_cycle_time_all a
             , (select {LEVEL} lvl from dual) param
        where  udac_group_name = {udacGroupName}
        and    ( ({dateType} = 'Y' and rec_yyyy = {recYyyy} ) 
              or ({dateType} = 'M' and rec_yyyy = {recYyyy} and rec_mm = {recMm} )
              or ({dateType} = 'W' and rec_yyyy = {recYyyy} and rec_ww = {recWw} ) 
               )
        and     ( (param.lvl = 'MGR3' 
             and assigned_mgr3 = {assignedMgr3} )
              or (param.lvl = 'MGR2'
             and assigned_mgr2 = {assignedMgr2} )
              or (param.lvl = 'MGR' 
             and assigned_mgr = {assignedMgr} )
              or (param.lvl = 'AGENT' 
             and assigned_agent = {assignedAgent})
                )
       )
where  rnum = 1
]]></statement>

<!--IOG Dashboard Charts and Inventory Queries Starts Here  -->

<statement code="IOCT_Region_Colors"><![CDATA[
select * from ioct_chart_colors where plot_type = 'REGION'
]]></statement>

  <statement code="IOCT_Cat_Colors"><![CDATA[
select * from ioct_chart_colors where plot_type = 'CATEGORY'
]]></statement>

 

<statement code="IOCT_UdacgroupNames_Core">
select b.udac_group udacgroup,
       b.udac_group_name value,
       b.udac_group_name label,
        colors.PLOT_COLOR color,
        s.sort_order
from udac_group_ca a, udac_group_name_ca b, IOCT_CHART_COLORS COLORS, ioct_sort_order s
where a.udac_group = b.udac_group
and b.udac_group_name = colors.PLOT_VALUE
and a.udac_ind4 = 'C'
and a.udac_group = s.udac_group
group by b.udac_group, b.udac_group_name, colors.PLOT_COLOR, s.sort_order
order by s.sort_order
</statement> 

	<statement code="IOCT_UdacgroupNames_Premium">
select b.udac_group udacgroup,
       b.udac_group_name value,
       b.udac_group_name label,
        colors.PLOT_COLOR color,
        s.sort_order
from udac_group_ca a, udac_group_name_ca b, IOCT_CHART_COLORS COLORS, ioct_sort_order s
where a.udac_group = b.udac_group
and b.udac_group_name = colors.PLOT_VALUE
and a.udac_ind4 = 'P'
and a.udac_group = s.udac_group
group by b.udac_group, b.udac_group_name, colors.PLOT_COLOR, s.sort_order
order by s.sort_order
</statement>

<statement code = "IOCT_Inv_Region_Chart_Query"><![CDATA[
select result.*,
	   (E_N_N_AMT_DAYS+E_N_E_AMT_DAYS+E_C_S_AMT_DAYS+E_C_M_AMT_DAYS+E_C_C_AMT_DAYS+E_C_T_AMT_DAYS+E_E_S_AMT_DAYS+E_E_M_AMT_DAYS+E_E_C_AMT_DAYS+E_E_T_AMT_DAYS) east_amt_days,
	   (W_N_N_AMT_DAYS+W_N_E_AMT_DAYS+W_C_S_AMT_DAYS+W_C_M_AMT_DAYS+W_C_C_AMT_DAYS+W_C_T_AMT_DAYS+W_E_S_AMT_DAYS+W_E_M_AMT_DAYS+W_E_C_AMT_DAYS+W_E_T_AMT_DAYS) west_amt_days,
	   (O_N_N_AMT_DAYS+O_N_E_AMT_DAYS+O_C_S_AMT_DAYS+O_C_M_AMT_DAYS+O_C_C_AMT_DAYS+O_C_T_AMT_DAYS+O_E_S_AMT_DAYS+O_E_M_AMT_DAYS+O_E_C_AMT_DAYS+O_E_T_AMT_DAYS) oor_amt_days,
	   (E_N_N_VOL_DAYS+E_N_E_VOL_DAYS+E_C_S_VOL_DAYS+E_C_M_VOL_DAYS+E_C_C_VOL_DAYS+E_C_T_VOL_DAYS+E_E_S_VOL_DAYS+E_E_M_VOL_DAYS+E_E_C_VOL_DAYS+E_E_T_VOL_DAYS) east_vol_days,
	   (W_N_N_VOL_DAYS+W_N_E_VOL_DAYS+W_C_S_VOL_DAYS+W_C_M_VOL_DAYS+W_C_C_VOL_DAYS+W_C_T_VOL_DAYS+W_E_S_VOL_DAYS+W_E_M_VOL_DAYS+W_E_C_VOL_DAYS+W_E_T_VOL_DAYS) west_vol_days,
	   (O_N_N_VOL_DAYS+O_N_E_VOL_DAYS+O_C_S_VOL_DAYS+O_C_M_VOL_DAYS+O_C_C_VOL_DAYS+O_C_T_VOL_DAYS+O_E_S_VOL_DAYS+O_E_M_VOL_DAYS+O_E_C_VOL_DAYS+O_E_T_VOL_DAYS) oor_vol_days
from (   select CYCLE_DATE,
				CYCLE_ACT_DATE,
	       NVL( E_N_N_AMT_DAYS,0)  E_N_N_AMT_DAYS,
	       NVL( E_N_E_AMT_DAYS,0)  E_N_E_AMT_DAYS,
	       NVL( E_C_S_AMT_DAYS,0)  E_C_S_AMT_DAYS,
	       NVL( E_C_M_AMT_DAYS,0)  E_C_M_AMT_DAYS,
	       NVL( E_C_C_AMT_DAYS,0)  E_C_C_AMT_DAYS,
	       NVL( E_C_T_AMT_DAYS,0)  E_C_T_AMT_DAYS,
	       NVL( E_E_S_AMT_DAYS,0)  E_E_S_AMT_DAYS,
	       NVL( E_E_M_AMT_DAYS,0)  E_E_M_AMT_DAYS,
	       NVL( E_E_C_AMT_DAYS,0)  E_E_C_AMT_DAYS,
	       NVL( E_E_T_AMT_DAYS,0)  E_E_T_AMT_DAYS,
	       NVL( W_N_N_AMT_DAYS,0)  W_N_N_AMT_DAYS,
	       NVL( W_N_E_AMT_DAYS,0)  W_N_E_AMT_DAYS,
	       NVL( W_C_S_AMT_DAYS,0)  W_C_S_AMT_DAYS,
	       NVL( W_C_M_AMT_DAYS,0)  W_C_M_AMT_DAYS,
	       NVL( W_C_C_AMT_DAYS,0)  W_C_C_AMT_DAYS,
	       NVL( W_C_T_AMT_DAYS,0)  W_C_T_AMT_DAYS,
	       NVL( W_E_S_AMT_DAYS,0)  W_E_S_AMT_DAYS,
	       NVL( W_E_M_AMT_DAYS,0)  W_E_M_AMT_DAYS,
	       NVL( W_E_C_AMT_DAYS,0)  W_E_C_AMT_DAYS,
	       NVL( W_E_T_AMT_DAYS,0)  W_E_T_AMT_DAYS,
	       NVL( O_N_N_AMT_DAYS,0)  O_N_N_AMT_DAYS,
	       NVL( O_N_E_AMT_DAYS,0)  O_N_E_AMT_DAYS,
	       NVL( O_C_S_AMT_DAYS,0)  O_C_S_AMT_DAYS,
	       NVL( O_C_M_AMT_DAYS,0)  O_C_M_AMT_DAYS,
	       NVL( O_C_C_AMT_DAYS,0)  O_C_C_AMT_DAYS,
	       NVL( O_C_T_AMT_DAYS,0)  O_C_T_AMT_DAYS,
	       NVL( O_E_S_AMT_DAYS,0)  O_E_S_AMT_DAYS,
	       NVL( O_E_M_AMT_DAYS,0)  O_E_M_AMT_DAYS,
	       NVL( O_E_C_AMT_DAYS,0)  O_E_C_AMT_DAYS,
	       NVL( O_E_T_AMT_DAYS,0)  O_E_T_AMT_DAYS,
	        NVL(O_N_N_VOL_DAYS, 0) O_N_N_VOL_DAYS,
	        NVL(O_N_E_VOL_DAYS, 0) O_N_E_VOL_DAYS,
	        NVL(O_C_S_VOL_DAYS, 0) O_C_S_VOL_DAYS,
	        NVL(O_C_M_VOL_DAYS, 0) O_C_M_VOL_DAYS,
	        NVL(O_C_C_VOL_DAYS, 0) O_C_C_VOL_DAYS,
	        NVL(O_C_T_VOL_DAYS, 0) O_C_T_VOL_DAYS,
	        NVL(O_E_S_VOL_DAYS, 0) O_E_S_VOL_DAYS,
	        NVL(O_E_M_VOL_DAYS, 0) O_E_M_VOL_DAYS,
	        NVL(O_E_C_VOL_DAYS, 0) O_E_C_VOL_DAYS,
	        NVL(O_E_T_VOL_DAYS, 0) O_E_T_VOL_DAYS,
	        NVL(W_N_N_VOL_DAYS, 0) W_N_N_VOL_DAYS,
	        NVL(W_N_E_VOL_DAYS, 0) W_N_E_VOL_DAYS,
	        NVL(W_C_S_VOL_DAYS, 0) W_C_S_VOL_DAYS,
	        NVL(W_C_M_VOL_DAYS, 0) W_C_M_VOL_DAYS,
	        NVL(W_C_C_VOL_DAYS, 0) W_C_C_VOL_DAYS,
	        NVL(W_C_T_VOL_DAYS, 0) W_C_T_VOL_DAYS,
	        NVL(W_E_S_VOL_DAYS, 0) W_E_S_VOL_DAYS,
	        NVL(W_E_M_VOL_DAYS, 0) W_E_M_VOL_DAYS,
	        NVL(W_E_C_VOL_DAYS, 0) W_E_C_VOL_DAYS,
	        NVL(W_E_T_VOL_DAYS, 0) W_E_T_VOL_DAYS,
	        NVL(E_N_N_VOL_DAYS, 0) E_N_N_VOL_DAYS, 
	        NVL(E_N_E_VOL_DAYS, 0) E_N_E_VOL_DAYS,
	        NVL(E_C_S_VOL_DAYS, 0) E_C_S_VOL_DAYS,
	        NVL(E_C_M_VOL_DAYS, 0) E_C_M_VOL_DAYS,
	        NVL(E_C_C_VOL_DAYS, 0) E_C_C_VOL_DAYS,
	        NVL(E_C_T_VOL_DAYS, 0) E_C_T_VOL_DAYS,
	        NVL(E_E_S_VOL_DAYS, 0) E_E_S_VOL_DAYS,
	        NVL(E_E_M_VOL_DAYS, 0) E_E_M_VOL_DAYS,
	        NVL(E_E_C_VOL_DAYS, 0) E_E_C_VOL_DAYS,
	        NVL(E_E_T_VOL_DAYS, 0) E_E_T_VOL_DAYS
	                from
	                        (   select * 
	                            from     (   select PLOT_VALUE,  
	                            					CYCLE_ACT_DATE,
                                                    WORKFLOW_TYPE, 
                                                    SUB_TYPE,
                                                    cycle_date, 
                                                    bill_sig_amt, 
                                                    cycle_time_volume
	                                                           
                                             from IOCT_INV_REGION_CA A,
                                                    UDAC_GROUP_NAME_CA UG
                                               WHERE  
                                               ('ALL' in ({{products}})
												OR  UG.UDAC_GROUP IN ({{products}}))
			                                    AND  (        ({time} = 'MONTH' AND to_date(CYCLE_YYYYMM ,'YYYYMM') = to_date(to_char(sysdate,'YYYYMM') ,'YYYYMM'))
                                                          OR  ({time} = 'WEEK' AND to_date(CYCLE_YYYYMM ,'YYYYMM') between  to_date(to_char(add_months(sysdate,-2),'YYYYMM'),'YYYYMM')   and  to_date(to_char(sysdate,'YYYYMM') ,'YYYYMM'))
                                                          OR  ({time} = 'YEAR' AND to_date(CYCLE_YYYYMM ,'YYYYMM') between  to_date(to_char(add_months(sysdate,-11),'YYYYMM'),'YYYYMM')   and  to_date(to_char(sysdate,'YYYYMM') ,'YYYYMM'))
                                                     )
				                                AND PLOT_TIME = {time}
				                                AND WORKFLOW_TYPE = {{workflow}}
	                                  			AND SUB_TYPE IN ({{subTypeArray}})
												AND A.UDAC_GROUP_NAME = UG.UDAC_GROUP_NAME
	                                      )
	                            PIVOT (SUM(BILL_SIG_AMT)   AS AMT_DAYS
	                                           ,   SUM(CYCLE_TIME_VOLUME) AS VOL_DAYS
	                                    FOR   (PLOT_VALUE, WORKFLOW_TYPE, SUB_TYPE) IN (
		                                                                                    ('EAST', 'NEWITM', 'Normal') AS E_N_N,
		                                                                                    ('EAST', 'NEWITM', 'EUE') AS E_N_E,
		                                                                                    ('EAST', 'CHGFCLTR', 'Simple') AS E_C_S,
		                                                                                    ('EAST', 'CHGFCLTR', 'Medium') AS E_C_M,
		                                                                                    ('EAST', 'CHGFCLTR', 'Complex') AS E_C_C,
		                                                                                    ('EAST', 'CHGFCLTR', 'Total') AS E_C_T,
		                                                                                    ('EAST', 'ESCAL', 'Simple') AS E_E_S,
		                                                                                    ('EAST', 'ESCAL', 'Medium') AS E_E_M,
		                                                                                    ('EAST', 'ESCAL', 'Complex') AS E_E_C,
		                                                                                    ('EAST', 'ESCAL', 'Total') AS E_E_T,
		                                                                                    ('WEST', 'NEWITM', 'Normal') AS W_N_N,
		                                                                                    ('WEST', 'NEWITM', 'EUE') AS W_N_E,
		                                                                                    ('WEST', 'CHGFCLTR', 'Simple') AS W_C_S,
		                                                                                    ('WEST', 'CHGFCLTR', 'Medium') AS W_C_M,
		                                                                                    ('WEST', 'CHGFCLTR', 'Complex') AS W_C_C,
		                                                                                    ('WEST', 'CHGFCLTR', 'Total') AS W_C_T,
		                                                                                    ('WEST', 'ESCAL', 'Simple') AS W_E_S,
		                                                                                    ('WEST', 'ESCAL', 'Medium') AS W_E_M,
		                                                                                    ('WEST', 'ESCAL', 'Complex') AS W_E_C,
		                                                                                    ('WEST', 'ESCAL', 'Total') AS W_E_T,
		                                                                                    ('OOR', 'NEWITM', 'Normal') AS O_N_N,
		                                                                                    ('OOR', 'NEWITM', 'EUE') AS O_N_E,
		                                                                                    ('OOR', 'CHGFCLTR', 'Simple') AS O_C_S,
		                                                                                    ('OOR', 'CHGFCLTR', 'Medium') AS O_C_M,
		                                                                                    ('OOR', 'CHGFCLTR', 'Complex') AS O_C_C,
		                                                                                    ('OOR', 'CHGFCLTR', 'Total') AS O_C_T,
		                                                                                    ('OOR', 'ESCAL', 'Simple') AS O_E_S,
		                                                                                    ('OOR', 'ESCAL', 'Medium') AS O_E_M,
		                                                                                    ('OOR', 'ESCAL', 'Complex') AS O_E_C,
		                                                                                    ('OOR', 'ESCAL', 'Total') AS O_E_T
	                                                                                    )
	                            )
	      )
	   )result
    ORDER BY CYCLE_ACT_DATE
]]></statement>
<statement code="IOCT_Inv_Category_Chart_Query"><![CDATA[

 select result. *,
(C_N_N_AMT_DAYS + C_N_E_AMT_DAYS+ C_C_S_AMT_DAYS + C_C_M_AMT_DAYS + C_C_C_AMT_DAYS + C_C_T_AMT_DAYS + C_E_S_AMT_DAYS + C_E_M_AMT_DAYS + C_E_C_AMT_DAYS + C_E_T_AMT_DAYS) core_amt_days,
(P_N_N_AMT_DAYS+P_N_E_AMT_DAYS+P_C_S_AMT_DAYS+P_C_M_AMT_DAYS+P_C_C_AMT_DAYS+P_C_T_AMT_DAYS+P_E_S_AMT_DAYS+P_E_M_AMT_DAYS+P_E_C_AMT_DAYS+P_E_T_AMT_DAYS) premium_amt_days,
(C_N_N_VOL_DAYS + C_N_E_VOL_DAYS+ C_C_S_VOL_DAYS + C_C_M_VOL_DAYS + C_C_C_VOL_DAYS + C_C_T_VOL_DAYS + C_E_S_VOL_DAYS + C_E_M_VOL_DAYS + C_E_C_VOL_DAYS + C_E_T_VOL_DAYS) core_VOL_DAYS,
(P_N_N_VOL_DAYS+P_N_E_VOL_DAYS+P_C_S_VOL_DAYS+P_C_M_VOL_DAYS+P_C_C_VOL_DAYS+P_C_T_VOL_DAYS+P_E_S_VOL_DAYS+P_E_M_VOL_DAYS+P_E_C_VOL_DAYS+P_E_T_VOL_DAYS) premium_VOL_DAYS
from(           
	   select CYCLE_DATE,
	   		  CYCLE_ACT_DATE,
	       NVL( C_N_N_AMT_DAYS,0)  C_N_N_AMT_DAYS,
	       NVL( C_N_E_AMT_DAYS,0)  C_N_E_AMT_DAYS,
	       NVL( C_C_S_AMT_DAYS,0)  C_C_S_AMT_DAYS,
	       NVL( C_C_M_AMT_DAYS,0)  C_C_M_AMT_DAYS,
	       NVL( C_C_C_AMT_DAYS,0)  C_C_C_AMT_DAYS,
	       NVL( C_C_T_AMT_DAYS,0)  C_C_T_AMT_DAYS,
	       NVL( C_E_S_AMT_DAYS,0)  C_E_S_AMT_DAYS,
	       NVL( C_E_M_AMT_DAYS,0)  C_E_M_AMT_DAYS,
	       NVL( C_E_C_AMT_DAYS,0)  C_E_C_AMT_DAYS,
	       NVL( C_E_T_AMT_DAYS,0)  C_E_T_AMT_DAYS,
	       NVL(P_N_N_AMT_DAYS,0) P_N_N_AMT_DAYS,
	       NVL(P_N_E_AMT_DAYS,0) P_N_E_AMT_DAYS,
	       NVL(P_C_S_AMT_DAYS,0) P_C_S_AMT_DAYS,
	       NVL(P_C_M_AMT_DAYS,0) P_C_M_AMT_DAYS,
	       NVL(P_C_C_AMT_DAYS,0) P_C_C_AMT_DAYS,
	       NVL(P_C_T_AMT_DAYS,0) P_C_T_AMT_DAYS,
	       NVL(P_E_S_AMT_DAYS,0) P_E_S_AMT_DAYS,
	       NVL(P_E_M_AMT_DAYS,0) P_E_M_AMT_DAYS,
	       NVL(P_E_C_AMT_DAYS,0) P_E_C_AMT_DAYS,
	       NVL(P_E_T_AMT_DAYS,0) P_E_T_AMT_DAYS,
	       NVL( C_N_N_VOL_DAYS,0)  C_N_N_VOL_DAYS,
	       NVL( C_N_E_VOL_DAYS,0)  C_N_E_VOL_DAYS,
	       NVL( C_C_S_VOL_DAYS,0)  C_C_S_VOL_DAYS,
	       NVL( C_C_M_VOL_DAYS,0)  C_C_M_VOL_DAYS,
	       NVL( C_C_C_VOL_DAYS,0)  C_C_C_VOL_DAYS,
	       NVL( C_C_T_VOL_DAYS,0)  C_C_T_VOL_DAYS,
	       NVL( C_E_S_VOL_DAYS,0)  C_E_S_VOL_DAYS,
	       NVL( C_E_M_VOL_DAYS,0)  C_E_M_VOL_DAYS,
	       NVL( C_E_C_VOL_DAYS,0)  C_E_C_VOL_DAYS,
	       NVL( C_E_T_VOL_DAYS,0)  C_E_T_VOL_DAYS,
	       NVL(P_N_N_VOL_DAYS,0) P_N_N_VOL_DAYS,
	       NVL(P_N_E_VOL_DAYS,0) P_N_E_VOL_DAYS,
	       NVL(P_C_S_VOL_DAYS,0) P_C_S_VOL_DAYS,
	       NVL(P_C_M_VOL_DAYS,0) P_C_M_VOL_DAYS,
	       NVL(P_C_C_VOL_DAYS,0) P_C_C_VOL_DAYS,
	       NVL(P_C_T_VOL_DAYS,0) P_C_T_VOL_DAYS,
	       NVL(P_E_S_VOL_DAYS,0) P_E_S_VOL_DAYS,
	       NVL(P_E_M_VOL_DAYS,0) P_E_M_VOL_DAYS,
	       NVL(P_E_C_VOL_DAYS,0) P_E_C_VOL_DAYS,
	       NVL(P_E_T_VOL_DAYS,0) P_E_T_VOL_DAYS
	                                 
	       from (  select   *
	               from (select PLOT_VALUE, 
	               				CYCLE_ACT_DATE,
	                                           WORKFLOW_TYPE, 
	                                           SUB_TYPE,
	                                           cycle_date, 
	                                           bill_sig_amt, 
	                                           cycle_time_volume
	                                  from IOCT_INV_CATEGORY_CA 
	                                  WHERE 
	                                  DB_REGION IN ({{regions}})
	                                  AND WORKFLOW_TYPE = {{workflow}}
	                                  AND SUB_TYPE IN ({{subTypeArray}})
	                                  AND  (        ({time} = 'MONTH' AND to_date(CYCLE_YYYYMM ,'YYYYMM')  = to_date(to_char(sysdate,'YYYYMM') ,'YYYYMM'))
	                                            OR  ({time} = 'WEEK' AND to_date(CYCLE_YYYYMM ,'YYYYMM') between  to_date(to_char(add_months(sysdate,-2),'YYYYMM'),'YYYYMM')   and  to_date(to_char(sysdate,'YYYYMM') ,'YYYYMM'))
	                                            OR  ({time} = 'YEAR' AND to_date(CYCLE_YYYYMM ,'YYYYMM') between  to_date(to_char(add_months(sysdate,-11),'YYYYMM'),'YYYYMM')   and  to_date(to_char(sysdate,'YYYYMM') ,'YYYYMM'))
	                                        )
	                                   
	                                  AND PLOT_TIME = {{time}}
	                        )
	              PIVOT (SUM(BILL_SIG_AMT)   AS AMT_DAYS 
	                     ,   SUM(CYCLE_TIME_VOLUME) AS VOL_DAYS
	              				FOR   (PLOT_VALUE, WORKFLOW_TYPE, SUB_TYPE) IN (
		                                                                      ('C', 'NEWITM', 'Normal') AS C_N_N,
		                                                                      ('C', 'NEWITM', 'EUE') AS C_N_E,
		                                                                      ('C', 'CHGFCLTR', 'Simple') AS C_C_S,
		                                                                      ('C', 'CHGFCLTR', 'Medium') AS C_C_M,
		                                                                      ('C', 'CHGFCLTR', 'Complex') AS C_C_C,
		                                                                      ('C', 'CHGFCLTR', 'Total') AS C_C_T,
		                                                                      ('C', 'ESCAL', 'Simple') AS C_E_S,
		                                                                      ('C', 'ESCAL', 'Medium') AS C_E_M,
		                                                                      ('C', 'ESCAL', 'Complex') AS C_E_C,
		                                                                      ('C', 'ESCAL', 'Total') AS C_E_T,
		                                                                      ('P', 'NEWITM', 'Normal') AS P_N_N,
		                                                                      ('P', 'NEWITM', 'EUE') AS P_N_E,
		                                                                      ('P', 'CHGFCLTR', 'Simple') AS P_C_S,
		                                                                      ('P', 'CHGFCLTR', 'Medium') AS P_C_M,
		                                                                      ('P', 'CHGFCLTR', 'Complex') AS P_C_C,
		                                                                      ('P', 'CHGFCLTR', 'Total') AS P_C_T,
		                                                                      ('P', 'ESCAL', 'Simple') AS P_E_S,
		                                                                      ('P', 'ESCAL', 'Medium') AS P_E_M,
		                                                                      ('P', 'ESCAL', 'Complex') AS P_E_C,
		                                                                      ('P', 'ESCAL', 'Total') AS P_E_T
	                                                                      )
	                  )
	            )
	       )result
    ORDER BY CYCLE_ACT_DATE
                   

]]></statement>
<statement code="IOCT_Inv_Product_chart_Query"><![CDATA[
select
     CYCLE_DATE,
     SUM(NVL("2_VOL_DAYS",0)) "2_VOL_DAYS",
     SUM(NVL("3_VOL_DAYS",0)) "3_VOL_DAYS",
     SUM(NVL("4_VOL_DAYS",0)) "4_VOL_DAYS",
     SUM(NVL("6_VOL_DAYS",0)) "6_VOL_DAYS",
     SUM(NVL("7_VOL_DAYS",0)) "7_VOL_DAYS",
     SUM(NVL("8_VOL_DAYS",0)) "8_VOL_DAYS",
     SUM(NVL("9_VOL_DAYS",0)) "9_VOL_DAYS",
     SUM(NVL("12_VOL_DAYS",0)) "12_VOL_DAYS",
     SUM(NVL("13_VOL_DAYS",0)) "13_VOL_DAYS",
     SUM(NVL("14_VOL_DAYS",0)) "14_VOL_DAYS",
     SUM(NVL("15_VOL_DAYS",0)) "15_VOL_DAYS",
     SUM(NVL("16_VOL_DAYS",0)) "16_VOL_DAYS",
     SUM(NVL("17_VOL_DAYS",0)) "17_VOL_DAYS",
     SUM(NVL("18_VOL_DAYS",0)) "18_VOL_DAYS",
     SUM(NVL("19_VOL_DAYS",0)) "19_VOL_DAYS",
     SUM(NVL("23_VOL_DAYS",0)) "23_VOL_DAYS",
     SUM(NVL("25_VOL_DAYS",0)) "25_VOL_DAYS",
     SUM(NVL("26_VOL_DAYS",0)) "26_VOL_DAYS",
     SUM(NVL("27_VOL_DAYS",0)) "27_VOL_DAYS",
     SUM(NVL("32_VOL_DAYS",0)) "32_VOL_DAYS",
     SUM(NVL("35_VOL_DAYS",0)) "35_VOL_DAYS",
     SUM(NVL("39_VOL_DAYS",0)) "39_VOL_DAYS",
     SUM(NVL("40_VOL_DAYS",0)) "40_VOL_DAYS",
     SUM(NVL("41_VOL_DAYS",0)) "41_VOL_DAYS",
     SUM(NVL("42_VOL_DAYS",0)) "42_VOL_DAYS",
     SUM(NVL("43_VOL_DAYS",0)) "43_VOL_DAYS",
     SUM(NVL("44_VOL_DAYS",0)) "44_VOL_DAYS",
     SUM(NVL("45_VOL_DAYS",0)) "45_VOL_DAYS",
     SUM(NVL("46_VOL_DAYS",0)) "46_VOL_DAYS",
     SUM(NVL("47_VOL_DAYS",0)) "47_VOL_DAYS",
     SUM(NVL("48_VOL_DAYS",0)) "48_VOL_DAYS",
     SUM(NVL("49_VOL_DAYS",0)) "49_VOL_DAYS",
     SUM(NVL("50_VOL_DAYS",0)) "50_VOL_DAYS",
     SUM(NVL("51_VOL_DAYS",0)) "51_VOL_DAYS",
     SUM(NVL("52_VOL_DAYS",0)) "52_VOL_DAYS",
     SUM(NVL("53_VOL_DAYS",0)) "53_VOL_DAYS",
     SUM(NVL("54_VOL_DAYS",0)) "54_VOL_DAYS",
     SUM(NVL("55_VOL_DAYS",0)) "55_VOL_DAYS",
     SUM(NVL("56_VOL_DAYS",0)) "56_VOL_DAYS",
     SUM(NVL("57_VOL_DAYS",0)) "57_VOL_DAYS",
     SUM(NVL("58_VOL_DAYS",0)) "58_VOL_DAYS",
     SUM(NVL("59_VOL_DAYS",0)) "59_VOL_DAYS",
     SUM(NVL("60_VOL_DAYS",0)) "60_VOL_DAYS",
     SUM(NVL("61_VOL_DAYS",0)) "61_VOL_DAYS",
     SUM(NVL("62_VOL_DAYS",0)) "62_VOL_DAYS",
     SUM(NVL("63_VOL_DAYS",0)) "63_VOL_DAYS",
     SUM(NVL("64_VOL_DAYS",0)) "64_VOL_DAYS",
     SUM(NVL("65_VOL_DAYS",0)) "65_VOL_DAYS",
     SUM(NVL("66_VOL_DAYS",0)) "66_VOL_DAYS",
     SUM(NVL("67_VOL_DAYS",0)) "67_VOL_DAYS",
     SUM(NVL("68_VOL_DAYS",0)) "68_VOL_DAYS",
     SUM(NVL("69_VOL_DAYS",0)) "69_VOL_DAYS",
     SUM(NVL("70_VOL_DAYS",0)) "70_VOL_DAYS",

     SUM(NVL("2_TOT_DAYS",0)) "2_TOT_DAYS",
     SUM(NVL("3_TOT_DAYS",0)) "3_TOT_DAYS",
     SUM(NVL("4_TOT_DAYS",0)) "4_TOT_DAYS",
     SUM(NVL("6_TOT_DAYS",0)) "6_TOT_DAYS",
     SUM(NVL("7_TOT_DAYS",0)) "7_TOT_DAYS",
     SUM(NVL("8_TOT_DAYS",0)) "8_TOT_DAYS",
     SUM(NVL("9_TOT_DAYS",0)) "9_TOT_DAYS",
     SUM(NVL("12_TOT_DAYS",0)) "12_TOT_DAYS",
     SUM(NVL("13_TOT_DAYS",0)) "13_TOT_DAYS",
     SUM(NVL("14_TOT_DAYS",0)) "14_TOT_DAYS",
     SUM(NVL("15_TOT_DAYS",0)) "15_TOT_DAYS",
     SUM(NVL("16_TOT_DAYS",0)) "16_TOT_DAYS",
     SUM(NVL("17_TOT_DAYS",0)) "17_TOT_DAYS",
     SUM(NVL("18_TOT_DAYS",0)) "18_TOT_DAYS",
     SUM(NVL("19_TOT_DAYS",0)) "19_TOT_DAYS",
     SUM(NVL("23_TOT_DAYS",0)) "23_TOT_DAYS",
     SUM(NVL("25_TOT_DAYS",0)) "25_TOT_DAYS",
     SUM(NVL("26_TOT_DAYS",0)) "26_TOT_DAYS",
     SUM(NVL("27_TOT_DAYS",0)) "27_TOT_DAYS",
     SUM(NVL("32_TOT_DAYS",0)) "32_TOT_DAYS",
     SUM(NVL("35_TOT_DAYS",0)) "35_TOT_DAYS",
     SUM(NVL("39_TOT_DAYS",0)) "39_TOT_DAYS",
     SUM(NVL("40_TOT_DAYS",0)) "40_TOT_DAYS",
     SUM(NVL("41_TOT_DAYS",0)) "41_TOT_DAYS",
     SUM(NVL("42_TOT_DAYS",0)) "42_TOT_DAYS",
     SUM(NVL("43_TOT_DAYS",0)) "43_TOT_DAYS",
     SUM(NVL("44_TOT_DAYS",0)) "44_TOT_DAYS",
     SUM(NVL("45_TOT_DAYS",0)) "45_TOT_DAYS",
     SUM(NVL("46_TOT_DAYS",0)) "46_TOT_DAYS",
     SUM(NVL("47_TOT_DAYS",0)) "47_TOT_DAYS",
     SUM(NVL("48_TOT_DAYS",0)) "48_TOT_DAYS",
     SUM(NVL("49_TOT_DAYS",0)) "49_TOT_DAYS",
     SUM(NVL("50_TOT_DAYS",0)) "50_TOT_DAYS",
     SUM(NVL("51_TOT_DAYS",0)) "51_TOT_DAYS",
     SUM(NVL("52_TOT_DAYS",0)) "52_TOT_DAYS",
     SUM(NVL("53_TOT_DAYS",0)) "53_TOT_DAYS",
     SUM(NVL("54_TOT_DAYS",0)) "54_TOT_DAYS",
     SUM(NVL("55_TOT_DAYS",0)) "55_TOT_DAYS",
     SUM(NVL("56_TOT_DAYS",0)) "56_TOT_DAYS",
     SUM(NVL("57_TOT_DAYS",0)) "57_TOT_DAYS",
     SUM(NVL("58_TOT_DAYS",0)) "58_TOT_DAYS",
     SUM(NVL("59_TOT_DAYS",0)) "59_TOT_DAYS",
     SUM(NVL("60_TOT_DAYS",0)) "60_TOT_DAYS",
     SUM(NVL("61_TOT_DAYS",0)) "61_TOT_DAYS",
     SUM(NVL("62_TOT_DAYS",0)) "62_TOT_DAYS",
     SUM(NVL("63_TOT_DAYS",0)) "63_TOT_DAYS",
     SUM(NVL("64_TOT_DAYS",0)) "64_TOT_DAYS",
     SUM(NVL("65_TOT_DAYS",0)) "65_TOT_DAYS",
     SUM(NVL("66_TOT_DAYS",0)) "66_TOT_DAYS",
     SUM(NVL("67_TOT_DAYS",0)) "67_TOT_DAYS",
     SUM(NVL("68_TOT_DAYS",0)) "68_TOT_DAYS",
     SUM(NVL("69_TOT_DAYS",0)) "69_TOT_DAYS",
     SUM(NVL("70_TOT_DAYS",0)) "70_TOT_DAYS",

     SUM(NVL(CASE WHEN SUB_TYPE = 'Simple' THEN "2_VOL_DAYS" ELSE 0 END,0)) "2_VOL_DAYS_S",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Simple' THEN "3_VOL_DAYS" ELSE 0 END,0)) "3_VOL_DAYS_S",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Simple' THEN "4_VOL_DAYS" ELSE 0 END,0)) "4_VOL_DAYS_S",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Simple' THEN "6_VOL_DAYS" ELSE 0 END,0)) "6_VOL_DAYS_S",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Simple' THEN "7_VOL_DAYS" ELSE 0 END,0)) "7_VOL_DAYS_S",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Simple' THEN "8_VOL_DAYS" ELSE 0 END,0)) "8_VOL_DAYS_S",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Simple' THEN "9_VOL_DAYS" ELSE 0 END,0)) "9_VOL_DAYS_S",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Simple' THEN "12_VOL_DAYS" ELSE 0 END,0)) "12_VOL_DAYS_S",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Simple' THEN "13_VOL_DAYS" ELSE 0 END,0)) "13_VOL_DAYS_S",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Simple' THEN "14_VOL_DAYS" ELSE 0 END,0)) "14_VOL_DAYS_S",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Simple' THEN "15_VOL_DAYS" ELSE 0 END,0)) "15_VOL_DAYS_S",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Simple' THEN "16_VOL_DAYS" ELSE 0 END,0)) "16_VOL_DAYS_S",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Simple' THEN "17_VOL_DAYS" ELSE 0 END,0)) "17_VOL_DAYS_S",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Simple' THEN "18_VOL_DAYS" ELSE 0 END,0)) "18_VOL_DAYS_S",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Simple' THEN "19_VOL_DAYS" ELSE 0 END,0)) "19_VOL_DAYS_S",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Simple' THEN "23_VOL_DAYS" ELSE 0 END,0)) "23_VOL_DAYS_S",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Simple' THEN "25_VOL_DAYS" ELSE 0 END,0)) "25_VOL_DAYS_S",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Simple' THEN "26_VOL_DAYS" ELSE 0 END,0)) "26_VOL_DAYS_S",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Simple' THEN "27_VOL_DAYS" ELSE 0 END,0)) "27_VOL_DAYS_S",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Simple' THEN "32_VOL_DAYS" ELSE 0 END,0)) "32_VOL_DAYS_S",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Simple' THEN "35_VOL_DAYS" ELSE 0 END,0)) "35_VOL_DAYS_S",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Simple' THEN "39_VOL_DAYS" ELSE 0 END,0)) "39_VOL_DAYS_S",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Simple' THEN "40_VOL_DAYS" ELSE 0 END,0)) "40_VOL_DAYS_S",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Simple' THEN "41_VOL_DAYS" ELSE 0 END,0)) "41_VOL_DAYS_S",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Simple' THEN "42_VOL_DAYS" ELSE 0 END,0)) "42_VOL_DAYS_S",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Simple' THEN "43_VOL_DAYS" ELSE 0 END,0)) "43_VOL_DAYS_S",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Simple' THEN "44_VOL_DAYS" ELSE 0 END,0)) "44_VOL_DAYS_S",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Simple' THEN "45_VOL_DAYS" ELSE 0 END,0)) "45_VOL_DAYS_S",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Simple' THEN "46_VOL_DAYS" ELSE 0 END,0)) "46_VOL_DAYS_S",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Simple' THEN "47_VOL_DAYS" ELSE 0 END,0)) "47_VOL_DAYS_S",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Simple' THEN "48_VOL_DAYS" ELSE 0 END,0)) "48_VOL_DAYS_S",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Simple' THEN "49_VOL_DAYS" ELSE 0 END,0)) "49_VOL_DAYS_S",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Simple' THEN "50_VOL_DAYS" ELSE 0 END,0)) "50_VOL_DAYS_S",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Simple' THEN "51_VOL_DAYS" ELSE 0 END,0)) "51_VOL_DAYS_S",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Simple' THEN "52_VOL_DAYS" ELSE 0 END,0)) "52_VOL_DAYS_S",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Simple' THEN "53_VOL_DAYS" ELSE 0 END,0)) "53_VOL_DAYS_S",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Simple' THEN "54_VOL_DAYS" ELSE 0 END,0)) "54_VOL_DAYS_S",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Simple' THEN "55_VOL_DAYS" ELSE 0 END,0)) "55_VOL_DAYS_S",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Simple' THEN "56_VOL_DAYS" ELSE 0 END,0)) "56_VOL_DAYS_S",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Simple' THEN "57_VOL_DAYS" ELSE 0 END,0)) "57_VOL_DAYS_S",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Simple' THEN "58_VOL_DAYS" ELSE 0 END,0)) "58_VOL_DAYS_S",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Simple' THEN "59_VOL_DAYS" ELSE 0 END,0)) "59_VOL_DAYS_S",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Simple' THEN "60_VOL_DAYS" ELSE 0 END,0)) "60_VOL_DAYS_S",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Simple' THEN "61_VOL_DAYS" ELSE 0 END,0)) "61_VOL_DAYS_S",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Simple' THEN "62_VOL_DAYS" ELSE 0 END,0)) "62_VOL_DAYS_S",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Simple' THEN "63_VOL_DAYS" ELSE 0 END,0)) "63_VOL_DAYS_S",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Simple' THEN "64_VOL_DAYS" ELSE 0 END,0)) "64_VOL_DAYS_S",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Simple' THEN "65_VOL_DAYS" ELSE 0 END,0)) "65_VOL_DAYS_S",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Simple' THEN "66_VOL_DAYS" ELSE 0 END,0)) "66_VOL_DAYS_S",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Simple' THEN "67_VOL_DAYS" ELSE 0 END,0)) "67_VOL_DAYS_S",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Simple' THEN "68_VOL_DAYS" ELSE 0 END,0)) "68_VOL_DAYS_S",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Simple' THEN "69_VOL_DAYS" ELSE 0 END,0)) "69_VOL_DAYS_S",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Simple' THEN "70_VOL_DAYS" ELSE 0 END,0)) "70_VOL_DAYS_S",

     SUM(NVL(CASE WHEN SUB_TYPE = 'Simple' THEN "2_TOT_DAYS" ELSE 0 END,0)) "2_TOT_DAYS_S",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Simple' THEN "3_TOT_DAYS" ELSE 0 END,0)) "3_TOT_DAYS_S",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Simple' THEN "4_TOT_DAYS" ELSE 0 END,0)) "4_TOT_DAYS_S",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Simple' THEN "6_TOT_DAYS" ELSE 0 END,0)) "6_TOT_DAYS_S",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Simple' THEN "7_TOT_DAYS" ELSE 0 END,0)) "7_TOT_DAYS_S",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Simple' THEN "8_TOT_DAYS" ELSE 0 END,0)) "8_TOT_DAYS_S",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Simple' THEN "9_TOT_DAYS" ELSE 0 END,0)) "9_TOT_DAYS_S",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Simple' THEN "12_TOT_DAYS" ELSE 0 END,0)) "12_TOT_DAYS_S",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Simple' THEN "13_TOT_DAYS" ELSE 0 END,0)) "13_TOT_DAYS_S",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Simple' THEN "14_TOT_DAYS" ELSE 0 END,0)) "14_TOT_DAYS_S",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Simple' THEN "15_TOT_DAYS" ELSE 0 END,0)) "15_TOT_DAYS_S",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Simple' THEN "16_TOT_DAYS" ELSE 0 END,0)) "16_TOT_DAYS_S",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Simple' THEN "17_TOT_DAYS" ELSE 0 END,0)) "17_TOT_DAYS_S",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Simple' THEN "18_TOT_DAYS" ELSE 0 END,0)) "18_TOT_DAYS_S",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Simple' THEN "19_TOT_DAYS" ELSE 0 END,0)) "19_TOT_DAYS_S",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Simple' THEN "23_TOT_DAYS" ELSE 0 END,0)) "23_TOT_DAYS_S",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Simple' THEN "25_TOT_DAYS" ELSE 0 END,0)) "25_TOT_DAYS_S",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Simple' THEN "26_TOT_DAYS" ELSE 0 END,0)) "26_TOT_DAYS_S",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Simple' THEN "27_TOT_DAYS" ELSE 0 END,0)) "27_TOT_DAYS_S",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Simple' THEN "32_TOT_DAYS" ELSE 0 END,0)) "32_TOT_DAYS_S",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Simple' THEN "35_TOT_DAYS" ELSE 0 END,0)) "35_TOT_DAYS_S",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Simple' THEN "39_TOT_DAYS" ELSE 0 END,0)) "39_TOT_DAYS_S",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Simple' THEN "40_TOT_DAYS" ELSE 0 END,0)) "40_TOT_DAYS_S",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Simple' THEN "41_TOT_DAYS" ELSE 0 END,0)) "41_TOT_DAYS_S",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Simple' THEN "42_TOT_DAYS" ELSE 0 END,0)) "42_TOT_DAYS_S",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Simple' THEN "43_TOT_DAYS" ELSE 0 END,0)) "43_TOT_DAYS_S",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Simple' THEN "44_TOT_DAYS" ELSE 0 END,0)) "44_TOT_DAYS_S",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Simple' THEN "45_TOT_DAYS" ELSE 0 END,0)) "45_TOT_DAYS_S",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Simple' THEN "46_TOT_DAYS" ELSE 0 END,0)) "46_TOT_DAYS_S",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Simple' THEN "47_TOT_DAYS" ELSE 0 END,0)) "47_TOT_DAYS_S",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Simple' THEN "48_TOT_DAYS" ELSE 0 END,0)) "48_TOT_DAYS_S",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Simple' THEN "49_TOT_DAYS" ELSE 0 END,0)) "49_TOT_DAYS_S",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Simple' THEN "50_TOT_DAYS" ELSE 0 END,0)) "50_TOT_DAYS_S",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Simple' THEN "51_TOT_DAYS" ELSE 0 END,0)) "51_TOT_DAYS_S",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Simple' THEN "52_TOT_DAYS" ELSE 0 END,0)) "52_TOT_DAYS_S",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Simple' THEN "53_TOT_DAYS" ELSE 0 END,0)) "53_TOT_DAYS_S",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Simple' THEN "54_TOT_DAYS" ELSE 0 END,0)) "54_TOT_DAYS_S",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Simple' THEN "55_TOT_DAYS" ELSE 0 END,0)) "55_TOT_DAYS_S",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Simple' THEN "56_TOT_DAYS" ELSE 0 END,0)) "56_TOT_DAYS_S",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Simple' THEN "57_TOT_DAYS" ELSE 0 END,0)) "57_TOT_DAYS_S",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Simple' THEN "58_TOT_DAYS" ELSE 0 END,0)) "58_TOT_DAYS_S",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Simple' THEN "59_TOT_DAYS" ELSE 0 END,0)) "59_TOT_DAYS_S",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Simple' THEN "60_TOT_DAYS" ELSE 0 END,0)) "60_TOT_DAYS_S",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Simple' THEN "61_TOT_DAYS" ELSE 0 END,0)) "61_TOT_DAYS_S",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Simple' THEN "62_TOT_DAYS" ELSE 0 END,0)) "62_TOT_DAYS_S",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Simple' THEN "63_TOT_DAYS" ELSE 0 END,0)) "63_TOT_DAYS_S",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Simple' THEN "64_TOT_DAYS" ELSE 0 END,0)) "64_TOT_DAYS_S",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Simple' THEN "65_TOT_DAYS" ELSE 0 END,0)) "65_TOT_DAYS_S",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Simple' THEN "66_TOT_DAYS" ELSE 0 END,0)) "66_TOT_DAYS_S",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Simple' THEN "67_TOT_DAYS" ELSE 0 END,0)) "67_TOT_DAYS_S",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Simple' THEN "68_TOT_DAYS" ELSE 0 END,0)) "68_TOT_DAYS_S",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Simple' THEN "69_TOT_DAYS" ELSE 0 END,0)) "69_TOT_DAYS_S",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Simple' THEN "70_TOT_DAYS" ELSE 0 END,0)) "70_TOT_DAYS_S",

     SUM(NVL(CASE WHEN SUB_TYPE = 'Medium' THEN "2_VOL_DAYS" ELSE 0 END,0)) "2_VOL_DAYS_M",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Medium' THEN "3_VOL_DAYS" ELSE 0 END,0)) "3_VOL_DAYS_M",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Medium' THEN "4_VOL_DAYS" ELSE 0 END,0)) "4_VOL_DAYS_M",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Medium' THEN "6_VOL_DAYS" ELSE 0 END,0)) "6_VOL_DAYS_M",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Medium' THEN "7_VOL_DAYS" ELSE 0 END,0)) "7_VOL_DAYS_M",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Medium' THEN "8_VOL_DAYS" ELSE 0 END,0)) "8_VOL_DAYS_M",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Medium' THEN "9_VOL_DAYS" ELSE 0 END,0)) "9_VOL_DAYS_M",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Medium' THEN "12_VOL_DAYS" ELSE 0 END,0)) "12_VOL_DAYS_M",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Medium' THEN "13_VOL_DAYS" ELSE 0 END,0)) "13_VOL_DAYS_M",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Medium' THEN "14_VOL_DAYS" ELSE 0 END,0)) "14_VOL_DAYS_M",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Medium' THEN "15_VOL_DAYS" ELSE 0 END,0)) "15_VOL_DAYS_M",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Medium' THEN "16_VOL_DAYS" ELSE 0 END,0)) "16_VOL_DAYS_M",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Medium' THEN "17_VOL_DAYS" ELSE 0 END,0)) "17_VOL_DAYS_M",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Medium' THEN "18_VOL_DAYS" ELSE 0 END,0)) "18_VOL_DAYS_M",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Medium' THEN "19_VOL_DAYS" ELSE 0 END,0)) "19_VOL_DAYS_M",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Medium' THEN "23_VOL_DAYS" ELSE 0 END,0)) "23_VOL_DAYS_M",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Medium' THEN "25_VOL_DAYS" ELSE 0 END,0)) "25_VOL_DAYS_M",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Medium' THEN "26_VOL_DAYS" ELSE 0 END,0)) "26_VOL_DAYS_M",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Medium' THEN "27_VOL_DAYS" ELSE 0 END,0)) "27_VOL_DAYS_M",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Medium' THEN "32_VOL_DAYS" ELSE 0 END,0)) "32_VOL_DAYS_M",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Medium' THEN "35_VOL_DAYS" ELSE 0 END,0)) "35_VOL_DAYS_M",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Medium' THEN "39_VOL_DAYS" ELSE 0 END,0)) "39_VOL_DAYS_M",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Medium' THEN "40_VOL_DAYS" ELSE 0 END,0)) "40_VOL_DAYS_M",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Medium' THEN "41_VOL_DAYS" ELSE 0 END,0)) "41_VOL_DAYS_M",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Medium' THEN "42_VOL_DAYS" ELSE 0 END,0)) "42_VOL_DAYS_M",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Medium' THEN "43_VOL_DAYS" ELSE 0 END,0)) "43_VOL_DAYS_M",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Medium' THEN "44_VOL_DAYS" ELSE 0 END,0)) "44_VOL_DAYS_M",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Medium' THEN "45_VOL_DAYS" ELSE 0 END,0)) "45_VOL_DAYS_M",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Medium' THEN "46_VOL_DAYS" ELSE 0 END,0)) "46_VOL_DAYS_M",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Medium' THEN "47_VOL_DAYS" ELSE 0 END,0)) "47_VOL_DAYS_M",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Medium' THEN "48_VOL_DAYS" ELSE 0 END,0)) "48_VOL_DAYS_M",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Medium' THEN "49_VOL_DAYS" ELSE 0 END,0)) "49_VOL_DAYS_M",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Medium' THEN "50_VOL_DAYS" ELSE 0 END,0)) "50_VOL_DAYS_M",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Medium' THEN "51_VOL_DAYS" ELSE 0 END,0)) "51_VOL_DAYS_M",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Medium' THEN "52_VOL_DAYS" ELSE 0 END,0)) "52_VOL_DAYS_M",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Medium' THEN "53_VOL_DAYS" ELSE 0 END,0)) "53_VOL_DAYS_M",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Medium' THEN "54_VOL_DAYS" ELSE 0 END,0)) "54_VOL_DAYS_M",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Medium' THEN "55_VOL_DAYS" ELSE 0 END,0)) "55_VOL_DAYS_M",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Medium' THEN "56_VOL_DAYS" ELSE 0 END,0)) "56_VOL_DAYS_M",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Medium' THEN "57_VOL_DAYS" ELSE 0 END,0)) "57_VOL_DAYS_M",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Medium' THEN "58_VOL_DAYS" ELSE 0 END,0)) "58_VOL_DAYS_M",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Medium' THEN "59_VOL_DAYS" ELSE 0 END,0)) "59_VOL_DAYS_M",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Medium' THEN "60_VOL_DAYS" ELSE 0 END,0)) "60_VOL_DAYS_M",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Medium' THEN "61_VOL_DAYS" ELSE 0 END,0)) "61_VOL_DAYS_M",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Medium' THEN "62_VOL_DAYS" ELSE 0 END,0)) "62_VOL_DAYS_M",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Medium' THEN "63_VOL_DAYS" ELSE 0 END,0)) "63_VOL_DAYS_M",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Medium' THEN "64_VOL_DAYS" ELSE 0 END,0)) "64_VOL_DAYS_M",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Medium' THEN "65_VOL_DAYS" ELSE 0 END,0)) "65_VOL_DAYS_M",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Medium' THEN "66_VOL_DAYS" ELSE 0 END,0)) "66_VOL_DAYS_M",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Medium' THEN "67_VOL_DAYS" ELSE 0 END,0)) "67_VOL_DAYS_M",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Medium' THEN "68_VOL_DAYS" ELSE 0 END,0)) "68_VOL_DAYS_M",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Medium' THEN "69_VOL_DAYS" ELSE 0 END,0)) "69_VOL_DAYS_M",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Medium' THEN "70_VOL_DAYS" ELSE 0 END,0)) "70_VOL_DAYS_M",

     SUM(NVL(CASE WHEN SUB_TYPE = 'Medium' THEN "2_TOT_DAYS" ELSE 0 END,0)) "2_TOT_DAYS_M",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Medium' THEN "3_TOT_DAYS" ELSE 0 END,0)) "3_TOT_DAYS_M",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Medium' THEN "4_TOT_DAYS" ELSE 0 END,0)) "4_TOT_DAYS_M",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Medium' THEN "6_TOT_DAYS" ELSE 0 END,0)) "6_TOT_DAYS_M",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Medium' THEN "7_TOT_DAYS" ELSE 0 END,0)) "7_TOT_DAYS_M",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Medium' THEN "8_TOT_DAYS" ELSE 0 END,0)) "8_TOT_DAYS_M",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Medium' THEN "9_TOT_DAYS" ELSE 0 END,0)) "9_TOT_DAYS_M",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Medium' THEN "12_TOT_DAYS" ELSE 0 END,0)) "12_TOT_DAYS_M",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Medium' THEN "13_TOT_DAYS" ELSE 0 END,0)) "13_TOT_DAYS_M",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Medium' THEN "14_TOT_DAYS" ELSE 0 END,0)) "14_TOT_DAYS_M",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Medium' THEN "15_TOT_DAYS" ELSE 0 END,0)) "15_TOT_DAYS_M",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Medium' THEN "16_TOT_DAYS" ELSE 0 END,0)) "16_TOT_DAYS_M",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Medium' THEN "17_TOT_DAYS" ELSE 0 END,0)) "17_TOT_DAYS_M",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Medium' THEN "18_TOT_DAYS" ELSE 0 END,0)) "18_TOT_DAYS_M",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Medium' THEN "19_TOT_DAYS" ELSE 0 END,0)) "19_TOT_DAYS_M",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Medium' THEN "23_TOT_DAYS" ELSE 0 END,0)) "23_TOT_DAYS_M",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Medium' THEN "25_TOT_DAYS" ELSE 0 END,0)) "25_TOT_DAYS_M",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Medium' THEN "26_TOT_DAYS" ELSE 0 END,0)) "26_TOT_DAYS_M",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Medium' THEN "27_TOT_DAYS" ELSE 0 END,0)) "27_TOT_DAYS_M",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Medium' THEN "32_TOT_DAYS" ELSE 0 END,0)) "32_TOT_DAYS_M",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Medium' THEN "35_TOT_DAYS" ELSE 0 END,0)) "35_TOT_DAYS_M",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Medium' THEN "39_TOT_DAYS" ELSE 0 END,0)) "39_TOT_DAYS_M",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Medium' THEN "40_TOT_DAYS" ELSE 0 END,0)) "40_TOT_DAYS_M",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Medium' THEN "41_TOT_DAYS" ELSE 0 END,0)) "41_TOT_DAYS_M",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Medium' THEN "42_TOT_DAYS" ELSE 0 END,0)) "42_TOT_DAYS_M",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Medium' THEN "43_TOT_DAYS" ELSE 0 END,0)) "43_TOT_DAYS_M",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Medium' THEN "44_TOT_DAYS" ELSE 0 END,0)) "44_TOT_DAYS_M",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Medium' THEN "45_TOT_DAYS" ELSE 0 END,0)) "45_TOT_DAYS_M",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Medium' THEN "46_TOT_DAYS" ELSE 0 END,0)) "46_TOT_DAYS_M",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Medium' THEN "47_TOT_DAYS" ELSE 0 END,0)) "47_TOT_DAYS_M",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Medium' THEN "48_TOT_DAYS" ELSE 0 END,0)) "48_TOT_DAYS_M",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Medium' THEN "49_TOT_DAYS" ELSE 0 END,0)) "49_TOT_DAYS_M",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Medium' THEN "50_TOT_DAYS" ELSE 0 END,0)) "50_TOT_DAYS_M",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Medium' THEN "51_TOT_DAYS" ELSE 0 END,0)) "51_TOT_DAYS_M",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Medium' THEN "52_TOT_DAYS" ELSE 0 END,0)) "52_TOT_DAYS_M",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Medium' THEN "53_TOT_DAYS" ELSE 0 END,0)) "53_TOT_DAYS_M",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Medium' THEN "54_TOT_DAYS" ELSE 0 END,0)) "54_TOT_DAYS_M",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Medium' THEN "55_TOT_DAYS" ELSE 0 END,0)) "55_TOT_DAYS_M",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Medium' THEN "56_TOT_DAYS" ELSE 0 END,0)) "56_TOT_DAYS_M",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Medium' THEN "57_TOT_DAYS" ELSE 0 END,0)) "57_TOT_DAYS_M",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Medium' THEN "58_TOT_DAYS" ELSE 0 END,0)) "58_TOT_DAYS_M",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Medium' THEN "59_TOT_DAYS" ELSE 0 END,0)) "59_TOT_DAYS_M",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Medium' THEN "60_TOT_DAYS" ELSE 0 END,0)) "60_TOT_DAYS_M",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Medium' THEN "61_TOT_DAYS" ELSE 0 END,0)) "61_TOT_DAYS_M",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Medium' THEN "62_TOT_DAYS" ELSE 0 END,0)) "62_TOT_DAYS_M",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Medium' THEN "63_TOT_DAYS" ELSE 0 END,0)) "63_TOT_DAYS_M",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Medium' THEN "64_TOT_DAYS" ELSE 0 END,0)) "64_TOT_DAYS_M",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Medium' THEN "65_TOT_DAYS" ELSE 0 END,0)) "65_TOT_DAYS_M",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Medium' THEN "66_TOT_DAYS" ELSE 0 END,0)) "66_TOT_DAYS_M",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Medium' THEN "67_TOT_DAYS" ELSE 0 END,0)) "67_TOT_DAYS_M",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Medium' THEN "68_TOT_DAYS" ELSE 0 END,0)) "68_TOT_DAYS_M",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Medium' THEN "69_TOT_DAYS" ELSE 0 END,0)) "69_TOT_DAYS_M",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Medium' THEN "70_TOT_DAYS" ELSE 0 END,0)) "70_TOT_DAYS_M",

     SUM(NVL(CASE WHEN SUB_TYPE = 'Complex' THEN "2_VOL_DAYS" ELSE 0 END,0)) "2_VOL_DAYS_C",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Complex' THEN "3_VOL_DAYS" ELSE 0 END,0)) "3_VOL_DAYS_C",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Complex' THEN "4_VOL_DAYS" ELSE 0 END,0)) "4_VOL_DAYS_C",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Complex' THEN "6_VOL_DAYS" ELSE 0 END,0)) "6_VOL_DAYS_C",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Complex' THEN "7_VOL_DAYS" ELSE 0 END,0)) "7_VOL_DAYS_C",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Complex' THEN "8_VOL_DAYS" ELSE 0 END,0)) "8_VOL_DAYS_C",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Complex' THEN "9_VOL_DAYS" ELSE 0 END,0)) "9_VOL_DAYS_C",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Complex' THEN "12_VOL_DAYS" ELSE 0 END,0)) "12_VOL_DAYS_C",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Complex' THEN "13_VOL_DAYS" ELSE 0 END,0)) "13_VOL_DAYS_C",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Complex' THEN "14_VOL_DAYS" ELSE 0 END,0)) "14_VOL_DAYS_C",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Complex' THEN "15_VOL_DAYS" ELSE 0 END,0)) "15_VOL_DAYS_C",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Complex' THEN "16_VOL_DAYS" ELSE 0 END,0)) "16_VOL_DAYS_C",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Complex' THEN "17_VOL_DAYS" ELSE 0 END,0)) "17_VOL_DAYS_C",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Complex' THEN "18_VOL_DAYS" ELSE 0 END,0)) "18_VOL_DAYS_C",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Complex' THEN "19_VOL_DAYS" ELSE 0 END,0)) "19_VOL_DAYS_C",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Complex' THEN "23_VOL_DAYS" ELSE 0 END,0)) "23_VOL_DAYS_C",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Complex' THEN "25_VOL_DAYS" ELSE 0 END,0)) "25_VOL_DAYS_C",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Complex' THEN "26_VOL_DAYS" ELSE 0 END,0)) "26_VOL_DAYS_C",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Complex' THEN "27_VOL_DAYS" ELSE 0 END,0)) "27_VOL_DAYS_C",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Complex' THEN "32_VOL_DAYS" ELSE 0 END,0)) "32_VOL_DAYS_C",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Complex' THEN "35_VOL_DAYS" ELSE 0 END,0)) "35_VOL_DAYS_C",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Complex' THEN "39_VOL_DAYS" ELSE 0 END,0)) "39_VOL_DAYS_C",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Complex' THEN "40_VOL_DAYS" ELSE 0 END,0)) "40_VOL_DAYS_C",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Complex' THEN "41_VOL_DAYS" ELSE 0 END,0)) "41_VOL_DAYS_C",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Complex' THEN "42_VOL_DAYS" ELSE 0 END,0)) "42_VOL_DAYS_C",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Complex' THEN "43_VOL_DAYS" ELSE 0 END,0)) "43_VOL_DAYS_C",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Complex' THEN "44_VOL_DAYS" ELSE 0 END,0)) "44_VOL_DAYS_C",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Complex' THEN "45_VOL_DAYS" ELSE 0 END,0)) "45_VOL_DAYS_C",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Complex' THEN "46_VOL_DAYS" ELSE 0 END,0)) "46_VOL_DAYS_C",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Complex' THEN "47_VOL_DAYS" ELSE 0 END,0)) "47_VOL_DAYS_C",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Complex' THEN "48_VOL_DAYS" ELSE 0 END,0)) "48_VOL_DAYS_C",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Complex' THEN "49_VOL_DAYS" ELSE 0 END,0)) "49_VOL_DAYS_C",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Complex' THEN "50_VOL_DAYS" ELSE 0 END,0)) "50_VOL_DAYS_C",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Complex' THEN "51_VOL_DAYS" ELSE 0 END,0)) "51_VOL_DAYS_C",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Complex' THEN "52_VOL_DAYS" ELSE 0 END,0)) "52_VOL_DAYS_C",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Complex' THEN "53_VOL_DAYS" ELSE 0 END,0)) "53_VOL_DAYS_C",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Complex' THEN "54_VOL_DAYS" ELSE 0 END,0)) "54_VOL_DAYS_C",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Complex' THEN "55_VOL_DAYS" ELSE 0 END,0)) "55_VOL_DAYS_C",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Complex' THEN "56_VOL_DAYS" ELSE 0 END,0)) "56_VOL_DAYS_C",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Complex' THEN "57_VOL_DAYS" ELSE 0 END,0)) "57_VOL_DAYS_C",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Complex' THEN "58_VOL_DAYS" ELSE 0 END,0)) "58_VOL_DAYS_C",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Complex' THEN "59_VOL_DAYS" ELSE 0 END,0)) "59_VOL_DAYS_C",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Complex' THEN "60_VOL_DAYS" ELSE 0 END,0)) "60_VOL_DAYS_C",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Complex' THEN "61_VOL_DAYS" ELSE 0 END,0)) "61_VOL_DAYS_C",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Complex' THEN "62_VOL_DAYS" ELSE 0 END,0)) "62_VOL_DAYS_C",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Complex' THEN "63_VOL_DAYS" ELSE 0 END,0)) "63_VOL_DAYS_C",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Complex' THEN "64_VOL_DAYS" ELSE 0 END,0)) "64_VOL_DAYS_C",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Complex' THEN "65_VOL_DAYS" ELSE 0 END,0)) "65_VOL_DAYS_C",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Complex' THEN "66_VOL_DAYS" ELSE 0 END,0)) "66_VOL_DAYS_C",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Complex' THEN "67_VOL_DAYS" ELSE 0 END,0)) "67_VOL_DAYS_C",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Complex' THEN "68_VOL_DAYS" ELSE 0 END,0)) "68_VOL_DAYS_C",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Complex' THEN "69_VOL_DAYS" ELSE 0 END,0)) "69_VOL_DAYS_C",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Complex' THEN "70_VOL_DAYS" ELSE 0 END,0)) "70_VOL_DAYS_C",

     SUM(NVL(CASE WHEN SUB_TYPE = 'Complex' THEN "2_TOT_DAYS" ELSE 0 END,0)) "2_TOT_DAYS_C",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Complex' THEN "3_TOT_DAYS" ELSE 0 END,0)) "3_TOT_DAYS_C",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Complex' THEN "4_TOT_DAYS" ELSE 0 END,0)) "4_TOT_DAYS_C",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Complex' THEN "6_TOT_DAYS" ELSE 0 END,0)) "6_TOT_DAYS_C",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Complex' THEN "7_TOT_DAYS" ELSE 0 END,0)) "7_TOT_DAYS_C",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Complex' THEN "8_TOT_DAYS" ELSE 0 END,0)) "8_TOT_DAYS_C",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Complex' THEN "9_TOT_DAYS" ELSE 0 END,0)) "9_TOT_DAYS_C",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Complex' THEN "12_TOT_DAYS" ELSE 0 END,0)) "12_TOT_DAYS_C",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Complex' THEN "13_TOT_DAYS" ELSE 0 END,0)) "13_TOT_DAYS_C",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Complex' THEN "14_TOT_DAYS" ELSE 0 END,0)) "14_TOT_DAYS_C",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Complex' THEN "15_TOT_DAYS" ELSE 0 END,0)) "15_TOT_DAYS_C",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Complex' THEN "16_TOT_DAYS" ELSE 0 END,0)) "16_TOT_DAYS_C",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Complex' THEN "17_TOT_DAYS" ELSE 0 END,0)) "17_TOT_DAYS_C",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Complex' THEN "18_TOT_DAYS" ELSE 0 END,0)) "18_TOT_DAYS_C",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Complex' THEN "19_TOT_DAYS" ELSE 0 END,0)) "19_TOT_DAYS_C",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Complex' THEN "23_TOT_DAYS" ELSE 0 END,0)) "23_TOT_DAYS_C",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Complex' THEN "25_TOT_DAYS" ELSE 0 END,0)) "25_TOT_DAYS_C",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Complex' THEN "26_TOT_DAYS" ELSE 0 END,0)) "26_TOT_DAYS_C",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Complex' THEN "27_TOT_DAYS" ELSE 0 END,0)) "27_TOT_DAYS_C",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Complex' THEN "32_TOT_DAYS" ELSE 0 END,0)) "32_TOT_DAYS_C",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Complex' THEN "35_TOT_DAYS" ELSE 0 END,0)) "35_TOT_DAYS_C",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Complex' THEN "39_TOT_DAYS" ELSE 0 END,0)) "39_TOT_DAYS_C",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Complex' THEN "40_TOT_DAYS" ELSE 0 END,0)) "40_TOT_DAYS_C",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Complex' THEN "41_TOT_DAYS" ELSE 0 END,0)) "41_TOT_DAYS_C",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Complex' THEN "42_TOT_DAYS" ELSE 0 END,0)) "42_TOT_DAYS_C",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Complex' THEN "43_TOT_DAYS" ELSE 0 END,0)) "43_TOT_DAYS_C",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Complex' THEN "44_TOT_DAYS" ELSE 0 END,0)) "44_TOT_DAYS_C",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Complex' THEN "45_TOT_DAYS" ELSE 0 END,0)) "45_TOT_DAYS_C",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Complex' THEN "46_TOT_DAYS" ELSE 0 END,0)) "46_TOT_DAYS_C",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Complex' THEN "47_TOT_DAYS" ELSE 0 END,0)) "47_TOT_DAYS_C",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Complex' THEN "48_TOT_DAYS" ELSE 0 END,0)) "48_TOT_DAYS_C",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Complex' THEN "49_TOT_DAYS" ELSE 0 END,0)) "49_TOT_DAYS_C",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Complex' THEN "50_TOT_DAYS" ELSE 0 END,0)) "50_TOT_DAYS_C",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Complex' THEN "51_TOT_DAYS" ELSE 0 END,0)) "51_TOT_DAYS_C",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Complex' THEN "52_TOT_DAYS" ELSE 0 END,0)) "52_TOT_DAYS_C",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Complex' THEN "53_TOT_DAYS" ELSE 0 END,0)) "53_TOT_DAYS_C",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Complex' THEN "54_TOT_DAYS" ELSE 0 END,0)) "54_TOT_DAYS_C",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Complex' THEN "55_TOT_DAYS" ELSE 0 END,0)) "55_TOT_DAYS_C",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Complex' THEN "56_TOT_DAYS" ELSE 0 END,0)) "56_TOT_DAYS_C",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Complex' THEN "57_TOT_DAYS" ELSE 0 END,0)) "57_TOT_DAYS_C",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Complex' THEN "58_TOT_DAYS" ELSE 0 END,0)) "58_TOT_DAYS_C",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Complex' THEN "59_TOT_DAYS" ELSE 0 END,0)) "59_TOT_DAYS_C",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Complex' THEN "60_TOT_DAYS" ELSE 0 END,0)) "60_TOT_DAYS_C",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Complex' THEN "61_TOT_DAYS" ELSE 0 END,0)) "61_TOT_DAYS_C",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Complex' THEN "62_TOT_DAYS" ELSE 0 END,0)) "62_TOT_DAYS_C",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Complex' THEN "63_TOT_DAYS" ELSE 0 END,0)) "63_TOT_DAYS_C",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Complex' THEN "64_TOT_DAYS" ELSE 0 END,0)) "64_TOT_DAYS_C",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Complex' THEN "65_TOT_DAYS" ELSE 0 END,0)) "65_TOT_DAYS_C",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Complex' THEN "66_TOT_DAYS" ELSE 0 END,0)) "66_TOT_DAYS_C",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Complex' THEN "67_TOT_DAYS" ELSE 0 END,0)) "67_TOT_DAYS_C",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Complex' THEN "68_TOT_DAYS" ELSE 0 END,0)) "68_TOT_DAYS_C",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Complex' THEN "69_TOT_DAYS" ELSE 0 END,0)) "69_TOT_DAYS_C",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Complex' THEN "70_TOT_DAYS" ELSE 0 END,0)) "70_TOT_DAYS_C",

     SUM(NVL(CASE WHEN SUB_TYPE = 'Normal' THEN "2_VOL_DAYS" ELSE 0 END,0)) "2_VOL_DAYS_N",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Normal' THEN "3_VOL_DAYS" ELSE 0 END,0)) "3_VOL_DAYS_N",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Normal' THEN "4_VOL_DAYS" ELSE 0 END,0)) "4_VOL_DAYS_N",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Normal' THEN "6_VOL_DAYS" ELSE 0 END,0)) "6_VOL_DAYS_N",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Normal' THEN "7_VOL_DAYS" ELSE 0 END,0)) "7_VOL_DAYS_N",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Normal' THEN "8_VOL_DAYS" ELSE 0 END,0)) "8_VOL_DAYS_N",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Normal' THEN "9_VOL_DAYS" ELSE 0 END,0)) "9_VOL_DAYS_N",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Normal' THEN "12_VOL_DAYS" ELSE 0 END,0)) "12_VOL_DAYS_N",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Normal' THEN "13_VOL_DAYS" ELSE 0 END,0)) "13_VOL_DAYS_N",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Normal' THEN "14_VOL_DAYS" ELSE 0 END,0)) "14_VOL_DAYS_N",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Normal' THEN "15_VOL_DAYS" ELSE 0 END,0)) "15_VOL_DAYS_N",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Normal' THEN "16_VOL_DAYS" ELSE 0 END,0)) "16_VOL_DAYS_N",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Normal' THEN "17_VOL_DAYS" ELSE 0 END,0)) "17_VOL_DAYS_N",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Normal' THEN "18_VOL_DAYS" ELSE 0 END,0)) "18_VOL_DAYS_N",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Normal' THEN "19_VOL_DAYS" ELSE 0 END,0)) "19_VOL_DAYS_N",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Normal' THEN "23_VOL_DAYS" ELSE 0 END,0)) "23_VOL_DAYS_N",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Normal' THEN "25_VOL_DAYS" ELSE 0 END,0)) "25_VOL_DAYS_N",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Normal' THEN "26_VOL_DAYS" ELSE 0 END,0)) "26_VOL_DAYS_N",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Normal' THEN "27_VOL_DAYS" ELSE 0 END,0)) "27_VOL_DAYS_N",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Normal' THEN "32_VOL_DAYS" ELSE 0 END,0)) "32_VOL_DAYS_N",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Normal' THEN "35_VOL_DAYS" ELSE 0 END,0)) "35_VOL_DAYS_N",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Normal' THEN "39_VOL_DAYS" ELSE 0 END,0)) "39_VOL_DAYS_N",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Normal' THEN "40_VOL_DAYS" ELSE 0 END,0)) "40_VOL_DAYS_N",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Normal' THEN "41_VOL_DAYS" ELSE 0 END,0)) "41_VOL_DAYS_N",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Normal' THEN "42_VOL_DAYS" ELSE 0 END,0)) "42_VOL_DAYS_N",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Normal' THEN "43_VOL_DAYS" ELSE 0 END,0)) "43_VOL_DAYS_N",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Normal' THEN "44_VOL_DAYS" ELSE 0 END,0)) "44_VOL_DAYS_N",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Normal' THEN "45_VOL_DAYS" ELSE 0 END,0)) "45_VOL_DAYS_N",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Normal' THEN "46_VOL_DAYS" ELSE 0 END,0)) "46_VOL_DAYS_N",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Normal' THEN "47_VOL_DAYS" ELSE 0 END,0)) "47_VOL_DAYS_N",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Normal' THEN "48_VOL_DAYS" ELSE 0 END,0)) "48_VOL_DAYS_N",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Normal' THEN "49_VOL_DAYS" ELSE 0 END,0)) "49_VOL_DAYS_N",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Normal' THEN "50_VOL_DAYS" ELSE 0 END,0)) "50_VOL_DAYS_N",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Normal' THEN "51_VOL_DAYS" ELSE 0 END,0)) "51_VOL_DAYS_N",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Normal' THEN "52_VOL_DAYS" ELSE 0 END,0)) "52_VOL_DAYS_N",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Normal' THEN "53_VOL_DAYS" ELSE 0 END,0)) "53_VOL_DAYS_N",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Normal' THEN "54_VOL_DAYS" ELSE 0 END,0)) "54_VOL_DAYS_N",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Normal' THEN "55_VOL_DAYS" ELSE 0 END,0)) "55_VOL_DAYS_N",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Normal' THEN "56_VOL_DAYS" ELSE 0 END,0)) "56_VOL_DAYS_N",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Normal' THEN "57_VOL_DAYS" ELSE 0 END,0)) "57_VOL_DAYS_N",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Normal' THEN "58_VOL_DAYS" ELSE 0 END,0)) "58_VOL_DAYS_N",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Normal' THEN "59_VOL_DAYS" ELSE 0 END,0)) "59_VOL_DAYS_N",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Normal' THEN "60_VOL_DAYS" ELSE 0 END,0)) "60_VOL_DAYS_N",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Normal' THEN "61_VOL_DAYS" ELSE 0 END,0)) "61_VOL_DAYS_N",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Normal' THEN "62_VOL_DAYS" ELSE 0 END,0)) "62_VOL_DAYS_N",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Normal' THEN "63_VOL_DAYS" ELSE 0 END,0)) "63_VOL_DAYS_N",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Normal' THEN "64_VOL_DAYS" ELSE 0 END,0)) "64_VOL_DAYS_N",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Normal' THEN "65_VOL_DAYS" ELSE 0 END,0)) "65_VOL_DAYS_N",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Normal' THEN "66_VOL_DAYS" ELSE 0 END,0)) "66_VOL_DAYS_N",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Normal' THEN "67_VOL_DAYS" ELSE 0 END,0)) "67_VOL_DAYS_N",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Normal' THEN "68_VOL_DAYS" ELSE 0 END,0)) "68_VOL_DAYS_N",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Normal' THEN "69_VOL_DAYS" ELSE 0 END,0)) "69_VOL_DAYS_N",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Normal' THEN "70_VOL_DAYS" ELSE 0 END,0)) "70_VOL_DAYS_N",

     SUM(NVL(CASE WHEN SUB_TYPE = 'Normal' THEN "2_TOT_DAYS" ELSE 0 END,0)) "2_TOT_DAYS_N",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Normal' THEN "3_TOT_DAYS" ELSE 0 END,0)) "3_TOT_DAYS_N",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Normal' THEN "4_TOT_DAYS" ELSE 0 END,0)) "4_TOT_DAYS_N",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Normal' THEN "6_TOT_DAYS" ELSE 0 END,0)) "6_TOT_DAYS_N",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Normal' THEN "7_TOT_DAYS" ELSE 0 END,0)) "7_TOT_DAYS_N",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Normal' THEN "8_TOT_DAYS" ELSE 0 END,0)) "8_TOT_DAYS_N",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Normal' THEN "9_TOT_DAYS" ELSE 0 END,0)) "9_TOT_DAYS_N",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Normal' THEN "12_TOT_DAYS" ELSE 0 END,0)) "12_TOT_DAYS_N",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Normal' THEN "13_TOT_DAYS" ELSE 0 END,0)) "13_TOT_DAYS_N",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Normal' THEN "14_TOT_DAYS" ELSE 0 END,0)) "14_TOT_DAYS_N",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Normal' THEN "15_TOT_DAYS" ELSE 0 END,0)) "15_TOT_DAYS_N",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Normal' THEN "16_TOT_DAYS" ELSE 0 END,0)) "16_TOT_DAYS_N",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Normal' THEN "17_TOT_DAYS" ELSE 0 END,0)) "17_TOT_DAYS_N",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Normal' THEN "18_TOT_DAYS" ELSE 0 END,0)) "18_TOT_DAYS_N",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Normal' THEN "19_TOT_DAYS" ELSE 0 END,0)) "19_TOT_DAYS_N",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Normal' THEN "23_TOT_DAYS" ELSE 0 END,0)) "23_TOT_DAYS_N",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Normal' THEN "25_TOT_DAYS" ELSE 0 END,0)) "25_TOT_DAYS_N",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Normal' THEN "26_TOT_DAYS" ELSE 0 END,0)) "26_TOT_DAYS_N",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Normal' THEN "27_TOT_DAYS" ELSE 0 END,0)) "27_TOT_DAYS_N",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Normal' THEN "32_TOT_DAYS" ELSE 0 END,0)) "32_TOT_DAYS_N",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Normal' THEN "35_TOT_DAYS" ELSE 0 END,0)) "35_TOT_DAYS_N",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Normal' THEN "39_TOT_DAYS" ELSE 0 END,0)) "39_TOT_DAYS_N",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Normal' THEN "40_TOT_DAYS" ELSE 0 END,0)) "40_TOT_DAYS_N",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Normal' THEN "41_TOT_DAYS" ELSE 0 END,0)) "41_TOT_DAYS_N",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Normal' THEN "42_TOT_DAYS" ELSE 0 END,0)) "42_TOT_DAYS_N",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Normal' THEN "43_TOT_DAYS" ELSE 0 END,0)) "43_TOT_DAYS_N",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Normal' THEN "44_TOT_DAYS" ELSE 0 END,0)) "44_TOT_DAYS_N",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Normal' THEN "45_TOT_DAYS" ELSE 0 END,0)) "45_TOT_DAYS_N",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Normal' THEN "46_TOT_DAYS" ELSE 0 END,0)) "46_TOT_DAYS_N",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Normal' THEN "47_TOT_DAYS" ELSE 0 END,0)) "47_TOT_DAYS_N",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Normal' THEN "48_TOT_DAYS" ELSE 0 END,0)) "48_TOT_DAYS_N",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Normal' THEN "49_TOT_DAYS" ELSE 0 END,0)) "49_TOT_DAYS_N",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Normal' THEN "50_TOT_DAYS" ELSE 0 END,0)) "50_TOT_DAYS_N",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Normal' THEN "51_TOT_DAYS" ELSE 0 END,0)) "51_TOT_DAYS_N",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Normal' THEN "52_TOT_DAYS" ELSE 0 END,0)) "52_TOT_DAYS_N",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Normal' THEN "53_TOT_DAYS" ELSE 0 END,0)) "53_TOT_DAYS_N",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Normal' THEN "54_TOT_DAYS" ELSE 0 END,0)) "54_TOT_DAYS_N",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Normal' THEN "55_TOT_DAYS" ELSE 0 END,0)) "55_TOT_DAYS_N",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Normal' THEN "56_TOT_DAYS" ELSE 0 END,0)) "56_TOT_DAYS_N",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Normal' THEN "57_TOT_DAYS" ELSE 0 END,0)) "57_TOT_DAYS_N",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Normal' THEN "58_TOT_DAYS" ELSE 0 END,0)) "58_TOT_DAYS_N",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Normal' THEN "59_TOT_DAYS" ELSE 0 END,0)) "59_TOT_DAYS_N",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Normal' THEN "60_TOT_DAYS" ELSE 0 END,0)) "60_TOT_DAYS_N",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Normal' THEN "61_TOT_DAYS" ELSE 0 END,0)) "61_TOT_DAYS_N",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Normal' THEN "62_TOT_DAYS" ELSE 0 END,0)) "62_TOT_DAYS_N",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Normal' THEN "63_TOT_DAYS" ELSE 0 END,0)) "63_TOT_DAYS_N",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Normal' THEN "64_TOT_DAYS" ELSE 0 END,0)) "64_TOT_DAYS_N",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Normal' THEN "65_TOT_DAYS" ELSE 0 END,0)) "65_TOT_DAYS_N",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Normal' THEN "66_TOT_DAYS" ELSE 0 END,0)) "66_TOT_DAYS_N",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Normal' THEN "67_TOT_DAYS" ELSE 0 END,0)) "67_TOT_DAYS_N",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Normal' THEN "68_TOT_DAYS" ELSE 0 END,0)) "68_TOT_DAYS_N",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Normal' THEN "69_TOT_DAYS" ELSE 0 END,0)) "69_TOT_DAYS_N",
     SUM(NVL(CASE WHEN SUB_TYPE = 'Normal' THEN "70_TOT_DAYS" ELSE 0 END,0)) "70_TOT_DAYS_N",

     SUM(NVL(CASE WHEN SUB_TYPE = 'EUE' THEN "2_VOL_DAYS" ELSE 0 END,0)) "2_VOL_DAYS_E",
     SUM(NVL(CASE WHEN SUB_TYPE = 'EUE' THEN "3_VOL_DAYS" ELSE 0 END,0)) "3_VOL_DAYS_E",
     SUM(NVL(CASE WHEN SUB_TYPE = 'EUE' THEN "4_VOL_DAYS" ELSE 0 END,0)) "4_VOL_DAYS_E",
     SUM(NVL(CASE WHEN SUB_TYPE = 'EUE' THEN "6_VOL_DAYS" ELSE 0 END,0)) "6_VOL_DAYS_E",
     SUM(NVL(CASE WHEN SUB_TYPE = 'EUE' THEN "7_VOL_DAYS" ELSE 0 END,0)) "7_VOL_DAYS_E",
     SUM(NVL(CASE WHEN SUB_TYPE = 'EUE' THEN "8_VOL_DAYS" ELSE 0 END,0)) "8_VOL_DAYS_E",
     SUM(NVL(CASE WHEN SUB_TYPE = 'EUE' THEN "9_VOL_DAYS" ELSE 0 END,0)) "9_VOL_DAYS_E",
     SUM(NVL(CASE WHEN SUB_TYPE = 'EUE' THEN "12_VOL_DAYS" ELSE 0 END,0)) "12_VOL_DAYS_E",
     SUM(NVL(CASE WHEN SUB_TYPE = 'EUE' THEN "13_VOL_DAYS" ELSE 0 END,0)) "13_VOL_DAYS_E",
     SUM(NVL(CASE WHEN SUB_TYPE = 'EUE' THEN "14_VOL_DAYS" ELSE 0 END,0)) "14_VOL_DAYS_E",
     SUM(NVL(CASE WHEN SUB_TYPE = 'EUE' THEN "15_VOL_DAYS" ELSE 0 END,0)) "15_VOL_DAYS_E",
     SUM(NVL(CASE WHEN SUB_TYPE = 'EUE' THEN "16_VOL_DAYS" ELSE 0 END,0)) "16_VOL_DAYS_E",
     SUM(NVL(CASE WHEN SUB_TYPE = 'EUE' THEN "17_VOL_DAYS" ELSE 0 END,0)) "17_VOL_DAYS_E",
     SUM(NVL(CASE WHEN SUB_TYPE = 'EUE' THEN "18_VOL_DAYS" ELSE 0 END,0)) "18_VOL_DAYS_E",
     SUM(NVL(CASE WHEN SUB_TYPE = 'EUE' THEN "19_VOL_DAYS" ELSE 0 END,0)) "19_VOL_DAYS_E",
     SUM(NVL(CASE WHEN SUB_TYPE = 'EUE' THEN "23_VOL_DAYS" ELSE 0 END,0)) "23_VOL_DAYS_E",
     SUM(NVL(CASE WHEN SUB_TYPE = 'EUE' THEN "25_VOL_DAYS" ELSE 0 END,0)) "25_VOL_DAYS_E",
     SUM(NVL(CASE WHEN SUB_TYPE = 'EUE' THEN "26_VOL_DAYS" ELSE 0 END,0)) "26_VOL_DAYS_E",
     SUM(NVL(CASE WHEN SUB_TYPE = 'EUE' THEN "27_VOL_DAYS" ELSE 0 END,0)) "27_VOL_DAYS_E",
     SUM(NVL(CASE WHEN SUB_TYPE = 'EUE' THEN "32_VOL_DAYS" ELSE 0 END,0)) "32_VOL_DAYS_E",
     SUM(NVL(CASE WHEN SUB_TYPE = 'EUE' THEN "35_VOL_DAYS" ELSE 0 END,0)) "35_VOL_DAYS_E",
     SUM(NVL(CASE WHEN SUB_TYPE = 'EUE' THEN "39_VOL_DAYS" ELSE 0 END,0)) "39_VOL_DAYS_E",
     SUM(NVL(CASE WHEN SUB_TYPE = 'EUE' THEN "40_VOL_DAYS" ELSE 0 END,0)) "40_VOL_DAYS_E",
     SUM(NVL(CASE WHEN SUB_TYPE = 'EUE' THEN "41_VOL_DAYS" ELSE 0 END,0)) "41_VOL_DAYS_E",
     SUM(NVL(CASE WHEN SUB_TYPE = 'EUE' THEN "42_VOL_DAYS" ELSE 0 END,0)) "42_VOL_DAYS_E",
     SUM(NVL(CASE WHEN SUB_TYPE = 'EUE' THEN "43_VOL_DAYS" ELSE 0 END,0)) "43_VOL_DAYS_E",
     SUM(NVL(CASE WHEN SUB_TYPE = 'EUE' THEN "44_VOL_DAYS" ELSE 0 END,0)) "44_VOL_DAYS_E",
     SUM(NVL(CASE WHEN SUB_TYPE = 'EUE' THEN "45_VOL_DAYS" ELSE 0 END,0)) "45_VOL_DAYS_E",
     SUM(NVL(CASE WHEN SUB_TYPE = 'EUE' THEN "46_VOL_DAYS" ELSE 0 END,0)) "46_VOL_DAYS_E",
     SUM(NVL(CASE WHEN SUB_TYPE = 'EUE' THEN "47_VOL_DAYS" ELSE 0 END,0)) "47_VOL_DAYS_E",
     SUM(NVL(CASE WHEN SUB_TYPE = 'EUE' THEN "48_VOL_DAYS" ELSE 0 END,0)) "48_VOL_DAYS_E",
     SUM(NVL(CASE WHEN SUB_TYPE = 'EUE' THEN "49_VOL_DAYS" ELSE 0 END,0)) "49_VOL_DAYS_E",
     SUM(NVL(CASE WHEN SUB_TYPE = 'EUE' THEN "50_VOL_DAYS" ELSE 0 END,0)) "50_VOL_DAYS_E",
     SUM(NVL(CASE WHEN SUB_TYPE = 'EUE' THEN "51_VOL_DAYS" ELSE 0 END,0)) "51_VOL_DAYS_E",
     SUM(NVL(CASE WHEN SUB_TYPE = 'EUE' THEN "52_VOL_DAYS" ELSE 0 END,0)) "52_VOL_DAYS_E",
     SUM(NVL(CASE WHEN SUB_TYPE = 'EUE' THEN "53_VOL_DAYS" ELSE 0 END,0)) "53_VOL_DAYS_E",
     SUM(NVL(CASE WHEN SUB_TYPE = 'EUE' THEN "54_VOL_DAYS" ELSE 0 END,0)) "54_VOL_DAYS_E",
     SUM(NVL(CASE WHEN SUB_TYPE = 'EUE' THEN "55_VOL_DAYS" ELSE 0 END,0)) "55_VOL_DAYS_E",
     SUM(NVL(CASE WHEN SUB_TYPE = 'EUE' THEN "56_VOL_DAYS" ELSE 0 END,0)) "56_VOL_DAYS_E",
     SUM(NVL(CASE WHEN SUB_TYPE = 'EUE' THEN "57_VOL_DAYS" ELSE 0 END,0)) "57_VOL_DAYS_E",
     SUM(NVL(CASE WHEN SUB_TYPE = 'EUE' THEN "58_VOL_DAYS" ELSE 0 END,0)) "58_VOL_DAYS_E",
     SUM(NVL(CASE WHEN SUB_TYPE = 'EUE' THEN "59_VOL_DAYS" ELSE 0 END,0)) "59_VOL_DAYS_E",
     SUM(NVL(CASE WHEN SUB_TYPE = 'EUE' THEN "60_VOL_DAYS" ELSE 0 END,0)) "60_VOL_DAYS_E",
     SUM(NVL(CASE WHEN SUB_TYPE = 'EUE' THEN "61_VOL_DAYS" ELSE 0 END,0)) "61_VOL_DAYS_E",
     SUM(NVL(CASE WHEN SUB_TYPE = 'EUE' THEN "62_VOL_DAYS" ELSE 0 END,0)) "62_VOL_DAYS_E",
     SUM(NVL(CASE WHEN SUB_TYPE = 'EUE' THEN "63_VOL_DAYS" ELSE 0 END,0)) "63_VOL_DAYS_E",
     SUM(NVL(CASE WHEN SUB_TYPE = 'EUE' THEN "64_VOL_DAYS" ELSE 0 END,0)) "64_VOL_DAYS_E",
     SUM(NVL(CASE WHEN SUB_TYPE = 'EUE' THEN "65_VOL_DAYS" ELSE 0 END,0)) "65_VOL_DAYS_E",
     SUM(NVL(CASE WHEN SUB_TYPE = 'EUE' THEN "66_VOL_DAYS" ELSE 0 END,0)) "66_VOL_DAYS_E",
     SUM(NVL(CASE WHEN SUB_TYPE = 'EUE' THEN "67_VOL_DAYS" ELSE 0 END,0)) "67_VOL_DAYS_E",
     SUM(NVL(CASE WHEN SUB_TYPE = 'EUE' THEN "68_VOL_DAYS" ELSE 0 END,0)) "68_VOL_DAYS_E",
     SUM(NVL(CASE WHEN SUB_TYPE = 'EUE' THEN "69_VOL_DAYS" ELSE 0 END,0)) "69_VOL_DAYS_E",
     SUM(NVL(CASE WHEN SUB_TYPE = 'EUE' THEN "70_VOL_DAYS" ELSE 0 END,0)) "70_VOL_DAYS_E",

     SUM(NVL(CASE WHEN SUB_TYPE = 'EUE' THEN "2_TOT_DAYS" ELSE 0 END,0)) "2_TOT_DAYS_E",
     SUM(NVL(CASE WHEN SUB_TYPE = 'EUE' THEN "3_TOT_DAYS" ELSE 0 END,0)) "3_TOT_DAYS_E",
     SUM(NVL(CASE WHEN SUB_TYPE = 'EUE' THEN "4_TOT_DAYS" ELSE 0 END,0)) "4_TOT_DAYS_E",
     SUM(NVL(CASE WHEN SUB_TYPE = 'EUE' THEN "6_TOT_DAYS" ELSE 0 END,0)) "6_TOT_DAYS_E",
     SUM(NVL(CASE WHEN SUB_TYPE = 'EUE' THEN "7_TOT_DAYS" ELSE 0 END,0)) "7_TOT_DAYS_E",
     SUM(NVL(CASE WHEN SUB_TYPE = 'EUE' THEN "8_TOT_DAYS" ELSE 0 END,0)) "8_TOT_DAYS_E",
     SUM(NVL(CASE WHEN SUB_TYPE = 'EUE' THEN "9_TOT_DAYS" ELSE 0 END,0)) "9_TOT_DAYS_E",
     SUM(NVL(CASE WHEN SUB_TYPE = 'EUE' THEN "12_TOT_DAYS" ELSE 0 END,0)) "12_TOT_DAYS_E",
     SUM(NVL(CASE WHEN SUB_TYPE = 'EUE' THEN "13_TOT_DAYS" ELSE 0 END,0)) "13_TOT_DAYS_E",
     SUM(NVL(CASE WHEN SUB_TYPE = 'EUE' THEN "14_TOT_DAYS" ELSE 0 END,0)) "14_TOT_DAYS_E",
     SUM(NVL(CASE WHEN SUB_TYPE = 'EUE' THEN "15_TOT_DAYS" ELSE 0 END,0)) "15_TOT_DAYS_E",
     SUM(NVL(CASE WHEN SUB_TYPE = 'EUE' THEN "16_TOT_DAYS" ELSE 0 END,0)) "16_TOT_DAYS_E",
     SUM(NVL(CASE WHEN SUB_TYPE = 'EUE' THEN "17_TOT_DAYS" ELSE 0 END,0)) "17_TOT_DAYS_E",
     SUM(NVL(CASE WHEN SUB_TYPE = 'EUE' THEN "18_TOT_DAYS" ELSE 0 END,0)) "18_TOT_DAYS_E",
     SUM(NVL(CASE WHEN SUB_TYPE = 'EUE' THEN "19_TOT_DAYS" ELSE 0 END,0)) "19_TOT_DAYS_E",
     SUM(NVL(CASE WHEN SUB_TYPE = 'EUE' THEN "23_TOT_DAYS" ELSE 0 END,0)) "23_TOT_DAYS_E",
     SUM(NVL(CASE WHEN SUB_TYPE = 'EUE' THEN "25_TOT_DAYS" ELSE 0 END,0)) "25_TOT_DAYS_E",
     SUM(NVL(CASE WHEN SUB_TYPE = 'EUE' THEN "26_TOT_DAYS" ELSE 0 END,0)) "26_TOT_DAYS_E",
     SUM(NVL(CASE WHEN SUB_TYPE = 'EUE' THEN "27_TOT_DAYS" ELSE 0 END,0)) "27_TOT_DAYS_E",
     SUM(NVL(CASE WHEN SUB_TYPE = 'EUE' THEN "32_TOT_DAYS" ELSE 0 END,0)) "32_TOT_DAYS_E",
     SUM(NVL(CASE WHEN SUB_TYPE = 'EUE' THEN "35_TOT_DAYS" ELSE 0 END,0)) "35_TOT_DAYS_E",
     SUM(NVL(CASE WHEN SUB_TYPE = 'EUE' THEN "39_TOT_DAYS" ELSE 0 END,0)) "39_TOT_DAYS_E",
     SUM(NVL(CASE WHEN SUB_TYPE = 'EUE' THEN "40_TOT_DAYS" ELSE 0 END,0)) "40_TOT_DAYS_E",
     SUM(NVL(CASE WHEN SUB_TYPE = 'EUE' THEN "41_TOT_DAYS" ELSE 0 END,0)) "41_TOT_DAYS_E",
     SUM(NVL(CASE WHEN SUB_TYPE = 'EUE' THEN "42_TOT_DAYS" ELSE 0 END,0)) "42_TOT_DAYS_E",
     SUM(NVL(CASE WHEN SUB_TYPE = 'EUE' THEN "43_TOT_DAYS" ELSE 0 END,0)) "43_TOT_DAYS_E",
     SUM(NVL(CASE WHEN SUB_TYPE = 'EUE' THEN "44_TOT_DAYS" ELSE 0 END,0)) "44_TOT_DAYS_E",
     SUM(NVL(CASE WHEN SUB_TYPE = 'EUE' THEN "45_TOT_DAYS" ELSE 0 END,0)) "45_TOT_DAYS_E",
     SUM(NVL(CASE WHEN SUB_TYPE = 'EUE' THEN "46_TOT_DAYS" ELSE 0 END,0)) "46_TOT_DAYS_E",
     SUM(NVL(CASE WHEN SUB_TYPE = 'EUE' THEN "47_TOT_DAYS" ELSE 0 END,0)) "47_TOT_DAYS_E",
     SUM(NVL(CASE WHEN SUB_TYPE = 'EUE' THEN "48_TOT_DAYS" ELSE 0 END,0)) "48_TOT_DAYS_E",
     SUM(NVL(CASE WHEN SUB_TYPE = 'EUE' THEN "49_TOT_DAYS" ELSE 0 END,0)) "49_TOT_DAYS_E",
     SUM(NVL(CASE WHEN SUB_TYPE = 'EUE' THEN "50_TOT_DAYS" ELSE 0 END,0)) "50_TOT_DAYS_E",
     SUM(NVL(CASE WHEN SUB_TYPE = 'EUE' THEN "51_TOT_DAYS" ELSE 0 END,0)) "51_TOT_DAYS_E",
     SUM(NVL(CASE WHEN SUB_TYPE = 'EUE' THEN "52_TOT_DAYS" ELSE 0 END,0)) "52_TOT_DAYS_E",
     SUM(NVL(CASE WHEN SUB_TYPE = 'EUE' THEN "53_TOT_DAYS" ELSE 0 END,0)) "53_TOT_DAYS_E",
     SUM(NVL(CASE WHEN SUB_TYPE = 'EUE' THEN "54_TOT_DAYS" ELSE 0 END,0)) "54_TOT_DAYS_E",
     SUM(NVL(CASE WHEN SUB_TYPE = 'EUE' THEN "55_TOT_DAYS" ELSE 0 END,0)) "55_TOT_DAYS_E",
     SUM(NVL(CASE WHEN SUB_TYPE = 'EUE' THEN "56_TOT_DAYS" ELSE 0 END,0)) "56_TOT_DAYS_E",
     SUM(NVL(CASE WHEN SUB_TYPE = 'EUE' THEN "57_TOT_DAYS" ELSE 0 END,0)) "57_TOT_DAYS_E",
     SUM(NVL(CASE WHEN SUB_TYPE = 'EUE' THEN "58_TOT_DAYS" ELSE 0 END,0)) "58_TOT_DAYS_E",
     SUM(NVL(CASE WHEN SUB_TYPE = 'EUE' THEN "59_TOT_DAYS" ELSE 0 END,0)) "59_TOT_DAYS_E",
     SUM(NVL(CASE WHEN SUB_TYPE = 'EUE' THEN "60_TOT_DAYS" ELSE 0 END,0)) "60_TOT_DAYS_E",
     SUM(NVL(CASE WHEN SUB_TYPE = 'EUE' THEN "61_TOT_DAYS" ELSE 0 END,0)) "61_TOT_DAYS_E",
     SUM(NVL(CASE WHEN SUB_TYPE = 'EUE' THEN "62_TOT_DAYS" ELSE 0 END,0)) "62_TOT_DAYS_E",
     SUM(NVL(CASE WHEN SUB_TYPE = 'EUE' THEN "63_TOT_DAYS" ELSE 0 END,0)) "63_TOT_DAYS_E",
     SUM(NVL(CASE WHEN SUB_TYPE = 'EUE' THEN "64_TOT_DAYS" ELSE 0 END,0)) "64_TOT_DAYS_E",
     SUM(NVL(CASE WHEN SUB_TYPE = 'EUE' THEN "65_TOT_DAYS" ELSE 0 END,0)) "65_TOT_DAYS_E",
     SUM(NVL(CASE WHEN SUB_TYPE = 'EUE' THEN "66_TOT_DAYS" ELSE 0 END,0)) "66_TOT_DAYS_E",
     SUM(NVL(CASE WHEN SUB_TYPE = 'EUE' THEN "67_TOT_DAYS" ELSE 0 END,0)) "67_TOT_DAYS_E",
     SUM(NVL(CASE WHEN SUB_TYPE = 'EUE' THEN "68_TOT_DAYS" ELSE 0 END,0)) "68_TOT_DAYS_E",
     SUM(NVL(CASE WHEN SUB_TYPE = 'EUE' THEN "69_TOT_DAYS" ELSE 0 END,0)) "69_TOT_DAYS_E",
     SUM(NVL(CASE WHEN SUB_TYPE = 'EUE' THEN "70_TOT_DAYS" ELSE 0 END,0)) "70_TOT_DAYS_E",

     MAX("2_COLORS")     "2_COLORS",
     MAX("3_COLORS")     "3_COLORS",
     MAX("4_COLORS")     "4_COLORS",
     MAX("6_COLORS")     "6_COLORS",
     MAX("7_COLORS")     "7_COLORS",
     MAX("8_COLORS")     "8_COLORS",
     MAX("9_COLORS")     "9_COLORS",
     MAX("12_COLORS")    "12_COLORS",
     MAX("13_COLORS")    "13_COLORS",
     MAX("14_COLORS")    "14_COLORS",
     MAX("15_COLORS")    "15_COLORS",
     MAX("16_COLORS")    "16_COLORS",
     MAX("17_COLORS")    "17_COLORS",
     MAX("18_COLORS")    "18_COLORS",
     MAX("19_COLORS")    "19_COLORS",
     MAX("23_COLORS")    "23_COLORS",
     MAX("25_COLORS")    "25_COLORS",
     MAX("26_COLORS")    "26_COLORS",
     MAX("27_COLORS")    "27_COLORS",
     MAX("32_COLORS")    "32_COLORS",
     MAX("35_COLORS")    "35_COLORS",
     MAX("39_COLORS")    "39_COLORS",
     MAX("40_COLORS")    "40_COLORS",
     MAX("41_COLORS")    "41_COLORS",
     MAX("42_COLORS")    "42_COLORS",
     MAX("43_COLORS")    "43_COLORS",
     MAX("44_COLORS")    "44_COLORS",
     MAX("45_COLORS")    "45_COLORS",
     MAX("46_COLORS")    "46_COLORS",
     MAX("47_COLORS")    "47_COLORS",
     MAX("48_COLORS")    "48_COLORS",
     MAX("49_COLORS")    "49_COLORS",
     MAX("50_COLORS")    "50_COLORS",
     MAX("51_COLORS")    "51_COLORS",
     MAX("52_COLORS")    "52_COLORS",
     MAX("53_COLORS")    "53_COLORS",
     MAX("54_COLORS")    "54_COLORS",
     MAX("55_COLORS")    "55_COLORS",
     MAX("56_COLORS")    "56_COLORS",
     MAX("57_COLORS")    "57_COLORS",
     MAX("58_COLORS")    "58_COLORS",
     MAX("59_COLORS")    "59_COLORS",
     MAX("60_COLORS")    "60_COLORS",
     MAX("61_COLORS")    "61_COLORS",
     MAX("62_COLORS")    "62_COLORS",
     MAX("63_COLORS")    "63_COLORS",
     MAX("64_COLORS")    "64_COLORS",
     MAX("65_COLORS")    "65_COLORS",
     MAX("66_COLORS")    "66_COLORS",
     MAX("67_COLORS")    "67_COLORS",
     MAX("68_COLORS")    "68_COLORS",
     MAX("69_COLORS")    "69_COLORS",
     MAX("70_COLORS")    "70_COLORS",
     MAX("2_PRODUCT")    "2_PRODUCT",
     MAX("3_PRODUCT")    "3_PRODUCT",
     MAX("4_PRODUCT")    "4_PRODUCT",
     MAX("6_PRODUCT")    "6_PRODUCT",
     MAX("7_PRODUCT")    "7_PRODUCT",
     MAX("8_PRODUCT")    "8_PRODUCT",
     MAX("9_PRODUCT")    "9_PRODUCT",
     MAX("12_PRODUCT")   "12_PRODUCT",
     MAX("13_PRODUCT")   "13_PRODUCT",
     MAX("14_PRODUCT")   "14_PRODUCT",
     MAX("15_PRODUCT")   "15_PRODUCT",
     MAX("16_PRODUCT")   "16_PRODUCT",
     MAX("17_PRODUCT")   "17_PRODUCT",
     MAX("18_PRODUCT")   "18_PRODUCT",
     MAX("19_PRODUCT")   "19_PRODUCT",
     MAX("23_PRODUCT")   "23_PRODUCT",
     MAX("25_PRODUCT")   "25_PRODUCT",
     MAX("26_PRODUCT")   "26_PRODUCT",
     MAX("27_PRODUCT")   "27_PRODUCT",
     MAX("32_PRODUCT")   "32_PRODUCT",
     MAX("35_PRODUCT")   "35_PRODUCT",
     MAX("39_PRODUCT")   "39_PRODUCT",
     MAX("40_PRODUCT")   "40_PRODUCT",
     MAX("41_PRODUCT")   "41_PRODUCT",
     MAX("42_PRODUCT")   "42_PRODUCT",
     MAX("43_PRODUCT")   "43_PRODUCT",
     MAX("44_PRODUCT")   "44_PRODUCT",
     MAX("45_PRODUCT")   "45_PRODUCT",
     MAX("46_PRODUCT")   "46_PRODUCT",
     MAX("47_PRODUCT")   "47_PRODUCT",
     MAX("48_PRODUCT")   "48_PRODUCT",
     MAX("49_PRODUCT")   "49_PRODUCT",
     MAX("50_PRODUCT")   "50_PRODUCT",
     MAX("51_PRODUCT")   "51_PRODUCT",
     MAX("52_PRODUCT")   "52_PRODUCT",
     MAX("53_PRODUCT")   "53_PRODUCT",
     MAX("54_PRODUCT")   "54_PRODUCT",
     MAX("55_PRODUCT")   "55_PRODUCT",
     MAX("56_PRODUCT")   "56_PRODUCT",
     MAX("57_PRODUCT")   "57_PRODUCT",
     MAX("58_PRODUCT")   "58_PRODUCT",
     MAX("59_PRODUCT")   "59_PRODUCT",
     MAX("60_PRODUCT")   "60_PRODUCT",
     MAX("61_PRODUCT")   "61_PRODUCT",
     MAX("62_PRODUCT")   "62_PRODUCT",
     MAX("63_PRODUCT")   "63_PRODUCT",
     MAX("64_PRODUCT")   "64_PRODUCT",
     MAX("65_PRODUCT")   "65_PRODUCT",
     MAX("66_PRODUCT")   "66_PRODUCT",
     MAX("67_PRODUCT")   "67_PRODUCT",
     MAX("68_PRODUCT")   "68_PRODUCT",
     MAX("69_PRODUCT")   "69_PRODUCT",
     MAX("70_PRODUCT")   "70_PRODUCT"


      from (select CYCLE_DATE, BILL_SIG_AMT, CYCLE_ACT_DATE, CYCLE_TIME_VOLUME, COLORS.PLOT_COLOR PLOT_COLOR, GDATA.UDAC_GROUP_NAME UDAC_GROUP_NAME, UDAC_GROUP, SUB_TYPE
               FROM
           IOCT_INV_PRODUCT_CA A,
           (SELECT distinct(PLOT_VALUE), PLOT_COLOR, WORKFLOW_TYPE FROM IOCT_CHART_COLORS
            WHERE PLOT_TYPE = 'PRODUCT' and SUB_TYPE in ({{subTypeArray}}) and CHART_TYPE = 'I') COLORS,
           (SELECT
               UDAC_GROUP_NAME,
               UG.UDAC_GROUP
           FROM
               (SELECT
                   UDAC_GROUP
               FROM
                   UDAC_GROUP_CA
               WHERE
                   UDAC_IND4            IN ('C','P')
               GROUP BY
                   UDAC_GROUP) UG,
               UDAC_GROUP_NAME_CA UGN
           WHERE
               UG.UDAC_GROUP                = UGN.UDAC_GROUP) GDATA
       WHERE
           A.PLOT_VALUE            = GDATA.UDAC_GROUP_NAME
       AND A.PLOT_VALUE            = COLORS.PLOT_VALUE
       AND A.WORKFLOW_TYPE         = COLORS.WORKFLOW_TYPE

       AND DB_REGION IN ({{regions}})
       AND A.WORKFLOW_TYPE = {workflow}
       AND SUB_TYPE IN ({{subTypeArray}})
       AND  (   ({time} = 'MONTH' AND to_date(CYCLE_YYYYMM ,'YYYYMM') =  to_date(to_char(sysdate,'YYYYMM') ,'YYYYMM'))
            OR  ({time} = 'WEEK' AND to_date(CYCLE_YYYYMM ,'YYYYMM') between to_date(to_char(add_months(sysdate,-2),'YYYYMM'),'YYYYMM')  and to_date(to_char(sysdate,'YYYYMM') ,'YYYYMM'))
            OR  ({time} = 'YEAR' AND to_date(CYCLE_YYYYMM ,'YYYYMM') between to_date(to_char(add_months(sysdate,-11),'YYYYMM'),'YYYYMM') and to_date(to_char(sysdate,'YYYYMM') ,'YYYYMM'))
            )

       AND PLOT_TIME = {time}
    )
    PIVOT  (SUM(BILL_SIG_AMT)   AS TOT_DAYS
    ,   SUM(CYCLE_TIME_VOLUME) AS VOL_DAYS
    ,     MAX(PLOT_COLOR) AS COLORS
    ,      max(UDAC_GROUP_NAME) AS PRODUCT
    FOR   (UDAC_GROUP) IN (2, 3, 4, 6, 7, 8, 9, 12, 13, 14, 15, 16, 17, 18, 19
                , 23, 25, 26, 27, 32, 35, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48
                , 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64
                , 65, 66, 67, 68, 69, 70 )
     )

GROUP BY CYCLE_DATE,CYCLE_ACT_DATE
ORDER BY CYCLE_ACT_DATE                                                                                                             

]]></statement>
<statement code="IOCT_Region_Chart_Query"><![CDATA[
SELECT
	CYCLE_DATE,
	ROUND(CASE WHEN VOL_DAYS_EAST > 0 THEN AMT_DAYS_EAST / VOL_DAYS_EAST ELSE 0 END,1) EAST_VALUE,
	ROUND(CASE WHEN VOL_DAYS_WEST > 0 THEN AMT_DAYS_WEST / VOL_DAYS_WEST ELSE 0 END,1) WEST_VALUE,
	ROUND(CASE WHEN VOL_DAYS_OOR  > 0 THEN AMT_DAYS_OOR  / VOL_DAYS_OOR  ELSE 0 END,1) OOR_VALUE,
	ROUND(CASE WHEN VOL_DAYS_IR   > 0 THEN AMT_DAYS_IR   / VOL_DAYS_IR   ELSE 0 END,1) IR_VALUE,
	ROUND(CASE WHEN VOL_DAYS_ALL  > 0 THEN AMT_DAYS_ALL  / VOL_DAYS_ALL  ELSE 0 END,1) ALL_VALUE,
	VOL_DAYS_EAST,
	VOL_DAYS_WEST,
	VOL_DAYS_OOR,
	VOL_DAYS_IR,
    VOL_DAYS_ALL
FROM
(SELECT /*+ parallel(A,6) */
	CYCLE_DATE,
	SUM(CASE WHEN PLOT_VALUE = 'EAST'           THEN BILL_SIG_AMT ELSE 0 END) AMT_DAYS_EAST,
	SUM(CASE WHEN PLOT_VALUE = 'WEST'           THEN BILL_SIG_AMT ELSE 0 END) AMT_DAYS_WEST,
	SUM(CASE WHEN PLOT_VALUE = 'OOR'            THEN BILL_SIG_AMT ELSE 0 END) AMT_DAYS_OOR,
	SUM(CASE WHEN PLOT_VALUE IN ('EAST','WEST') THEN BILL_SIG_AMT ELSE 0 END) AMT_DAYS_IR,
    	SUM(BILL_SIG_AMT) AMT_DAYS_ALL,
	SUM(CASE WHEN PLOT_VALUE = 'EAST'           THEN CYCLE_TIME_VOLUME ELSE 0 END) VOL_DAYS_EAST,
	SUM(CASE WHEN PLOT_VALUE = 'WEST'           THEN CYCLE_TIME_VOLUME ELSE 0 END) VOL_DAYS_WEST,
	SUM(CASE WHEN PLOT_VALUE = 'OOR'            THEN CYCLE_TIME_VOLUME ELSE 0 END) VOL_DAYS_OOR,
	SUM(CASE WHEN PLOT_VALUE IN ('EAST','WEST') THEN CYCLE_TIME_VOLUME ELSE 0 END) VOL_DAYS_IR,
    	SUM(CYCLE_TIME_VOLUME) VOL_DAYS_ALL
FROM
	IOCT_CYCLE_REGION_MV A,
	UDAC_GROUP_NAME_CA UG
WHERE
('ALL' in ({{products}})
	OR  UG.UDAC_GROUP IN ({{products}}))
AND A.WORKFLOW_TYPE = {workflow}
AND (A.SUB_TYPE = {subType} or {subType} = 'All')
AND (({time}				= 'YEAR'
AND 'YEAR'				= TIME)
OR  ({time}				= 'MONTH'
AND CYCLE_YYYYMM			= {month}))
AND A.UDAC_GROUP_NAME = UG.UDAC_GROUP_NAME
GROUP BY
    CYCLE_DATE)
ORDER BY
	substr(cycle_date,4,4), substr(cycle_date,1,2)
      
]]></statement>  


<statement code="IOCT_Category_Chart_Query"><![CDATA[
SELECT
	CYCLE_DATE,
	ROUND(CASE WHEN VOL_DAYS_C    > 0 THEN AMT_DAYS_C / VOL_DAYS_C       ELSE 0 END,1) CORE_VALUE,
	ROUND(CASE WHEN VOL_DAYS_P    > 0 THEN AMT_DAYS_P / VOL_DAYS_P       ELSE 0 END,1) PREMIUM_VALUE,
	ROUND(CASE WHEN VOL_DAYS_ALL  > 0 THEN AMT_DAYS_ALL / VOL_DAYS_ALL   ELSE 0 END,1) ALL_VALUE,
	VOL_DAYS_C,
	VOL_DAYS_P,
	VOL_DAYS_ALL
FROM
(SELECT /*+ PARALLEL(A,6) */
	CYCLE_DATE,
	SUM(CASE WHEN PLOT_VALUE = 'C'           THEN BILL_SIG_AMT ELSE 0 END) AMT_DAYS_C,
	SUM(CASE WHEN PLOT_VALUE = 'P'           THEN BILL_SIG_AMT ELSE 0 END) AMT_DAYS_P,
    	SUM(BILL_SIG_AMT) AMT_DAYS_ALL,
	SUM(CASE WHEN PLOT_VALUE = 'C'           THEN CYCLE_TIME_VOLUME ELSE 0 END) VOL_DAYS_C,
	SUM(CASE WHEN PLOT_VALUE = 'P'           THEN CYCLE_TIME_VOLUME ELSE 0 END) VOL_DAYS_P,
    	SUM(CYCLE_TIME_VOLUME) VOL_DAYS_ALL
FROM
	IOCT_CYCLE_CATEGORY_MV A
WHERE
   DB_REGION IN ({{regions}})
AND A.WORKFLOW_TYPE = {workflow}
AND (A.SUB_TYPE = {subType} or {subType} = 'All')
AND (({time}				= 'YEAR'
AND 'YEAR'				= TIME)
OR  ({time}				= 'MONTH'
AND CYCLE_YYYYMM			= {month}))
GROUP BY
    CYCLE_DATE)
ORDER BY
	substr(cycle_date,4,4), substr(cycle_date,1,2)
]]></statement>  

<statement code="IOCT_Product_Chart_Query"><![CDATA[
SELECT
    CYCLE_DATE,
    ROUND(CASE WHEN VOL_DAYS_2 > 0  THEN TOT_DAYS_2  / VOL_DAYS_2 ELSE 0 END,1)                 AVG_DAYS_2,   
    ROUND(CASE WHEN VOL_DAYS_3 > 0  THEN TOT_DAYS_3  / VOL_DAYS_3 ELSE 0 END,1)                                  AVG_DAYS_3,   
    ROUND(CASE WHEN VOL_DAYS_4 > 0  THEN TOT_DAYS_4  / VOL_DAYS_4 ELSE 0 END,1)                                  AVG_DAYS_4,   
    ROUND(CASE WHEN VOL_DAYS_6 > 0  THEN TOT_DAYS_6  / VOL_DAYS_6 ELSE 0 END,1)                                        AVG_DAYS_6,   
    ROUND(CASE WHEN VOL_DAYS_7 > 0  THEN TOT_DAYS_7  / VOL_DAYS_7 ELSE 0 END,1)                                        AVG_DAYS_7,   
    ROUND(CASE WHEN VOL_DAYS_8 > 0  THEN TOT_DAYS_8  / VOL_DAYS_8 ELSE 0 END,1)                                     AVG_DAYS_8,   
    ROUND(CASE WHEN VOL_DAYS_9 > 0  THEN TOT_DAYS_9  / VOL_DAYS_9 ELSE 0 END,1)       AVG_DAYS_9,   
    ROUND(CASE WHEN VOL_DAYS_12 > 0 THEN TOT_DAYS_12 / VOL_DAYS_12 ELSE 0 END,1)                                                 AVG_DAYS_12,  
    ROUND(CASE WHEN VOL_DAYS_13 > 0 THEN TOT_DAYS_13 / VOL_DAYS_13 ELSE 0 END,1)                               AVG_DAYS_13,  
    ROUND(CASE WHEN VOL_DAYS_14 > 0 THEN TOT_DAYS_14 / VOL_DAYS_14 ELSE 0 END,1)                               AVG_DAYS_14,  
    ROUND(CASE WHEN VOL_DAYS_15 > 0 THEN TOT_DAYS_15 / VOL_DAYS_15 ELSE 0 END,1)                      AVG_DAYS_15,  
    ROUND(CASE WHEN VOL_DAYS_16 > 0 THEN TOT_DAYS_16 / VOL_DAYS_16 ELSE 0 END,1)                                     AVG_DAYS_16,  
    ROUND(CASE WHEN VOL_DAYS_17 > 0 THEN TOT_DAYS_17 / VOL_DAYS_17 ELSE 0 END,1)                         AVG_DAYS_17,  
    ROUND(CASE WHEN VOL_DAYS_18 > 0 THEN TOT_DAYS_18 / VOL_DAYS_18 ELSE 0 END,1)                                  AVG_DAYS_18,  
    ROUND(CASE WHEN VOL_DAYS_19 > 0 THEN TOT_DAYS_19 / VOL_DAYS_19 ELSE 0 END,1)                                  AVG_DAYS_19,  
    ROUND(CASE WHEN VOL_DAYS_23 > 0 THEN TOT_DAYS_23 / VOL_DAYS_23 ELSE 0 END,1)                                           AVG_DAYS_23,  
    ROUND(CASE WHEN VOL_DAYS_25 > 0 THEN TOT_DAYS_25 / VOL_DAYS_25 ELSE 0 END,1)                   AVG_DAYS_25,  
    ROUND(CASE WHEN VOL_DAYS_26 > 0 THEN TOT_DAYS_26 / VOL_DAYS_26 ELSE 0 END,1)                      AVG_DAYS_26,  
    ROUND(CASE WHEN VOL_DAYS_27 > 0 THEN TOT_DAYS_27 / VOL_DAYS_27 ELSE 0 END,1)                                           AVG_DAYS_27,  
    ROUND(CASE WHEN VOL_DAYS_32 > 0 THEN TOT_DAYS_32 / VOL_DAYS_32 ELSE 0 END,1)                      AVG_DAYS_32,  
    ROUND(CASE WHEN VOL_DAYS_35 > 0 THEN TOT_DAYS_35 / VOL_DAYS_35 ELSE 0 END,1)                                                 AVG_DAYS_35,  
    ROUND(CASE WHEN VOL_DAYS_39 > 0 THEN TOT_DAYS_39 / VOL_DAYS_39 ELSE 0 END,1)                                           AVG_DAYS_39,  
    ROUND(CASE WHEN VOL_DAYS_40 > 0 THEN TOT_DAYS_40 / VOL_DAYS_40 ELSE 0 END,1)                                           AVG_DAYS_40,  
    ROUND(CASE WHEN VOL_DAYS_41 > 0 THEN TOT_DAYS_41 / VOL_DAYS_41 ELSE 0 END,1)                                           AVG_DAYS_41,  
    ROUND(CASE WHEN VOL_DAYS_42 > 0 THEN TOT_DAYS_42 / VOL_DAYS_42 ELSE 0 END,1)                                           AVG_DAYS_42,  
    ROUND(CASE WHEN VOL_DAYS_43 > 0 THEN TOT_DAYS_43 / VOL_DAYS_43 ELSE 0 END,1)                                           AVG_DAYS_43,  
    ROUND(CASE WHEN VOL_DAYS_44 > 0 THEN TOT_DAYS_44 / VOL_DAYS_44 ELSE 0 END,1)                                           AVG_DAYS_44,  
    ROUND(CASE WHEN VOL_DAYS_45 > 0 THEN TOT_DAYS_45 / VOL_DAYS_45 ELSE 0 END,1)                                           AVG_DAYS_45,  
    ROUND(CASE WHEN VOL_DAYS_46 > 0 THEN TOT_DAYS_46 / VOL_DAYS_46 ELSE 0 END,1)                                           AVG_DAYS_46,  
    ROUND(CASE WHEN VOL_DAYS_47 > 0 THEN TOT_DAYS_47 / VOL_DAYS_47 ELSE 0 END,1)                                           AVG_DAYS_47,  
    ROUND(CASE WHEN VOL_DAYS_48 > 0 THEN TOT_DAYS_48 / VOL_DAYS_48 ELSE 0 END,1)                                           AVG_DAYS_48,  
    ROUND(CASE WHEN VOL_DAYS_49 > 0 THEN TOT_DAYS_49 / VOL_DAYS_49 ELSE 0 END,1)                                           AVG_DAYS_49,  
    ROUND(CASE WHEN VOL_DAYS_50 > 0 THEN TOT_DAYS_50 / VOL_DAYS_50 ELSE 0 END,1)                                           AVG_DAYS_50,  
    ROUND(CASE WHEN VOL_DAYS_51 > 0 THEN TOT_DAYS_51 / VOL_DAYS_51 ELSE 0 END,1)                                           AVG_DAYS_51,  
    ROUND(CASE WHEN VOL_DAYS_52 > 0 THEN TOT_DAYS_52 / VOL_DAYS_52 ELSE 0 END,1)                                           AVG_DAYS_52,  
    ROUND(CASE WHEN VOL_DAYS_53 > 0 THEN TOT_DAYS_53 / VOL_DAYS_53 ELSE 0 END,1)                                           AVG_DAYS_53,  
    ROUND(CASE WHEN VOL_DAYS_54 > 0 THEN TOT_DAYS_54 / VOL_DAYS_54 ELSE 0 END,1)                                           AVG_DAYS_54,  
    ROUND(CASE WHEN VOL_DAYS_55 > 0 THEN TOT_DAYS_55 / VOL_DAYS_55 ELSE 0 END,1)                                           AVG_DAYS_55,  
    ROUND(CASE WHEN VOL_DAYS_56 > 0 THEN TOT_DAYS_56 / VOL_DAYS_56 ELSE 0 END,1)                                           AVG_DAYS_56,  
    ROUND(CASE WHEN VOL_DAYS_57 > 0 THEN TOT_DAYS_57 / VOL_DAYS_57 ELSE 0 END,1)                                           AVG_DAYS_57,  
    ROUND(CASE WHEN VOL_DAYS_58 > 0 THEN TOT_DAYS_58 / VOL_DAYS_58 ELSE 0 END,1)                                           AVG_DAYS_58,  
    ROUND(CASE WHEN VOL_DAYS_59 > 0 THEN TOT_DAYS_59 / VOL_DAYS_59 ELSE 0 END,1)                                           AVG_DAYS_59,  
    ROUND(CASE WHEN VOL_DAYS_60 > 0 THEN TOT_DAYS_60 / VOL_DAYS_60 ELSE 0 END,1)                                           AVG_DAYS_60,  
    ROUND(CASE WHEN VOL_DAYS_61 > 0 THEN TOT_DAYS_61 / VOL_DAYS_61 ELSE 0 END,1)                                           AVG_DAYS_61,  
    ROUND(CASE WHEN VOL_DAYS_62 > 0 THEN TOT_DAYS_62 / VOL_DAYS_62 ELSE 0 END,1)                                           AVG_DAYS_62,  
    ROUND(CASE WHEN VOL_DAYS_63 > 0 THEN TOT_DAYS_63 / VOL_DAYS_63 ELSE 0 END,1)                                           AVG_DAYS_63,  
    ROUND(CASE WHEN VOL_DAYS_64 > 0 THEN TOT_DAYS_64 / VOL_DAYS_64 ELSE 0 END,1)                                           AVG_DAYS_64,  
    ROUND(CASE WHEN VOL_DAYS_65 > 0 THEN TOT_DAYS_65 / VOL_DAYS_65 ELSE 0 END,1)                                           AVG_DAYS_65,  
    ROUND(CASE WHEN VOL_DAYS_66 > 0 THEN TOT_DAYS_66 / VOL_DAYS_66 ELSE 0 END,1)                                           AVG_DAYS_66,  
    ROUND(CASE WHEN VOL_DAYS_67 > 0 THEN TOT_DAYS_67 / VOL_DAYS_67 ELSE 0 END,1)                                           AVG_DAYS_67,  
    ROUND(CASE WHEN VOL_DAYS_68 > 0 THEN TOT_DAYS_68 / VOL_DAYS_68 ELSE 0 END,1)                                           AVG_DAYS_68,  
    ROUND(CASE WHEN VOL_DAYS_69 > 0 THEN TOT_DAYS_69 / VOL_DAYS_69 ELSE 0 END,1)                                           AVG_DAYS_69,  
    ROUND(CASE WHEN VOL_DAYS_70 > 0 THEN TOT_DAYS_70 / VOL_DAYS_70 ELSE 0 END,1)                                           AVG_DAYS_70,   
    VOL_DAYS_2, 
    VOL_DAYS_3, 
    VOL_DAYS_4, 
    VOL_DAYS_6, 
    VOL_DAYS_7, 
    VOL_DAYS_8, 
    VOL_DAYS_9, 
    VOL_DAYS_12,
    VOL_DAYS_13,
    VOL_DAYS_14,
    VOL_DAYS_15,
    VOL_DAYS_16,
    VOL_DAYS_17,
    VOL_DAYS_18,
    VOL_DAYS_19,
    VOL_DAYS_23,
    VOL_DAYS_25,
    VOL_DAYS_26,
    VOL_DAYS_27,
    VOL_DAYS_32,
    VOL_DAYS_35,
    VOL_DAYS_39,
    VOL_DAYS_40,
    VOL_DAYS_41,
    VOL_DAYS_42,
    VOL_DAYS_43,
    VOL_DAYS_44,
    VOL_DAYS_45,
    VOL_DAYS_46,
    VOL_DAYS_47,
    VOL_DAYS_48,
    VOL_DAYS_49,
    VOL_DAYS_50,
    VOL_DAYS_51,
    VOL_DAYS_52,
    VOL_DAYS_53,
    VOL_DAYS_54,
    VOL_DAYS_55,
    VOL_DAYS_56,
    VOL_DAYS_57,
    VOL_DAYS_58,
    VOL_DAYS_59,
    VOL_DAYS_60,
    VOL_DAYS_61,
    VOL_DAYS_62,
    VOL_DAYS_63,
    VOL_DAYS_64,
    VOL_DAYS_65,
    VOL_DAYS_66,
    VOL_DAYS_67,
    VOL_DAYS_68,
    VOL_DAYS_69,
    VOL_DAYS_70,    
    COLOR_2, 
    COLOR_3, 
    COLOR_4, 
    COLOR_6, 
    COLOR_7, 
    COLOR_8, 
    COLOR_9, 
    COLOR_12,
    COLOR_13,
    COLOR_14,
    COLOR_15,
    COLOR_16,
    COLOR_17,
    COLOR_18,
    COLOR_19,
    COLOR_23,
    COLOR_25,
    COLOR_26,
    COLOR_27,
    COLOR_32,
    COLOR_35,
    COLOR_39,
    COLOR_40 ,
    COLOR_41 ,
    COLOR_42 ,
    COLOR_43 ,
    COLOR_44 ,
    COLOR_45 ,
    COLOR_46 ,
    COLOR_47 ,
    COLOR_48 ,
    COLOR_49 ,
    COLOR_50 ,
    COLOR_51 ,
    COLOR_52 ,
    COLOR_53 ,
    COLOR_54 ,
    COLOR_55 ,
    COLOR_56 ,
    COLOR_57 ,
    COLOR_58 ,
    COLOR_59 ,
    COLOR_60 ,
    COLOR_61 ,
    COLOR_62 ,
    COLOR_63 ,
    COLOR_64 ,
    COLOR_65 ,
    COLOR_66 ,
    COLOR_67 ,
    COLOR_68 ,
    COLOR_69 ,
    COLOR_70 ,
    PRODUCT_2,  
    PRODUCT_3,  
    PRODUCT_4,  
    PRODUCT_6,  
    PRODUCT_7,  
    PRODUCT_8,  
    PRODUCT_9,  
    PRODUCT_12, 
    PRODUCT_13, 
    PRODUCT_14, 
    PRODUCT_15, 
    PRODUCT_16, 
    PRODUCT_17, 
    PRODUCT_18, 
    PRODUCT_19, 
    PRODUCT_23, 
    PRODUCT_25, 
    PRODUCT_26, 
    PRODUCT_27, 
    PRODUCT_32, 
    PRODUCT_35, 
    PRODUCT_39, 
    PRODUCT_40,  
    PRODUCT_41,  
    PRODUCT_42,  
    PRODUCT_43,
    PRODUCT_44, 
    PRODUCT_45,
    PRODUCT_46,
    PRODUCT_47,
    PRODUCT_48,
    PRODUCT_49,
    PRODUCT_50,
    PRODUCT_51,
    PRODUCT_52,
    PRODUCT_53,
    PRODUCT_54,
    PRODUCT_55, 
    PRODUCT_56,
    PRODUCT_57,
    PRODUCT_58,
    PRODUCT_59,
    PRODUCT_60,
    PRODUCT_61,
    PRODUCT_62,
    PRODUCT_63,
    PRODUCT_64,
    PRODUCT_65,
    PRODUCT_66, 
    PRODUCT_67,
    PRODUCT_68,
    PRODUCT_69,
    PRODUCT_70
FROM
(SELECT
    CYCLE_DATE,
    SUM(TOT_DAYS_2 )    TOT_DAYS_2, 
    SUM(TOT_DAYS_3 )        TOT_DAYS_3, 
    SUM(TOT_DAYS_4 )        TOT_DAYS_4, 
    SUM(TOT_DAYS_6 )        TOT_DAYS_6, 
    SUM(TOT_DAYS_7 )        TOT_DAYS_7, 
    SUM(TOT_DAYS_8 )        TOT_DAYS_8, 
    SUM(TOT_DAYS_9 )        TOT_DAYS_9, 
    SUM(TOT_DAYS_12)        TOT_DAYS_12,
    SUM(TOT_DAYS_13)        TOT_DAYS_13,
    SUM(TOT_DAYS_14)        TOT_DAYS_14,
    SUM(TOT_DAYS_15)        TOT_DAYS_15,
    SUM(TOT_DAYS_16)        TOT_DAYS_16,
    SUM(TOT_DAYS_17)        TOT_DAYS_17,
    SUM(TOT_DAYS_18)        TOT_DAYS_18,
    SUM(TOT_DAYS_19)        TOT_DAYS_19,
    SUM(TOT_DAYS_23)        TOT_DAYS_23,
    SUM(TOT_DAYS_25)        TOT_DAYS_25,
    SUM(TOT_DAYS_26)        TOT_DAYS_26,
    SUM(TOT_DAYS_27)        TOT_DAYS_27,
    SUM(TOT_DAYS_32)        TOT_DAYS_32,
    SUM(TOT_DAYS_35)        TOT_DAYS_35,
    SUM(TOT_DAYS_39)        TOT_DAYS_39,
    SUM(TOT_DAYS_40)        TOT_DAYS_40,
    SUM(TOT_DAYS_41)        TOT_DAYS_41,
    SUM(TOT_DAYS_42)        TOT_DAYS_42,
    SUM(TOT_DAYS_43)        TOT_DAYS_43,
    SUM(TOT_DAYS_44)        TOT_DAYS_44,
    SUM(TOT_DAYS_45)        TOT_DAYS_45,
    SUM(TOT_DAYS_46)        TOT_DAYS_46,
    SUM(TOT_DAYS_47)        TOT_DAYS_47,
    SUM(TOT_DAYS_48)        TOT_DAYS_48,
    SUM(TOT_DAYS_49)        TOT_DAYS_49,
    SUM(TOT_DAYS_50)        TOT_DAYS_50,
    SUM(TOT_DAYS_51)        TOT_DAYS_51,
    SUM(TOT_DAYS_52)        TOT_DAYS_52,
    SUM(TOT_DAYS_53)        TOT_DAYS_53,
    SUM(TOT_DAYS_54)        TOT_DAYS_54,
    SUM(TOT_DAYS_55)        TOT_DAYS_55,
    SUM(TOT_DAYS_56)        TOT_DAYS_56,
    SUM(TOT_DAYS_57)        TOT_DAYS_57,
    SUM(TOT_DAYS_58)        TOT_DAYS_58,
    SUM(TOT_DAYS_59)        TOT_DAYS_59,
    SUM(TOT_DAYS_60)        TOT_DAYS_60,
    SUM(TOT_DAYS_61)        TOT_DAYS_61,
    SUM(TOT_DAYS_62)        TOT_DAYS_62,
    SUM(TOT_DAYS_63)        TOT_DAYS_63,
    SUM(TOT_DAYS_64)        TOT_DAYS_64,
    SUM(TOT_DAYS_65)        TOT_DAYS_65,
    SUM(TOT_DAYS_66)        TOT_DAYS_66,
    SUM(TOT_DAYS_67)        TOT_DAYS_67,
    SUM(TOT_DAYS_68)        TOT_DAYS_68,
    SUM(TOT_DAYS_69)        TOT_DAYS_69,
    SUM(TOT_DAYS_70)        TOT_DAYS_70,
    SUM(VOL_DAYS_2 )         VOL_DAYS_2 ,
    SUM(VOL_DAYS_3 )         VOL_DAYS_3 ,
    SUM(VOL_DAYS_4 )         VOL_DAYS_4 ,
    SUM(VOL_DAYS_6 )         VOL_DAYS_6 ,
    SUM(VOL_DAYS_7 )         VOL_DAYS_7 ,
    SUM(VOL_DAYS_8 )         VOL_DAYS_8 ,
    SUM(VOL_DAYS_9 )         VOL_DAYS_9 ,
    SUM(VOL_DAYS_12)         VOL_DAYS_12,
    SUM(VOL_DAYS_13)         VOL_DAYS_13,
    SUM(VOL_DAYS_14)         VOL_DAYS_14,
    SUM(VOL_DAYS_15)         VOL_DAYS_15,
    SUM(VOL_DAYS_16)         VOL_DAYS_16,
    SUM(VOL_DAYS_17)         VOL_DAYS_17,
    SUM(VOL_DAYS_18)         VOL_DAYS_18,
    SUM(VOL_DAYS_19)         VOL_DAYS_19,
    SUM(VOL_DAYS_23)         VOL_DAYS_23,
    SUM(VOL_DAYS_25)         VOL_DAYS_25,
    SUM(VOL_DAYS_26)         VOL_DAYS_26,
    SUM(VOL_DAYS_27)         VOL_DAYS_27,
    SUM(VOL_DAYS_32)         VOL_DAYS_32,
    SUM(VOL_DAYS_35)         VOL_DAYS_35,
    SUM(VOL_DAYS_39)         VOL_DAYS_39,
    SUM(VOL_DAYS_40)         VOL_DAYS_40,
    SUM(VOL_DAYS_41)         VOL_DAYS_41,
    SUM(VOL_DAYS_42)         VOL_DAYS_42,
    SUM(VOL_DAYS_43)         VOL_DAYS_43,
    SUM(VOL_DAYS_44)         VOL_DAYS_44,
    SUM(VOL_DAYS_45)         VOL_DAYS_45,
    SUM(VOL_DAYS_46)         VOL_DAYS_46,
    SUM(VOL_DAYS_47)         VOL_DAYS_47,
    SUM(VOL_DAYS_48)         VOL_DAYS_48,
    SUM(VOL_DAYS_49)         VOL_DAYS_49,
    SUM(VOL_DAYS_50)         VOL_DAYS_50,
    SUM(VOL_DAYS_51)         VOL_DAYS_51,
    SUM(VOL_DAYS_52)         VOL_DAYS_52,
    SUM(VOL_DAYS_53)         VOL_DAYS_53,
    SUM(VOL_DAYS_54)         VOL_DAYS_54,
    SUM(VOL_DAYS_55)         VOL_DAYS_55,
    SUM(VOL_DAYS_56)         VOL_DAYS_56,
    SUM(VOL_DAYS_57)         VOL_DAYS_57,
    SUM(VOL_DAYS_58)         VOL_DAYS_58,
    SUM(VOL_DAYS_59)         VOL_DAYS_59,
    SUM(VOL_DAYS_60)         VOL_DAYS_60,
    SUM(VOL_DAYS_61)         VOL_DAYS_61,
    SUM(VOL_DAYS_62)         VOL_DAYS_62,
    SUM(VOL_DAYS_63)         VOL_DAYS_63,
    SUM(VOL_DAYS_64)         VOL_DAYS_64,
    SUM(VOL_DAYS_65)         VOL_DAYS_65,
    SUM(VOL_DAYS_66)         VOL_DAYS_66,
    SUM(VOL_DAYS_67)         VOL_DAYS_67,
    SUM(VOL_DAYS_68)         VOL_DAYS_68,
    SUM(VOL_DAYS_69)         VOL_DAYS_69,
    SUM(VOL_DAYS_70)         VOL_DAYS_70,
    MAX(COLOR_2 )    COLOR_2  ,     
    MAX(COLOR_3 )    COLOR_3  ,
    MAX(COLOR_4 )    COLOR_4  ,
    MAX(COLOR_6 )    COLOR_6  ,
    MAX(COLOR_7 )    COLOR_7  ,
    MAX(COLOR_8 )    COLOR_8  ,
    MAX(COLOR_9 )    COLOR_9  ,
    MAX(COLOR_12)    COLOR_12 ,
    MAX(COLOR_13)    COLOR_13 ,
    MAX(COLOR_14)    COLOR_14 ,
    MAX(COLOR_15)    COLOR_15 ,
    MAX(COLOR_16)    COLOR_16 ,
    MAX(COLOR_17)    COLOR_17 ,
    MAX(COLOR_18)    COLOR_18 ,
    MAX(COLOR_19)    COLOR_19 ,
    MAX(COLOR_23)    COLOR_23 ,
    MAX(COLOR_25)    COLOR_25 ,
    MAX(COLOR_26)    COLOR_26 ,
    MAX(COLOR_27)    COLOR_27 ,
    MAX(COLOR_32)    COLOR_32 ,
    MAX(COLOR_35)    COLOR_35 ,
    MAX(COLOR_39)    COLOR_39 ,
    MAX(COLOR_40)    COLOR_40 ,
    MAX(COLOR_41)    COLOR_41 ,
    MAX(COLOR_42)    COLOR_42 ,
    MAX(COLOR_43)    COLOR_43 ,
    MAX(COLOR_44)    COLOR_44 ,
    MAX(COLOR_45)    COLOR_45 ,
    MAX(COLOR_46)    COLOR_46 ,
    MAX(COLOR_47)    COLOR_47 ,
    MAX(COLOR_48)    COLOR_48 ,
    MAX(COLOR_49)    COLOR_49 ,
    MAX(COLOR_50)    COLOR_50 ,
    MAX(COLOR_51)    COLOR_51 ,
    MAX(COLOR_52)    COLOR_52 ,
    MAX(COLOR_53)    COLOR_53 ,
    MAX(COLOR_54)    COLOR_54 ,
    MAX(COLOR_55)    COLOR_55 ,
    MAX(COLOR_56)    COLOR_56 ,
    MAX(COLOR_57)    COLOR_57 ,
    MAX(COLOR_58)    COLOR_58 ,
    MAX(COLOR_59)    COLOR_59 ,
    MAX(COLOR_60)    COLOR_60 ,
    MAX(COLOR_61)    COLOR_61 ,
    MAX(COLOR_62)    COLOR_62 ,
    MAX(COLOR_63)    COLOR_63 ,
    MAX(COLOR_64)    COLOR_64 ,
    MAX(COLOR_65)    COLOR_65 ,
    MAX(COLOR_66)    COLOR_66 ,
    MAX(COLOR_67)    COLOR_67 ,
    MAX(COLOR_68)    COLOR_68 ,
    MAX(COLOR_69)    COLOR_69 ,
    MAX(COLOR_70)    COLOR_70 ,
    MAX(PRODUCT_2 )      PRODUCT_2 , 
    MAX(PRODUCT_3 )      PRODUCT_3 ,
    MAX(PRODUCT_4 )      PRODUCT_4 ,
    MAX(PRODUCT_6 )      PRODUCT_6 ,
    MAX(PRODUCT_7 )      PRODUCT_7 ,
    MAX(PRODUCT_8 )      PRODUCT_8 ,
    MAX(PRODUCT_9 )      PRODUCT_9 ,
    MAX(PRODUCT_12)      PRODUCT_12,
    MAX(PRODUCT_13)      PRODUCT_13,
    MAX(PRODUCT_14)      PRODUCT_14,
    MAX(PRODUCT_15)      PRODUCT_15,
    MAX(PRODUCT_16)      PRODUCT_16,
    MAX(PRODUCT_17)      PRODUCT_17,
    MAX(PRODUCT_18)      PRODUCT_18,
    MAX(PRODUCT_19)      PRODUCT_19,
    MAX(PRODUCT_23)      PRODUCT_23,
    MAX(PRODUCT_25)      PRODUCT_25,
    MAX(PRODUCT_26)      PRODUCT_26,
    MAX(PRODUCT_27)      PRODUCT_27,
    MAX(PRODUCT_32)      PRODUCT_32,
    MAX(PRODUCT_35)      PRODUCT_35,
    MAX(PRODUCT_39)      PRODUCT_39,
    MAX(PRODUCT_40)      PRODUCT_40,
    MAX(PRODUCT_41)      PRODUCT_41,
    MAX(PRODUCT_42)      PRODUCT_42,
    MAX(PRODUCT_43)      PRODUCT_43,
    MAX(PRODUCT_44)      PRODUCT_44,
    MAX(PRODUCT_45)      PRODUCT_45,
    MAX(PRODUCT_46)      PRODUCT_46,
    MAX(PRODUCT_47)      PRODUCT_47,
    MAX(PRODUCT_48)      PRODUCT_48,
    MAX(PRODUCT_49)      PRODUCT_49,
    MAX(PRODUCT_50)      PRODUCT_50,
    MAX(PRODUCT_51)      PRODUCT_51,
    MAX(PRODUCT_52)      PRODUCT_52,
    MAX(PRODUCT_53)      PRODUCT_53,
    MAX(PRODUCT_54)      PRODUCT_54,
    MAX(PRODUCT_55)      PRODUCT_55,
    MAX(PRODUCT_56)      PRODUCT_56,
    MAX(PRODUCT_57)      PRODUCT_57,
    MAX(PRODUCT_58)      PRODUCT_58,
    MAX(PRODUCT_59)      PRODUCT_59,
    MAX(PRODUCT_60)      PRODUCT_60,
    MAX(PRODUCT_61)      PRODUCT_61,
    MAX(PRODUCT_62)      PRODUCT_62,
    MAX(PRODUCT_63)      PRODUCT_63,
    MAX(PRODUCT_64)      PRODUCT_64,
    MAX(PRODUCT_65)      PRODUCT_65,
    MAX(PRODUCT_66)      PRODUCT_66,
    MAX(PRODUCT_67)      PRODUCT_67,
    MAX(PRODUCT_68)      PRODUCT_68,
    MAX(PRODUCT_69)      PRODUCT_69,
    MAX(PRODUCT_70)      PRODUCT_70 
FROM    
(SELECT /*+ PARALLEL(A,6) */
    CYCLE_DATE,
    CASE WHEN UDAC_GROUP = 2  THEN BILL_SIG_AMT ELSE 0 END TOT_DAYS_2,
    CASE WHEN UDAC_GROUP = 3  THEN BILL_SIG_AMT ELSE 0 END TOT_DAYS_3,
    CASE WHEN UDAC_GROUP = 4  THEN BILL_SIG_AMT ELSE 0 END TOT_DAYS_4,
    CASE WHEN UDAC_GROUP = 6  THEN BILL_SIG_AMT ELSE 0 END TOT_DAYS_6,
    CASE WHEN UDAC_GROUP = 7  THEN BILL_SIG_AMT ELSE 0 END TOT_DAYS_7,
    CASE WHEN UDAC_GROUP = 8  THEN BILL_SIG_AMT ELSE 0 END TOT_DAYS_8,
    CASE WHEN UDAC_GROUP = 9  THEN BILL_SIG_AMT ELSE 0 END TOT_DAYS_9,
    CASE WHEN UDAC_GROUP = 12 THEN BILL_SIG_AMT ELSE 0 END TOT_DAYS_12,
    CASE WHEN UDAC_GROUP = 13 THEN BILL_SIG_AMT ELSE 0 END TOT_DAYS_13,
    CASE WHEN UDAC_GROUP = 14 THEN BILL_SIG_AMT ELSE 0 END TOT_DAYS_14,
    CASE WHEN UDAC_GROUP = 15 THEN BILL_SIG_AMT ELSE 0 END TOT_DAYS_15,
    CASE WHEN UDAC_GROUP = 16 THEN BILL_SIG_AMT ELSE 0 END TOT_DAYS_16,
    CASE WHEN UDAC_GROUP = 17 THEN BILL_SIG_AMT ELSE 0 END TOT_DAYS_17,
    CASE WHEN UDAC_GROUP = 18 THEN BILL_SIG_AMT ELSE 0 END TOT_DAYS_18,
    CASE WHEN UDAC_GROUP = 19 THEN BILL_SIG_AMT ELSE 0 END TOT_DAYS_19,
    CASE WHEN UDAC_GROUP = 23 THEN BILL_SIG_AMT ELSE 0 END TOT_DAYS_23,
    CASE WHEN UDAC_GROUP = 25 THEN BILL_SIG_AMT ELSE 0 END TOT_DAYS_25,
    CASE WHEN UDAC_GROUP = 26 THEN BILL_SIG_AMT ELSE 0 END TOT_DAYS_26,
    CASE WHEN UDAC_GROUP = 27 THEN BILL_SIG_AMT ELSE 0 END TOT_DAYS_27,
    CASE WHEN UDAC_GROUP = 32 THEN BILL_SIG_AMT ELSE 0 END TOT_DAYS_32,
    CASE WHEN UDAC_GROUP = 35 THEN BILL_SIG_AMT ELSE 0 END TOT_DAYS_35,
    CASE WHEN UDAC_GROUP = 39 THEN BILL_SIG_AMT ELSE 0 END TOT_DAYS_39,
    CASE WHEN UDAC_GROUP = 40 THEN BILL_SIG_AMT ELSE 0 END TOT_DAYS_40,
    CASE WHEN UDAC_GROUP = 41 THEN BILL_SIG_AMT ELSE 0 END TOT_DAYS_41,
    CASE WHEN UDAC_GROUP = 42 THEN BILL_SIG_AMT ELSE 0 END TOT_DAYS_42,
    CASE WHEN UDAC_GROUP = 43 THEN BILL_SIG_AMT ELSE 0 END TOT_DAYS_43,
    CASE WHEN UDAC_GROUP = 44 THEN BILL_SIG_AMT ELSE 0 END TOT_DAYS_44,
    CASE WHEN UDAC_GROUP = 45 THEN BILL_SIG_AMT ELSE 0 END TOT_DAYS_45,    
    CASE WHEN UDAC_GROUP = 46 THEN BILL_SIG_AMT ELSE 0 END TOT_DAYS_46,    
    CASE WHEN UDAC_GROUP = 47 THEN BILL_SIG_AMT ELSE 0 END TOT_DAYS_47,    
    CASE WHEN UDAC_GROUP = 48 THEN BILL_SIG_AMT ELSE 0 END TOT_DAYS_48,    
    CASE WHEN UDAC_GROUP = 49 THEN BILL_SIG_AMT ELSE 0 END TOT_DAYS_49,    
    CASE WHEN UDAC_GROUP = 50 THEN BILL_SIG_AMT ELSE 0 END TOT_DAYS_50,    
    CASE WHEN UDAC_GROUP = 51 THEN BILL_SIG_AMT ELSE 0 END TOT_DAYS_51,    
    CASE WHEN UDAC_GROUP = 52 THEN BILL_SIG_AMT ELSE 0 END TOT_DAYS_52,
    CASE WHEN UDAC_GROUP = 53 THEN BILL_SIG_AMT ELSE 0 END TOT_DAYS_53, 
    CASE WHEN UDAC_GROUP = 54 THEN BILL_SIG_AMT ELSE 0 END TOT_DAYS_54,
    CASE WHEN UDAC_GROUP = 55 THEN BILL_SIG_AMT ELSE 0 END TOT_DAYS_55,    
    CASE WHEN UDAC_GROUP = 56 THEN BILL_SIG_AMT ELSE 0 END TOT_DAYS_56,    
    CASE WHEN UDAC_GROUP = 57 THEN BILL_SIG_AMT ELSE 0 END TOT_DAYS_57,    
    CASE WHEN UDAC_GROUP = 58 THEN BILL_SIG_AMT ELSE 0 END TOT_DAYS_58,    
    CASE WHEN UDAC_GROUP = 59 THEN BILL_SIG_AMT ELSE 0 END TOT_DAYS_59,    
    CASE WHEN UDAC_GROUP = 60 THEN BILL_SIG_AMT ELSE 0 END TOT_DAYS_60,    
    CASE WHEN UDAC_GROUP = 61 THEN BILL_SIG_AMT ELSE 0 END TOT_DAYS_61,    
    CASE WHEN UDAC_GROUP = 62 THEN BILL_SIG_AMT ELSE 0 END TOT_DAYS_62,
    CASE WHEN UDAC_GROUP = 63 THEN BILL_SIG_AMT ELSE 0 END TOT_DAYS_63,
    CASE WHEN UDAC_GROUP = 64 THEN BILL_SIG_AMT ELSE 0 END TOT_DAYS_64,
    CASE WHEN UDAC_GROUP = 65 THEN BILL_SIG_AMT ELSE 0 END TOT_DAYS_65,    
    CASE WHEN UDAC_GROUP = 66 THEN BILL_SIG_AMT ELSE 0 END TOT_DAYS_66,    
    CASE WHEN UDAC_GROUP = 67 THEN BILL_SIG_AMT ELSE 0 END TOT_DAYS_67,    
    CASE WHEN UDAC_GROUP = 68 THEN BILL_SIG_AMT ELSE 0 END TOT_DAYS_68,    
    CASE WHEN UDAC_GROUP = 69 THEN BILL_SIG_AMT ELSE 0 END TOT_DAYS_69,    
    CASE WHEN UDAC_GROUP = 70 THEN BILL_SIG_AMT ELSE 0 END TOT_DAYS_70,   
    CASE WHEN UDAC_GROUP = 2  THEN CYCLE_TIME_VOLUME ELSE 0 END VOL_DAYS_2,
    CASE WHEN UDAC_GROUP = 3  THEN CYCLE_TIME_VOLUME ELSE 0 END VOL_DAYS_3,
    CASE WHEN UDAC_GROUP = 4  THEN CYCLE_TIME_VOLUME ELSE 0 END VOL_DAYS_4,
    CASE WHEN UDAC_GROUP = 6  THEN CYCLE_TIME_VOLUME ELSE 0 END VOL_DAYS_6,
    CASE WHEN UDAC_GROUP = 7  THEN CYCLE_TIME_VOLUME ELSE 0 END VOL_DAYS_7,
    CASE WHEN UDAC_GROUP = 8  THEN CYCLE_TIME_VOLUME ELSE 0 END VOL_DAYS_8,
    CASE WHEN UDAC_GROUP = 9  THEN CYCLE_TIME_VOLUME ELSE 0 END VOL_DAYS_9,
    CASE WHEN UDAC_GROUP = 12 THEN CYCLE_TIME_VOLUME ELSE 0 END VOL_DAYS_12,
    CASE WHEN UDAC_GROUP = 13 THEN CYCLE_TIME_VOLUME ELSE 0 END VOL_DAYS_13,
    CASE WHEN UDAC_GROUP = 14 THEN CYCLE_TIME_VOLUME ELSE 0 END VOL_DAYS_14,
    CASE WHEN UDAC_GROUP = 15 THEN CYCLE_TIME_VOLUME ELSE 0 END VOL_DAYS_15,
    CASE WHEN UDAC_GROUP = 16 THEN CYCLE_TIME_VOLUME ELSE 0 END VOL_DAYS_16,
    CASE WHEN UDAC_GROUP = 17 THEN CYCLE_TIME_VOLUME ELSE 0 END VOL_DAYS_17,
    CASE WHEN UDAC_GROUP = 18 THEN CYCLE_TIME_VOLUME ELSE 0 END VOL_DAYS_18,
    CASE WHEN UDAC_GROUP = 19 THEN CYCLE_TIME_VOLUME ELSE 0 END VOL_DAYS_19,
    CASE WHEN UDAC_GROUP = 23 THEN CYCLE_TIME_VOLUME ELSE 0 END VOL_DAYS_23,
    CASE WHEN UDAC_GROUP = 25 THEN CYCLE_TIME_VOLUME ELSE 0 END VOL_DAYS_25,
    CASE WHEN UDAC_GROUP = 26 THEN CYCLE_TIME_VOLUME ELSE 0 END VOL_DAYS_26,
    CASE WHEN UDAC_GROUP = 27 THEN CYCLE_TIME_VOLUME ELSE 0 END VOL_DAYS_27,
    CASE WHEN UDAC_GROUP = 32 THEN CYCLE_TIME_VOLUME ELSE 0 END VOL_DAYS_32,
    CASE WHEN UDAC_GROUP = 35 THEN CYCLE_TIME_VOLUME ELSE 0 END VOL_DAYS_35,
    CASE WHEN UDAC_GROUP = 39 THEN CYCLE_TIME_VOLUME ELSE 0 END VOL_DAYS_39,
    CASE WHEN UDAC_GROUP = 40 THEN CYCLE_TIME_VOLUME ELSE 0 END VOL_DAYS_40,
    CASE WHEN UDAC_GROUP = 41 THEN CYCLE_TIME_VOLUME ELSE 0 END VOL_DAYS_41,
    CASE WHEN UDAC_GROUP = 42 THEN CYCLE_TIME_VOLUME ELSE 0 END VOL_DAYS_42,
    CASE WHEN UDAC_GROUP = 43 THEN CYCLE_TIME_VOLUME ELSE 0 END VOL_DAYS_43,
    CASE WHEN UDAC_GROUP = 44 THEN CYCLE_TIME_VOLUME ELSE 0 END VOL_DAYS_44,
    CASE WHEN UDAC_GROUP = 45 THEN CYCLE_TIME_VOLUME ELSE 0 END VOL_DAYS_45,
    CASE WHEN UDAC_GROUP = 46 THEN CYCLE_TIME_VOLUME ELSE 0 END VOL_DAYS_46,
    CASE WHEN UDAC_GROUP = 47 THEN CYCLE_TIME_VOLUME ELSE 0 END VOL_DAYS_47,
    CASE WHEN UDAC_GROUP = 48 THEN CYCLE_TIME_VOLUME ELSE 0 END VOL_DAYS_48,
    CASE WHEN UDAC_GROUP = 49 THEN CYCLE_TIME_VOLUME ELSE 0 END VOL_DAYS_49,
    CASE WHEN UDAC_GROUP = 50 THEN CYCLE_TIME_VOLUME ELSE 0 END VOL_DAYS_50,
    CASE WHEN UDAC_GROUP = 51 THEN CYCLE_TIME_VOLUME ELSE 0 END VOL_DAYS_51,
    CASE WHEN UDAC_GROUP = 52 THEN CYCLE_TIME_VOLUME ELSE 0 END VOL_DAYS_52,
    CASE WHEN UDAC_GROUP = 53 THEN CYCLE_TIME_VOLUME ELSE 0 END VOL_DAYS_53,
    CASE WHEN UDAC_GROUP = 54 THEN CYCLE_TIME_VOLUME ELSE 0 END VOL_DAYS_54,
    CASE WHEN UDAC_GROUP = 55 THEN CYCLE_TIME_VOLUME ELSE 0 END VOL_DAYS_55,
    CASE WHEN UDAC_GROUP = 56 THEN CYCLE_TIME_VOLUME ELSE 0 END VOL_DAYS_56,
    CASE WHEN UDAC_GROUP = 57 THEN CYCLE_TIME_VOLUME ELSE 0 END VOL_DAYS_57,
    CASE WHEN UDAC_GROUP = 58 THEN CYCLE_TIME_VOLUME ELSE 0 END VOL_DAYS_58,
    CASE WHEN UDAC_GROUP = 59 THEN CYCLE_TIME_VOLUME ELSE 0 END VOL_DAYS_59,
    CASE WHEN UDAC_GROUP = 60 THEN CYCLE_TIME_VOLUME ELSE 0 END VOL_DAYS_60,
    CASE WHEN UDAC_GROUP = 61 THEN CYCLE_TIME_VOLUME ELSE 0 END VOL_DAYS_61,
    CASE WHEN UDAC_GROUP = 62 THEN CYCLE_TIME_VOLUME ELSE 0 END VOL_DAYS_62,
    CASE WHEN UDAC_GROUP = 63 THEN CYCLE_TIME_VOLUME ELSE 0 END VOL_DAYS_63,
    CASE WHEN UDAC_GROUP = 64 THEN CYCLE_TIME_VOLUME ELSE 0 END VOL_DAYS_64,
    CASE WHEN UDAC_GROUP = 65 THEN CYCLE_TIME_VOLUME ELSE 0 END VOL_DAYS_65,
    CASE WHEN UDAC_GROUP = 66 THEN CYCLE_TIME_VOLUME ELSE 0 END VOL_DAYS_66,
    CASE WHEN UDAC_GROUP = 67 THEN CYCLE_TIME_VOLUME ELSE 0 END VOL_DAYS_67,
    CASE WHEN UDAC_GROUP = 68 THEN CYCLE_TIME_VOLUME ELSE 0 END VOL_DAYS_68,
    CASE WHEN UDAC_GROUP = 69 THEN CYCLE_TIME_VOLUME ELSE 0 END VOL_DAYS_69,
    CASE WHEN UDAC_GROUP = 70 THEN CYCLE_TIME_VOLUME ELSE 0 END VOL_DAYS_70,
    CASE WHEN UDAC_GROUP = 2  THEN COLORS.PLOT_COLOR END COLOR_2,
    CASE WHEN UDAC_GROUP = 3  THEN COLORS.PLOT_COLOR END COLOR_3,
    CASE WHEN UDAC_GROUP = 4  THEN COLORS.PLOT_COLOR END COLOR_4,
    CASE WHEN UDAC_GROUP = 6  THEN COLORS.PLOT_COLOR END COLOR_6,
    CASE WHEN UDAC_GROUP = 7  THEN COLORS.PLOT_COLOR END COLOR_7,
    CASE WHEN UDAC_GROUP = 8  THEN COLORS.PLOT_COLOR END COLOR_8,
    CASE WHEN UDAC_GROUP = 9  THEN COLORS.PLOT_COLOR END COLOR_9,
    CASE WHEN UDAC_GROUP = 12 THEN COLORS.PLOT_COLOR END COLOR_12,
    CASE WHEN UDAC_GROUP = 13 THEN COLORS.PLOT_COLOR END COLOR_13,
    CASE WHEN UDAC_GROUP = 14 THEN COLORS.PLOT_COLOR END COLOR_14,
    CASE WHEN UDAC_GROUP = 15 THEN COLORS.PLOT_COLOR END COLOR_15,
    CASE WHEN UDAC_GROUP = 16 THEN COLORS.PLOT_COLOR END COLOR_16,
    CASE WHEN UDAC_GROUP = 17 THEN COLORS.PLOT_COLOR END COLOR_17,
    CASE WHEN UDAC_GROUP = 18 THEN COLORS.PLOT_COLOR END COLOR_18,
    CASE WHEN UDAC_GROUP = 19 THEN COLORS.PLOT_COLOR END COLOR_19,
    CASE WHEN UDAC_GROUP = 23 THEN COLORS.PLOT_COLOR END COLOR_23,
    CASE WHEN UDAC_GROUP = 25 THEN COLORS.PLOT_COLOR END COLOR_25,
    CASE WHEN UDAC_GROUP = 26 THEN COLORS.PLOT_COLOR END COLOR_26,
    CASE WHEN UDAC_GROUP = 27 THEN COLORS.PLOT_COLOR END COLOR_27,
    CASE WHEN UDAC_GROUP = 32 THEN COLORS.PLOT_COLOR END COLOR_32,
    CASE WHEN UDAC_GROUP = 35 THEN COLORS.PLOT_COLOR END COLOR_35,
    CASE WHEN UDAC_GROUP = 39 THEN COLORS.PLOT_COLOR END COLOR_39,
    CASE WHEN UDAC_GROUP = 40 THEN COLORS.PLOT_COLOR END COLOR_40,
    CASE WHEN UDAC_GROUP = 41 THEN COLORS.PLOT_COLOR END COLOR_41,
    CASE WHEN UDAC_GROUP = 42 THEN COLORS.PLOT_COLOR END COLOR_42,
    CASE WHEN UDAC_GROUP = 43 THEN COLORS.PLOT_COLOR END COLOR_43,
    CASE WHEN UDAC_GROUP = 44 THEN COLORS.PLOT_COLOR END COLOR_44,
    CASE WHEN UDAC_GROUP = 45 THEN COLORS.PLOT_COLOR END COLOR_45,
    CASE WHEN UDAC_GROUP = 46 THEN COLORS.PLOT_COLOR END COLOR_46,
    CASE WHEN UDAC_GROUP = 47 THEN COLORS.PLOT_COLOR END COLOR_47,
    CASE WHEN UDAC_GROUP = 48 THEN COLORS.PLOT_COLOR END COLOR_48,
    CASE WHEN UDAC_GROUP = 49 THEN COLORS.PLOT_COLOR END COLOR_49,
    CASE WHEN UDAC_GROUP = 50 THEN COLORS.PLOT_COLOR END COLOR_50,
    CASE WHEN UDAC_GROUP = 51 THEN COLORS.PLOT_COLOR END COLOR_51,
    CASE WHEN UDAC_GROUP = 52 THEN COLORS.PLOT_COLOR END COLOR_52,
    CASE WHEN UDAC_GROUP = 53 THEN COLORS.PLOT_COLOR END COLOR_53,
    CASE WHEN UDAC_GROUP = 54 THEN COLORS.PLOT_COLOR END COLOR_54,
    CASE WHEN UDAC_GROUP = 55 THEN COLORS.PLOT_COLOR END COLOR_55,
    CASE WHEN UDAC_GROUP = 56 THEN COLORS.PLOT_COLOR END COLOR_56,
    CASE WHEN UDAC_GROUP = 57 THEN COLORS.PLOT_COLOR END COLOR_57,
    CASE WHEN UDAC_GROUP = 58 THEN COLORS.PLOT_COLOR END COLOR_58,
    CASE WHEN UDAC_GROUP = 59 THEN COLORS.PLOT_COLOR END COLOR_59,
    CASE WHEN UDAC_GROUP = 60 THEN COLORS.PLOT_COLOR END COLOR_60,
    CASE WHEN UDAC_GROUP = 61 THEN COLORS.PLOT_COLOR END COLOR_61,
    CASE WHEN UDAC_GROUP = 62 THEN COLORS.PLOT_COLOR END COLOR_62,
    CASE WHEN UDAC_GROUP = 63 THEN COLORS.PLOT_COLOR END COLOR_63,
    CASE WHEN UDAC_GROUP = 64 THEN COLORS.PLOT_COLOR END COLOR_64,
    CASE WHEN UDAC_GROUP = 65 THEN COLORS.PLOT_COLOR END COLOR_65,
    CASE WHEN UDAC_GROUP = 66 THEN COLORS.PLOT_COLOR END COLOR_66,
    CASE WHEN UDAC_GROUP = 67 THEN COLORS.PLOT_COLOR END COLOR_67,
    CASE WHEN UDAC_GROUP = 68 THEN COLORS.PLOT_COLOR END COLOR_68,
    CASE WHEN UDAC_GROUP = 69 THEN COLORS.PLOT_COLOR END COLOR_69,
    CASE WHEN UDAC_GROUP = 70 THEN COLORS.PLOT_COLOR END COLOR_70,
    CASE WHEN UDAC_GROUP = 2  THEN GDATA.UDAC_GROUP_NAME END PRODUCT_2,
    CASE WHEN UDAC_GROUP = 3  THEN GDATA.UDAC_GROUP_NAME END PRODUCT_3,
    CASE WHEN UDAC_GROUP = 4  THEN GDATA.UDAC_GROUP_NAME END PRODUCT_4,
    CASE WHEN UDAC_GROUP = 6  THEN GDATA.UDAC_GROUP_NAME END PRODUCT_6,
    CASE WHEN UDAC_GROUP = 7  THEN GDATA.UDAC_GROUP_NAME END PRODUCT_7,
    CASE WHEN UDAC_GROUP = 8  THEN GDATA.UDAC_GROUP_NAME END PRODUCT_8,
    CASE WHEN UDAC_GROUP = 9  THEN GDATA.UDAC_GROUP_NAME END PRODUCT_9,
    CASE WHEN UDAC_GROUP = 12 THEN GDATA.UDAC_GROUP_NAME END PRODUCT_12,
    CASE WHEN UDAC_GROUP = 13 THEN GDATA.UDAC_GROUP_NAME END PRODUCT_13,
    CASE WHEN UDAC_GROUP = 14 THEN GDATA.UDAC_GROUP_NAME END PRODUCT_14,
    CASE WHEN UDAC_GROUP = 15 THEN GDATA.UDAC_GROUP_NAME END PRODUCT_15,
    CASE WHEN UDAC_GROUP = 16 THEN GDATA.UDAC_GROUP_NAME END PRODUCT_16,
    CASE WHEN UDAC_GROUP = 17 THEN GDATA.UDAC_GROUP_NAME END PRODUCT_17,
    CASE WHEN UDAC_GROUP = 18 THEN GDATA.UDAC_GROUP_NAME END PRODUCT_18,
    CASE WHEN UDAC_GROUP = 19 THEN GDATA.UDAC_GROUP_NAME END PRODUCT_19,
    CASE WHEN UDAC_GROUP = 23 THEN GDATA.UDAC_GROUP_NAME END PRODUCT_23,
    CASE WHEN UDAC_GROUP = 25 THEN GDATA.UDAC_GROUP_NAME END PRODUCT_25,
    CASE WHEN UDAC_GROUP = 26 THEN GDATA.UDAC_GROUP_NAME END PRODUCT_26,
    CASE WHEN UDAC_GROUP = 27 THEN GDATA.UDAC_GROUP_NAME END PRODUCT_27,
    CASE WHEN UDAC_GROUP = 32 THEN GDATA.UDAC_GROUP_NAME END PRODUCT_32,
    CASE WHEN UDAC_GROUP = 35 THEN GDATA.UDAC_GROUP_NAME END PRODUCT_35,
    CASE WHEN UDAC_GROUP = 39 THEN GDATA.UDAC_GROUP_NAME END PRODUCT_39,
    CASE WHEN UDAC_GROUP = 40 THEN GDATA.UDAC_GROUP_NAME END PRODUCT_40,
    CASE WHEN UDAC_GROUP = 41 THEN GDATA.UDAC_GROUP_NAME END PRODUCT_41,
    CASE WHEN UDAC_GROUP = 42 THEN GDATA.UDAC_GROUP_NAME END PRODUCT_42,
    CASE WHEN UDAC_GROUP = 43 THEN GDATA.UDAC_GROUP_NAME END PRODUCT_43,
    CASE WHEN UDAC_GROUP = 44 THEN GDATA.UDAC_GROUP_NAME END PRODUCT_44,
    CASE WHEN UDAC_GROUP = 45 THEN GDATA.UDAC_GROUP_NAME END PRODUCT_45,
    CASE WHEN UDAC_GROUP = 46 THEN GDATA.UDAC_GROUP_NAME END PRODUCT_46,
    CASE WHEN UDAC_GROUP = 47 THEN GDATA.UDAC_GROUP_NAME END PRODUCT_47,
    CASE WHEN UDAC_GROUP = 48 THEN GDATA.UDAC_GROUP_NAME END PRODUCT_48,
    CASE WHEN UDAC_GROUP = 49 THEN GDATA.UDAC_GROUP_NAME END PRODUCT_49,
    CASE WHEN UDAC_GROUP = 50 THEN GDATA.UDAC_GROUP_NAME END PRODUCT_50,
    CASE WHEN UDAC_GROUP = 51 THEN GDATA.UDAC_GROUP_NAME END PRODUCT_51,
    CASE WHEN UDAC_GROUP = 52 THEN GDATA.UDAC_GROUP_NAME END PRODUCT_52,
    CASE WHEN UDAC_GROUP = 53 THEN GDATA.UDAC_GROUP_NAME END PRODUCT_53,
    CASE WHEN UDAC_GROUP = 54 THEN GDATA.UDAC_GROUP_NAME END PRODUCT_54,
    CASE WHEN UDAC_GROUP = 55 THEN GDATA.UDAC_GROUP_NAME END PRODUCT_55,
    CASE WHEN UDAC_GROUP = 56 THEN GDATA.UDAC_GROUP_NAME END PRODUCT_56,
    CASE WHEN UDAC_GROUP = 57 THEN GDATA.UDAC_GROUP_NAME END PRODUCT_57,
    CASE WHEN UDAC_GROUP = 58 THEN GDATA.UDAC_GROUP_NAME END PRODUCT_58,
    CASE WHEN UDAC_GROUP = 59 THEN GDATA.UDAC_GROUP_NAME END PRODUCT_59,
    CASE WHEN UDAC_GROUP = 60 THEN GDATA.UDAC_GROUP_NAME END PRODUCT_60,
    CASE WHEN UDAC_GROUP = 61 THEN GDATA.UDAC_GROUP_NAME END PRODUCT_61,
    CASE WHEN UDAC_GROUP = 62 THEN GDATA.UDAC_GROUP_NAME END PRODUCT_62,
    CASE WHEN UDAC_GROUP = 63 THEN GDATA.UDAC_GROUP_NAME END PRODUCT_63,
    CASE WHEN UDAC_GROUP = 64 THEN GDATA.UDAC_GROUP_NAME END PRODUCT_64,
    CASE WHEN UDAC_GROUP = 65 THEN GDATA.UDAC_GROUP_NAME END PRODUCT_65,
    CASE WHEN UDAC_GROUP = 66 THEN GDATA.UDAC_GROUP_NAME END PRODUCT_66,
    CASE WHEN UDAC_GROUP = 67 THEN GDATA.UDAC_GROUP_NAME END PRODUCT_67,
    CASE WHEN UDAC_GROUP = 68 THEN GDATA.UDAC_GROUP_NAME END PRODUCT_68,
    CASE WHEN UDAC_GROUP = 69 THEN GDATA.UDAC_GROUP_NAME END PRODUCT_69,
    CASE WHEN UDAC_GROUP = 70 THEN GDATA.UDAC_GROUP_NAME END PRODUCT_70
FROM
    IOCT_CYCLE_PRODUCT_MV A,
    (SELECT distinct(PLOT_VALUE), PLOT_COLOR, WORKFLOW_TYPE FROM IOCT_CHART_COLORS
            WHERE PLOT_TYPE = 'PRODUCT' and (SUB_TYPE = {subType} or {subType} = 'All') and CHART_TYPE = 'C') COLORS,
    (SELECT 
        UDAC_GROUP_NAME, 
        UG.UDAC_GROUP
    FROM
        (SELECT
            UDAC_GROUP
        FROM
            UDAC_GROUP_CA
        WHERE
            UDAC_IND4            IN ('C','P')
        GROUP BY
            UDAC_GROUP) UG,
        UDAC_GROUP_NAME_CA UGN
    WHERE
        UG.UDAC_GROUP                = UGN.UDAC_GROUP) GDATA
WHERE
    A.PLOT_VALUE			= GDATA.UDAC_GROUP_NAME
AND A.PLOT_VALUE            = COLORS.PLOT_VALUE
AND DB_REGION IN ({{regions}})
AND A.WORKFLOW_TYPE = {workflow}
AND COLORS.WORKFLOW_TYPE = A.WORKFLOW_TYPE
AND (A.SUB_TYPE = {subType} or {subType} = 'All')
AND (({time}				= 'YEAR'
AND 'YEAR'				= TIME)
OR  ({time}				= 'MONTH'
AND CYCLE_YYYYMM			= {month}))
)
GROUP BY
    CYCLE_DATE) B
ORDER BY
    substr(cycle_date,4,4), substr(cycle_date,1,2)
]]></statement>

<statement code="IOCT_Product_Grid_Yr_query"><![CDATA[
select  substr(cycle_yyyymm,5,2)||'/'||substr(cycle_yyyymm,1,4) month,
cycle_yyyymm,
plot_value,
db_region,
cycle_time_volume,
bill_sig_amt,
sub_type,
ROUND(CASE WHEN cycle_time_volume  > 0 THEN bill_sig_amt/cycle_time_volume   ELSE 0 END,1) bill_sig_amt_avg
from    ioct_cycle_product_mv a ,  udac_group_name_ca ug
where time = {time}
and db_region IN ({{regions}})
AND A.WORKFLOW_TYPE = {workflow}
AND (A.SUB_TYPE = {subType} or {subType} = 'All')
and a.plot_value = ug.udac_group_name
and ug.udac_group IN ({{products}})
order by   cycle_yyyymm , plot_value ,db_region
]]></statement>   

<statement code="IOCT_Product_Grid_Mn_query"><![CDATA[
select  substr(cycle_yyyymm,5,2)||'/'||substr(cycle_yyyymm,1,4) month,
to_char(to_date(cycle_date,'DD-MON'),'MM/DD')||'/'||substr(cycle_yyyymm,1,4) day, 
cycle_yyyymm,
plot_value,
db_region,
cycle_time_volume,
sub_type,
bill_sig_amt,
ROUND(CASE WHEN cycle_time_volume  > 0 THEN bill_sig_amt/cycle_time_volume   ELSE 0 END,1) bill_sig_amt_avg
from    ioct_cycle_product_mv a ,  udac_group_name_ca ug
where time = {time}
and db_region IN ({{regions}})
AND A.WORKFLOW_TYPE = {workflow}
AND (A.SUB_TYPE = {subType} or {subType} = 'All')
and ug.udac_group IN ({{products}})
and cycle_yyyymm = {month}
and a.plot_value = ug.udac_group_name
order by   day , plot_value ,db_region
]]></statement> 

<statement code="IOCT_Region_Grid_Yr_query"><![CDATA[
select  substr(cycle_yyyymm,5,2)||'/'||substr(cycle_yyyymm,1,4) month, 
cycle_yyyymm,
plot_value,
a.udac_group_name,
cycle_time_volume,
bill_sig_amt,
sub_type,
ROUND(CASE WHEN cycle_time_volume  > 0 THEN bill_sig_amt/cycle_time_volume   ELSE 0 END,1) bill_sig_amt_avg
from    ioct_cycle_region_mv a ,  udac_group_name_ca ug
where time = {time}
and plot_value IN ({{regions}})
AND A.WORKFLOW_TYPE = {workflow}
AND (A.SUB_TYPE = {subType} or {subType} = 'All')
and a.udac_group_name = ug.udac_group_name
and ug.udac_group IN ({{products}})
order by   cycle_yyyymm , plot_value ,udac_group_name
]]></statement>   

<statement code="IOCT_Region_Grid_Mn_query"><![CDATA[
select  substr(cycle_yyyymm,5,2)||'/'||substr(cycle_yyyymm,1,4) month,
to_char(to_date(cycle_date,'DD-MON'),'MM/DD')||'/'||substr(cycle_yyyymm,1,4) day, 
cycle_yyyymm,
plot_value,
a.udac_group_name,
cycle_time_volume,
bill_sig_amt,
sub_type,
ROUND(CASE WHEN cycle_time_volume  > 0 THEN bill_sig_amt/cycle_time_volume   ELSE 0 END,1) bill_sig_amt_avg
from    ioct_cycle_region_mv a ,  udac_group_name_ca ug
where time = {time}
and plot_value IN ({{regions}})
AND A.WORKFLOW_TYPE = {workflow}
AND (A.SUB_TYPE = {subType} or {subType} = 'All')
and a.udac_group_name = ug.udac_group_name
and ug.udac_group IN ({{products}})
and cycle_yyyymm = {month}
order by   day , plot_value ,udac_group_name
]]></statement>

<statement code="IOCT_Category_Grid_Yr_query"><![CDATA[
select  substr(cycle_yyyymm,5,2)||'/'||substr(cycle_yyyymm,1,4) month,
cycle_yyyymm,
(case when plot_value = 'C' then 'Core'
     when plot_value = 'P' then 'Premium' end) category,
db_region,
sub_type,
cycle_time_volume,
bill_sig_amt,
ROUND(CASE WHEN cycle_time_volume  > 0 THEN bill_sig_amt/cycle_time_volume   ELSE 0 END,1) bill_sig_amt_avg

from    ioct_cycle_category_mv
where time = {time}
and db_region IN ({{regions}})
AND WORKFLOW_TYPE = {workflow}
AND (SUB_TYPE = {subType} or {subType} = 'All')
order by   cycle_yyyymm , category , db_region
]]></statement>   

<statement code="IOCT_Category_Grid_Mn_query"><![CDATA[
select  substr(cycle_yyyymm,5,2)||'/'||substr(cycle_yyyymm,1,4) month,
cycle_yyyymm,
(case when plot_value = 'C' then 'Core'
     when plot_value = 'P' then 'Premium' end) category,
to_char(to_date(cycle_date,'DD-MON'),'MM/DD')||'/'||substr(cycle_yyyymm,1,4) day,
db_region,
sub_type,
cycle_time_volume,
bill_sig_amt,
ROUND(CASE WHEN cycle_time_volume  > 0 THEN bill_sig_amt/cycle_time_volume   ELSE 0 END,1) bill_sig_amt_avg
from    ioct_cycle_category_mv
where time = {time}
and db_region IN ({{regions}})
AND WORKFLOW_TYPE = {workflow}
AND (SUB_TYPE = {subType} or {subType} = 'All')
and cycle_yyyymm = {month}
order by   day , category , db_region
]]></statement>
<statement code="IOCT_Inv_Region_Grid_Year_query"><![CDATA[
select  substr(cycle_yyyymm,5,2)||'/'||substr(cycle_yyyymm,1,4) month, 
cycle_yyyymm,
plot_value,
workflow_type,
sub_type,
a.udac_group_name,
cycle_time_volume,
bill_sig_amt,
ROUND(CASE WHEN cycle_time_volume  > 0 THEN bill_sig_amt/cycle_time_volume   ELSE 0 END,1) bill_sig_amt_avg
from    IOCT_INV_REGION_CA a ,  udac_group_name_ca ug
where plot_time = {time}
and plot_value IN ({{regions}})
and a.workflow_type = {workflow}
and a.sub_type in ({{subTypeArray}})
and a.udac_group_name = ug.udac_group_name
and ug.udac_group IN ({{products}})
and to_date(CYCLE_YYYYMM ,'YYYYMM') between  to_date(to_char(add_months(sysdate,-11),'YYYYMM'),'YYYYMM')   and  to_date(to_char(sysdate,'YYYYMM') ,'YYYYMM')
order by   cycle_yyyymm , plot_value ,udac_group_name
]]></statement>   

<statement code="IOCT_Inv_Region_Grid_Weekly_query"><![CDATA[
select  substr(cycle_yyyymm,5,2)||'/'||substr(cycle_yyyymm,1,4) month,
to_char(to_date(cycle_date,'DD-MON'),'MM/DD')||'/'||substr(cycle_yyyymm,1,4) day, 
cycle_yyyymm,
plot_value,
workflow_type,
sub_type,
a.udac_group_name,
cycle_time_volume,
bill_sig_amt,
ROUND(CASE WHEN cycle_time_volume  > 0 THEN bill_sig_amt/cycle_time_volume   ELSE 0 END,1) bill_sig_amt_avg
from    IOCT_INV_REGION_CA a ,  udac_group_name_ca ug
where plot_time = {time}
and plot_value IN ({{regions}})
and a.workflow_type = {workflow}
and a.sub_type in ({{subTypeArray}})
and a.udac_group_name = ug.udac_group_name
and ug.udac_group IN ({{products}})
and to_date(CYCLE_YYYYMM ,'YYYYMM') between  to_date(to_char(add_months(sysdate,-2),'YYYYMM'),'YYYYMM')   and  to_date(to_char(sysdate,'YYYYMM') ,'YYYYMM')
order by   day , plot_value ,udac_group_name
]]></statement>

<statement code="IOCT_Inv_Region_Grid_Daily_query"><![CDATA[
select  substr(cycle_yyyymm,5,2)||'/'||substr(cycle_yyyymm,1,4) month,
to_char(to_date(cycle_date,'DD-MON'),'MM/DD')||'/'||substr(cycle_yyyymm,1,4) day, 
cycle_yyyymm,
plot_value,
workflow_type,
sub_type,
a.udac_group_name,
cycle_time_volume,
bill_sig_amt,
ROUND(CASE WHEN cycle_time_volume  > 0 THEN bill_sig_amt/cycle_time_volume   ELSE 0 END,1) bill_sig_amt_avg
from    IOCT_INV_REGION_CA a ,  udac_group_name_ca ug
where plot_time = {time}
and plot_value IN ({{regions}})
and a.workflow_type = {workflow}
and a.sub_type in ({{subTypeArray}})
and a.udac_group_name = ug.udac_group_name
and ug.udac_group IN ({{products}})
and to_date(CYCLE_YYYYMM ,'YYYYMM') between  to_date(to_char(add_months(sysdate,-2),'YYYYMM'),'YYYYMM')   and  to_date(to_char(sysdate,'YYYYMM') ,'YYYYMM')
order by   day , plot_value ,udac_group_name
]]></statement>
<statement code="IOCT_Inv_Category_Grid_Year_query"><![CDATA[
select  substr(cycle_yyyymm,5,2)||'/'||substr(cycle_yyyymm,1,4) month,
cycle_yyyymm,
(case when plot_value = 'C' then 'Core'
     when plot_value = 'P' then 'Premium' end) category,
db_region,
workflow_type,
sub_type,
cycle_time_volume,
bill_sig_amt, 
ROUND(CASE WHEN cycle_time_volume  > 0 THEN bill_sig_amt/cycle_time_volume   ELSE 0 END,1) bill_sig_amt_avg
from    IOCT_INV_CATEGORY_CA
where plot_time = {time}
and db_region IN ({{regions}})
and workflow_type = {workflow}
and sub_type in ({{subTypeArray}})
and to_date(CYCLE_YYYYMM ,'YYYYMM') between  to_date(to_char(add_months(sysdate,-11),'YYYYMM'),'YYYYMM')   and  to_date(to_char(sysdate,'YYYYMM') ,'YYYYMM')
order by   cycle_yyyymm , category , db_region
]]></statement>   

<statement code="IOCT_Inv_Category_Grid_Weekly_query"><![CDATA[
select  substr(cycle_yyyymm,5,2)||'/'||substr(cycle_yyyymm,1,4) month,
cycle_yyyymm,
(case when plot_value = 'C' then 'Core'
     when plot_value = 'P' then 'Premium' end) category,
to_char(to_date(cycle_date,'DD-MON'),'MM/DD')||'/'||substr(cycle_yyyymm,1,4) day,
db_region,
workflow_type,
sub_type,
cycle_time_volume,
bill_sig_amt,
ROUND(CASE WHEN cycle_time_volume  > 0 THEN bill_sig_amt/cycle_time_volume   ELSE 0 END,1) bill_sig_amt_avg
from    IOCT_INV_CATEGORY_CA
where plot_time = {time}
and db_region IN ({{regions}})
and workflow_type = {workflow}
and sub_type in ({{subTypeArray}})
and to_date(CYCLE_YYYYMM ,'YYYYMM') between  to_date(to_char(add_months(sysdate,-2),'YYYYMM'),'YYYYMM')   and  to_date(to_char(sysdate,'YYYYMM') ,'YYYYMM')
order by   day , category , db_region
]]></statement>

<statement code="IOCT_Inv_Category_Grid_Daily_query"><![CDATA[
select  substr(cycle_yyyymm,5,2)||'/'||substr(cycle_yyyymm,1,4) month,
cycle_yyyymm,
(case when plot_value = 'C' then 'Core'
     when plot_value = 'P' then 'Premium' end) category,
to_char(to_date(cycle_date,'DD-MON'),'MM/DD')||'/'||substr(cycle_yyyymm,1,4) day,
db_region,
workflow_type,
sub_type,
cycle_time_volume,
bill_sig_amt,
ROUND(CASE WHEN cycle_time_volume  > 0 THEN bill_sig_amt/cycle_time_volume   ELSE 0 END,1) bill_sig_amt_avg
from    IOCT_INV_CATEGORY_CA
where plot_time = {time}
and db_region IN ({{regions}})
and workflow_type = {workflow}
and sub_type in ({{subTypeArray}})
and to_date(CYCLE_YYYYMM ,'YYYYMM')  = to_date(to_char(sysdate,'YYYYMM') ,'YYYYMM')
order by   day , category , db_region
]]></statement>
<statement code="IOCT_Inv_Product_Grid_Year_query"><![CDATA[
select  substr(cycle_yyyymm,5,2)||'/'||substr(cycle_yyyymm,1,4) month,
cycle_yyyymm,
plot_value,
workflow_type,
sub_type,
db_region,
cycle_time_volume,
bill_sig_amt,
ROUND(CASE WHEN cycle_time_volume  > 0 THEN bill_sig_amt/cycle_time_volume   ELSE 0 END,1) bill_sig_amt_avg
from    IOCT_INV_PRODUCT_CA a ,  udac_group_name_ca ug
where plot_time = {time}
and workflow_type = {workflow}
and sub_type in ({{subTypeArray}})
and db_region IN ({{regions}})
and a.plot_value = ug.udac_group_name
and to_date(CYCLE_YYYYMM ,'YYYYMM') between  to_date(to_char(add_months(sysdate,-11),'YYYYMM'),'YYYYMM')   and  to_date(to_char(sysdate,'YYYYMM') ,'YYYYMM')
and ug.udac_group IN ({{products}})
order by   cycle_yyyymm , plot_value ,db_region
]]></statement>   

<statement code="IOCT_Inv_Product_Grid_Daily_query"><![CDATA[
select  substr(cycle_yyyymm,5,2)||'/'||substr(cycle_yyyymm,1,4) month,
to_char(to_date(cycle_date,'DD-MON'),'MM/DD')||'/'||substr(cycle_yyyymm,1,4) day, 
cycle_yyyymm,
plot_value,
workflow_type,
sub_type,
db_region,
cycle_time_volume,
bill_sig_amt,
ROUND(CASE WHEN cycle_time_volume  > 0 THEN bill_sig_amt/cycle_time_volume   ELSE 0 END,1) bill_sig_amt_avg
from    IOCT_INV_PRODUCT_CA a ,  udac_group_name_ca ug
where plot_time = {time}
and workflow_type = {workflow}
and sub_type in ({{subTypeArray}})
and db_region IN ({{regions}})
and ug.udac_group IN ({{products}})
and to_date(CYCLE_YYYYMM ,'YYYYMM')  = to_date(to_char(sysdate,'YYYYMM') ,'YYYYMM')
and a.plot_value = ug.udac_group_name
order by   day , plot_value ,db_region
]]></statement> 

<statement code="IOCT_Inv_Product_Grid_Weekly_query"><![CDATA[
select  substr(cycle_yyyymm,5,2)||'/'||substr(cycle_yyyymm,1,4) month,
to_char(to_date(cycle_date,'DD-MON'),'MM/DD')||'/'||substr(cycle_yyyymm,1,4) day, 
cycle_yyyymm,
plot_value,
workflow_type,
sub_type,
db_region,
cycle_time_volume,
bill_sig_amt,
ROUND(CASE WHEN cycle_time_volume  > 0 THEN bill_sig_amt/cycle_time_volume   ELSE 0 END,1) bill_sig_amt_avg
from    IOCT_INV_PRODUCT_CA a ,  udac_group_name_ca ug
where plot_time = {time}
and workflow_type = {workflow}
and sub_type in ({{subTypeArray}})
and db_region IN ({{regions}})
and ug.udac_group IN ({{products}})
and to_date(CYCLE_YYYYMM ,'YYYYMM') between  to_date(to_char(add_months(sysdate,-2),'YYYYMM'),'YYYYMM')   and  to_date(to_char(sysdate,'YYYYMM') ,'YYYYMM')
and a.plot_value = ug.udac_group_name
order by   day , plot_value ,db_region
]]></statement> 


<!--  END IYP Internet Operations Dashboard -->

</sql>