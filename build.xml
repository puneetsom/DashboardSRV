<project name="DashboardSRV build script" default="info">
	<description>
To use this build.xml, you need to do the following:
		
1. Install Ant 1.8.2 (or greater) on your PC (ant.apache.org) and define ANT_HOME system variable.  i.e. ANT_HOME=c:\apache-ant-1.8.2
2. Add %ANT_HOME%\bin to your PATH
3. Download Ant Contrib (ant-contrib.sourceforge.net) and copy the jar file to %ANT_HOME%\lib (ant-contrib-1.0b3.jar)
4. Define version.properties in your workspace directory with an "app.version" and "env" property
		app.version=v700
		env=dev3
5. Import DashboardBuild from CVS into workspace
6. Ensure all common.properties are set according your environment (particularly FLEX_HOME, catalina.home, and catalina.base) 
	</description>
	
	<property name="srv.dir" value="${basedir}" />
	<property  file="../version.properties" />
	<property file="${user.home}/DashboardBuild/${env}.properties"/>
	<property file="../DashboardBuild/${env}.properties" />
	<property file="${user.home}/DashboardBuild/common.properties"/>
	<property file="../DashboardBuild/common.properties" />

	<!--  ==================== Compilation Control Options ==================== -->
	<property name="compile.debug"       value="true"/>
	<property name="compile.deprecation" value="false"/>
	<property name="compile.optimize"    value="true"/>
	
	<!-- add AntContrib tasks (used for trycatch and if) -->
	<taskdef resource="net/sf/antcontrib/antlib.xml"/>

	<!-- add Tomcat -->
	<taskdef file="../DashboardBuild/includes/tomcatTasks.properties">
		<classpath>
			<pathelement path="${catalina.home}/lib/catalina-ant.jar"/>
		</classpath>
	</taskdef>

	<include file="../DashboardBuild/includes/macrodefs.xml" />
		
	<path id="compile.classpath">
		<!-- Include all elements that Tomcat exposes to applications -->
		<fileset dir="${catalina.home}/lib">
			<include name="*.jar"/>
		</fileset>
		<fileset dir="${catalina.base}/lib">
			<include name="*.jar"/>
		</fileset>
		<fileset dir="${srv.build.dir}/lib">
			<include name="*.jar"/>
		</fileset>
	</path>
	
	<target name="info">
		<echo>
env=${env}
tomcat.server=${tomcat.server}
tomcat.port=${tomcat.port}
base.data.url=${base.data.url}

catalina.home=${catalina.home}
catalina.base=${catalina.base}

DashboardSRV=${DashboardSRV}

srv.dir=${srv.dir}
srv.src.dir=${srv.src.dir}
srv.libs.dir=${srv.libs.dir}
srv.build.dir=${srv.build.dir}
dist.dir=${dist.dir}

manager.url=${manager.url}
manager.username=${manager.username}
manager.password=${manager.password}

quartz.enabled=${quartz.enabled}
quartz.sql.path=${quartz.sql.path}
quartz.properties.dir=${quartz.properties.dir}
quartz.output.dir=${quartz.output.dir}
		</echo>
	</target>
	
	<target name="!rebuild" 
		    description="Will clean before rebuilding web project" 
		    depends="clean, prepare, compile, package" />

	<target name="!build" 
		    depends="prepare, compile, package" />
		
	
	<!-- Clean previous build -->
	<target name="clean">
		<delete dir="${srv.build.dir}/build" />
		<delete dir="${srv.build.dir}/lib" />
		<delete dir="${srv.build.dir}/src" />
		<delete dir="${srv.build.dir}/WebContent" />
	</target>	
	
	<!-- Prepare files/directory before build -->
	<target name="prepare" description="Prepare build src directory before compiling">
		
		<mkdir  dir="${srv.build.dir}/classes"/>
		
		<!-- Copy WebContent -->    
		<copy todir="${srv.build.dir}/WebContent" includeEmptyDirs="false">
			<fileset dir="${srv.WebContent.dir}">
				<exclude name="**/*.bak" />
				<exclude name="**/*.old" />
				<exclude name="META-INF/**" />
				<exclude name="WEB-INF/lib/**" />
				<exclude name="WEB-INF/classes/**" />
				<exclude name="properties/config.properties" />
				<exclude name="properties/config_local.properties" />
				<exclude name="properties/config_prod.properties" />
				<exclude name="properties/config_test.properties" />
				<exclude name="properties/jobs.xml" />
				<exclude name="properties/jobs_dev.xml" />
				<exclude name="properties/jobs_local.xml" />
				<exclude name="properties/jobs_prod.xml" />
				<exclude name="properties/jobs_test.xml" />
				<exclude name="WEB-INF/web.xml" />
				<exclude name="WEB-INF/web_local.xml" />
				<exclude name="WEB-INF/web_prod.xml" />
				<exclude name="WEB-INF/web_test.xml" />
			</fileset>
		</copy>
	    
	    <!-- Copy java sources -->
	    <copy todir="${srv.build.dir}/src" includeEmptyDirs="false">
	      <fileset dir="${srv.src.dir}">
	        <include name="**/*.java"/>
	      </fileset>
	    </copy>
		
	    <!-- Copy libraries -->
	    <copy todir="${srv.build.dir}/lib">
	      <fileset dir="${srv.WebContent.dir}/WEB-INF/lib">
	        <include name="**/*.jar"/>
	      </fileset>
	    </copy>
		
	    <!-- Copy META-INF content -->
	    <copy todir="${srv.build.dir}/WebContent/META-INF">
	      <fileset dir="${srv.WebContent.dir}/META-INF">
	        <include name="context.template.xml"/>
	        <include name="MANIFEST.MF"/>
	      </fileset>
	    </copy>
		
	</target>
	
	
	<!-- Compile classes -->
	<target name="compile" description="Compiles DasboardSRV">
	    <!-- Compile Java classes as necessary -->    
	    <javac srcdir="${srv.build.dir}/src"
	    	   destdir="${srv.build.dir}/classes"
			   debug="${compile.debug}"
			   deprecation="${compile.deprecation}"
			   optimize="${compile.optimize}"
			   fork="yes"
			   executable="${javac}"
			   includeantruntime="false">
	        <!-- compilerarg value="-Xlint"/ -->
	        <classpath refid="compile.classpath"/>
	    </javac>
		
		<!-- Increment build number and date -->
		<tstamp>
			<format property="build.date" pattern="MM/dd/yyyy hh:mm aa z" />
		</tstamp>
		
		<propertyfile file="${srv.dir}/build.properties">
			<entry key="build.number" type="int" operation="+" value="1"/>
			<entry key="build.date" value="${build.date}" />
			<entry key="app.version" value="${app.version}" />
		</propertyfile>
		
	</target>
	
	
	<!-- Package DashboardSRV to WAR file -->
	<target name="package" description="Packages DasboardSRV WAR file">
		
	    <delete quiet="true" file="${dist.dir}/${srv.war}"/>
		
		<filter filtersfile="../DashboardBuild/${env}.properties"/>
		<filter filtersfile="${srv.dir}/build.properties"/>
		<copy file="${srv.build.dir}/WebContent/META-INF/context.template.xml" tofile="${srv.build.dir}/WebContent/META-INF/context.xml" filtering="true" overwrite="true" />
		<copy file="${srv.build.dir}/WebContent/WEB-INF/web.template.xml" tofile="${srv.build.dir}/WebContent/WEB-INF/web.xml" filtering="true" overwrite="true" />
		<copy file="${srv.build.dir}/WebContent/properties/config.template.properties" tofile="${srv.build.dir}/WebContent/properties/config.properties" filtering="true" overwrite="true" />
		<copy file="${srv.build.dir}/WebContent/properties/config.template.properties" tofile="${srv.build.dir}/classes/config.properties" filtering="true" overwrite="true"/>
		<copy file="${srv.build.dir}/WebContent/properties/log4j.properties" tofile="${srv.build.dir}/classes/log4j.properties" filtering="true" overwrite="true"/>
		<!-- If quartz scheduler is enabled, use the jobs.template.xml -->
		<if>
			<equals arg1="${quartz.enabled}" arg2="true" />
			<then>
				<echo>Quartz enabled!</echo>
				<copy file="${srv.build.dir}/WebContent/properties/jobs.template.xml" tofile="${srv.build.dir}/WebContent/properties/jobs.xml" filtering="true" overwrite="true" />
			</then>
			<else>
				<copy file="${srv.build.dir}/WebContent/properties/jobs_no-run.xml" tofile="${srv.build.dir}/WebContent/properties/jobs.xml" filtering="true" overwrite="true" />
			</else>
		</if>
		<copy file="${srv.build.dir}/WebContent/properties/jobs.xml" tofile="${srv.build.dir}/classes/jobs.xml" overwrite="true" />
						
		<war destfile="${dist.dir}/${srv.war}" 
			 webxml="${srv.build.dir}/WebContent/WEB-INF/web.xml">
			<metainf dir="${srv.build.dir}/WebContent/META-INF" excludes="context.template.xml" />
			<webinf dir="${srv.build.dir}/WebContent/WEB-INF" excludes="web*.xml" />
			<lib dir="${srv.build.dir}/lib" />
			<classes dir="${srv.build.dir}/classes"/>
			<fileset dir="${srv.build.dir}/WebContent" excludes="META-INF/**, WEB-INF/**, properties/jobs.template.xml, properties/jobs-no-run.xml" />
	    </war>
		
	</target>
	
	
	<target name="configure-project">
		<filter filtersfile="../DashboardBuild/${env}.properties"/>
		<filter filtersfile="${srv.dir}/build.properties"/>
		<copy file="${srv.dir}/WebContent/META-INF/context.template.xml" tofile="${srv.dir}/WebContent/META-INF/context.xml" filtering="true" overwrite="true" />
		<copy file="${srv.dir}/WebContent/WEB-INF/web.template.xml" tofile="${srv.dir}/WebContent/WEB-INF/web.xml" filtering="true" overwrite="true" />
		<copy file="${srv.dir}/WebContent/properties/config.template.properties" tofile="${srv.dir}/WebContent/properties/config.properties" filtering="true" overwrite="true" />
		<copy file="${srv.dir}/WebContent/properties/config.template.properties" tofile="${srv.dir}/WebContent/WEB-INF/classes/config.properties" filtering="true" overwrite="true"/>
		<!-- If quartz scheduler is enabled, use the jobs.template.xml -->
		<if>
			<equals arg1="${quartz.enabled}" arg2="true" />
			<then>
				<echo>Quartz enabled!</echo>
				<copy file="${srv.dir}/WebContent/properties/jobs.template.xml" tofile="${srv.dir}/WebContent/properties/jobs.xml" filtering="true" overwrite="true" />
			</then>
			<else>
				<copy file="${srv.dir}/WebContent/properties/jobs_no-run.xml" tofile="${srv.dir}/WebContent/properties/jobs.xml" filtering="true" overwrite="true" />
			</else>
		</if>
	</target>
	
	
	<!-- ==================== List Target ====================================== -->
	<target name="list" description="List installed applications on servlet container">
		
		<echo>
-------------
 \ Server: ${tomcat.server}
  \  Port: ${tomcat.port}
   ---------
		</echo>
		
		<list url="${manager.url}"
		 username="${manager.username}"
		 password="${manager.password}"/>
		
	</target>
	
	<!-- ==================== Deploy Target =================================== -->
	<target name="install" description="Install DashboardSRV">
		<tomcat-deploy app.context="${srv.context}" app.war="${srv.war}" />
	</target>

	<!-- ==================== Reload Target =================================== -->
	<target name="reload" description="Reload DashboardSRV">
		<tomcat-reload app.context="${srv.context}" />			
	</target>

	<!-- ==================== Undeploy Target ================================= -->
	<target name="remove" description="Remove DashboardSRV">
		<tomcat-undeploy app.context="${srv.context}" />		
	</target>

	<!-- ==================== Start Target ==================================== -->
	<target name="start" description="Start DashboardSRV">
		<tomcat-start app.context="${srv.context}" />
	</target>

	<!-- ==================== Stop Targets===================================== -->
	<target name="stop" description="Stop DashboardSRV">
		<tomcat-stop app.context="${srv.context}" />
	</target>
	
</project>